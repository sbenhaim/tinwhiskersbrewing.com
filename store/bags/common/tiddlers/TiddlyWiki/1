modifier: None
created: 
modified: 20120107171511
type: None
tags: 


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<script id="versionArea" type="text/javascript">
//<![CDATA[
var version = {title: "TiddlyWiki", major: 2, minor: 6, revision: 5, date: new Date("October 6, 2011"), extensions: {}};
//]]>
</script>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="copyright" content="
TiddlyWiki created by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)

Copyright (c) Jeremy Ruston 2004-2007
Copyright (c) UnaMesa Association 2007-2011

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of the UnaMesa Association nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
" />
<!--PRE-HEAD-START-->
<link rel="alternate" type="application/atom+xml" title="Atom" href="/wiki/recipes/docs/tiddlers.atom?sort=-modified;limit=20" />
<link rel="canonical" href="/wiki/recipes/docs/tiddlers" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<!--PRE-HEAD-END-->
<title>
TiddlyWeb Documentation
</title>
<style id="styleArea" type="text/css">
#saveTest {display:none;}
#messageArea {display:none;}
#copyright {display:none;}
#storeArea {display:none;}
#storeArea div {padding:0.5em; margin:1em 0em 0em 0em; border-color:#fff #666 #444 #ddd; border-style:solid; border-width:2px; overflow:auto;}
#shadowArea {display:none;}
#javascriptWarning {width:100%; text-align:center; font-weight:bold; background-color:#dd1100; color:#fff; padding:1em 0em;}
</style>
<!--POST-HEAD-START-->
<!--POST-HEAD-END-->
</head>
<body onload="main();" onunload="if(window.unload) unload();">
<!--PRE-BODY-START-->
<!--PRE-BODY-END-->
<div id="copyright">
Welcome to TiddlyWiki created by Jeremy Ruston; Copyright &copy; 2004-2007 Jeremy Ruston, Copyright &copy; 2007-2011 UnaMesa Association
</div>
<noscript>

<div id="javascriptWarning">
This page requires JavaScript to function properly.<br /><br />
If you do not use JavaScript you may still <a href="http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers">browse
the content of this wiki</a>.
</div>

</noscript>
<div id="saveTest"></div>
<div id="backstageCloak"></div>
<div id="backstageButton"></div>
<div id="backstageArea"><div id="backstageToolbar"></div></div>
<div id="backstage">
	<div id="backstagePanel"></div>
</div>
<div id="contentWrapper"></div>
<div id="contentStash"></div>
<div id="shadowArea">
<div title="MarkupPreHead">
<pre>&lt;!--{{{--&gt;
&lt;link rel='alternate' type='application/rss+xml' title='RSS' href='index.xml' /&gt;
&lt;!--}}}--&gt;
</pre>
</div>
<div title="ColorPalette">
<pre>Background: #fff
Foreground: #000
PrimaryPale: #8cf
PrimaryLight: #18f
PrimaryMid: #04b
PrimaryDark: #014
SecondaryPale: #ffc
SecondaryLight: #fe8
SecondaryMid: #db4
SecondaryDark: #841
TertiaryPale: #eee
TertiaryLight: #ccc
TertiaryMid: #999
TertiaryDark: #666
Error: #f88
</pre>
</div>
<div title="StyleSheetColors">
<pre>/*{{{*/
body {background:[[ColorPalette::Background]]; color:[[ColorPalette::Foreground]];}

a {color:[[ColorPalette::PrimaryMid]];}
a:hover {background-color:[[ColorPalette::PrimaryMid]]; color:[[ColorPalette::Background]];}
a img {border:0;}

h1,h2,h3,h4,h5,h6 {color:[[ColorPalette::SecondaryDark]]; background:transparent;}
h1 {border-bottom:2px solid [[ColorPalette::TertiaryLight]];}
h2,h3 {border-bottom:1px solid [[ColorPalette::TertiaryLight]];}

.button {color:[[ColorPalette::PrimaryDark]]; border:1px solid [[ColorPalette::Background]];}
.button:hover {color:[[ColorPalette::PrimaryDark]]; background:[[ColorPalette::SecondaryLight]]; border-color:[[ColorPalette::SecondaryMid]];}
.button:active {color:[[ColorPalette::Background]]; background:[[ColorPalette::SecondaryMid]]; border:1px solid [[ColorPalette::SecondaryDark]];}

.header {background:[[ColorPalette::PrimaryMid]];}
.headerShadow {color:[[ColorPalette::Foreground]];}
.headerShadow a {font-weight:normal; color:[[ColorPalette::Foreground]];}
.headerForeground {color:[[ColorPalette::Background]];}
.headerForeground a {font-weight:normal; color:[[ColorPalette::PrimaryPale]];}

.tabSelected {color:[[ColorPalette::PrimaryDark]];
	background:[[ColorPalette::TertiaryPale]];
	border-left:1px solid [[ColorPalette::TertiaryLight]];
	border-top:1px solid [[ColorPalette::TertiaryLight]];
	border-right:1px solid [[ColorPalette::TertiaryLight]];
}
.tabUnselected {color:[[ColorPalette::Background]]; background:[[ColorPalette::TertiaryMid]];}
.tabContents {color:[[ColorPalette::PrimaryDark]]; background:[[ColorPalette::TertiaryPale]]; border:1px solid [[ColorPalette::TertiaryLight]];}
.tabContents .button {border:0;}

#sidebar {}
#sidebarOptions input {border:1px solid [[ColorPalette::PrimaryMid]];}
#sidebarOptions .sliderPanel {background:[[ColorPalette::PrimaryPale]];}
#sidebarOptions .sliderPanel a {border:none;color:[[ColorPalette::PrimaryMid]];}
#sidebarOptions .sliderPanel a:hover {color:[[ColorPalette::Background]]; background:[[ColorPalette::PrimaryMid]];}
#sidebarOptions .sliderPanel a:active {color:[[ColorPalette::PrimaryMid]]; background:[[ColorPalette::Background]];}

.wizard {background:[[ColorPalette::PrimaryPale]]; border:1px solid [[ColorPalette::PrimaryMid]];}
.wizard h1 {color:[[ColorPalette::PrimaryDark]]; border:none;}
.wizard h2 {color:[[ColorPalette::Foreground]]; border:none;}
.wizardStep {background:[[ColorPalette::Background]]; color:[[ColorPalette::Foreground]];
	border:1px solid [[ColorPalette::PrimaryMid]];}
.wizardStep.wizardStepDone {background:[[ColorPalette::TertiaryLight]];}
.wizardFooter {background:[[ColorPalette::PrimaryPale]];}
.wizardFooter .status {background:[[ColorPalette::PrimaryDark]]; color:[[ColorPalette::Background]];}
.wizard .button {color:[[ColorPalette::Foreground]]; background:[[ColorPalette::SecondaryLight]]; border: 1px solid;
	border-color:[[ColorPalette::SecondaryPale]] [[ColorPalette::SecondaryDark]] [[ColorPalette::SecondaryDark]] [[ColorPalette::SecondaryPale]];}
.wizard .button:hover {color:[[ColorPalette::Foreground]]; background:[[ColorPalette::Background]];}
.wizard .button:active {color:[[ColorPalette::Background]]; background:[[ColorPalette::Foreground]]; border: 1px solid;
	border-color:[[ColorPalette::PrimaryDark]] [[ColorPalette::PrimaryPale]] [[ColorPalette::PrimaryPale]] [[ColorPalette::PrimaryDark]];}

.wizard .notChanged {background:transparent;}
.wizard .changedLocally {background:#80ff80;}
.wizard .changedServer {background:#8080ff;}
.wizard .changedBoth {background:#ff8080;}
.wizard .notFound {background:#ffff80;}
.wizard .putToServer {background:#ff80ff;}
.wizard .gotFromServer {background:#80ffff;}

#messageArea {border:1px solid [[ColorPalette::SecondaryMid]]; background:[[ColorPalette::SecondaryLight]]; color:[[ColorPalette::Foreground]];}
#messageArea .button {color:[[ColorPalette::PrimaryMid]]; background:[[ColorPalette::SecondaryPale]]; border:none;}

.popupTiddler {background:[[ColorPalette::TertiaryPale]]; border:2px solid [[ColorPalette::TertiaryMid]];}

.popup {background:[[ColorPalette::TertiaryPale]]; color:[[ColorPalette::TertiaryDark]]; border-left:1px solid [[ColorPalette::TertiaryMid]]; border-top:1px solid [[ColorPalette::TertiaryMid]]; border-right:2px solid [[ColorPalette::TertiaryDark]]; border-bottom:2px solid [[ColorPalette::TertiaryDark]];}
.popup hr {color:[[ColorPalette::PrimaryDark]]; background:[[ColorPalette::PrimaryDark]]; border-bottom:1px;}
.popup li.disabled {color:[[ColorPalette::TertiaryMid]];}
.popup li a, .popup li a:visited {color:[[ColorPalette::Foreground]]; border: none;}
.popup li a:hover {background:[[ColorPalette::SecondaryLight]]; color:[[ColorPalette::Foreground]]; border: none;}
.popup li a:active {background:[[ColorPalette::SecondaryPale]]; color:[[ColorPalette::Foreground]]; border: none;}
.popupHighlight {background:[[ColorPalette::Background]]; color:[[ColorPalette::Foreground]];}
.listBreak div {border-bottom:1px solid [[ColorPalette::TertiaryDark]];}

.tiddler .defaultCommand {font-weight:bold;}

.shadow .title {color:[[ColorPalette::TertiaryDark]];}

.title {color:[[ColorPalette::SecondaryDark]];}
.subtitle {color:[[ColorPalette::TertiaryDark]];}

.toolbar {color:[[ColorPalette::PrimaryMid]];}
.toolbar a {color:[[ColorPalette::TertiaryLight]];}
.selected .toolbar a {color:[[ColorPalette::TertiaryMid]];}
.selected .toolbar a:hover {color:[[ColorPalette::Foreground]];}

.tagging, .tagged {border:1px solid [[ColorPalette::TertiaryPale]]; background-color:[[ColorPalette::TertiaryPale]];}
.selected .tagging, .selected .tagged {background-color:[[ColorPalette::TertiaryLight]]; border:1px solid [[ColorPalette::TertiaryMid]];}
.tagging .listTitle, .tagged .listTitle {color:[[ColorPalette::PrimaryDark]];}
.tagging .button, .tagged .button {border:none;}

.footer {color:[[ColorPalette::TertiaryLight]];}
.selected .footer {color:[[ColorPalette::TertiaryMid]];}

.error, .errorButton {color:[[ColorPalette::Foreground]]; background:[[ColorPalette::Error]];}
.warning {color:[[ColorPalette::Foreground]]; background:[[ColorPalette::SecondaryPale]];}
.lowlight {background:[[ColorPalette::TertiaryLight]];}

.zoomer {background:none; color:[[ColorPalette::TertiaryMid]]; border:3px solid [[ColorPalette::TertiaryMid]];}

.imageLink, #displayArea .imageLink {background:transparent;}

.annotation {background:[[ColorPalette::SecondaryLight]]; color:[[ColorPalette::Foreground]]; border:2px solid [[ColorPalette::SecondaryMid]];}

.viewer .listTitle {list-style-type:none; margin-left:-2em;}
.viewer .button {border:1px solid [[ColorPalette::SecondaryMid]];}
.viewer blockquote {border-left:3px solid [[ColorPalette::TertiaryDark]];}

.viewer table, table.twtable {border:2px solid [[ColorPalette::TertiaryDark]];}
.viewer th, .viewer thead td, .twtable th, .twtable thead td {background:[[ColorPalette::SecondaryMid]]; border:1px solid [[ColorPalette::TertiaryDark]]; color:[[ColorPalette::Background]];}
.viewer td, .viewer tr, .twtable td, .twtable tr {border:1px solid [[ColorPalette::TertiaryDark]];}

.viewer pre {border:1px solid [[ColorPalette::SecondaryLight]]; background:[[ColorPalette::SecondaryPale]];}
.viewer code {color:[[ColorPalette::SecondaryDark]];}
.viewer hr {border:0; border-top:dashed 1px [[ColorPalette::TertiaryDark]]; color:[[ColorPalette::TertiaryDark]];}

.highlight, .marked {background:[[ColorPalette::SecondaryLight]];}

.editor input {border:1px solid [[ColorPalette::PrimaryMid]];}
.editor textarea {border:1px solid [[ColorPalette::PrimaryMid]]; width:100%;}
.editorFooter {color:[[ColorPalette::TertiaryMid]];}
.readOnly {background:[[ColorPalette::TertiaryPale]];}

#backstageArea {background:[[ColorPalette::Foreground]]; color:[[ColorPalette::TertiaryMid]];}
#backstageArea a {background:[[ColorPalette::Foreground]]; color:[[ColorPalette::Background]]; border:none;}
#backstageArea a:hover {background:[[ColorPalette::SecondaryLight]]; color:[[ColorPalette::Foreground]]; }
#backstageArea a.backstageSelTab {background:[[ColorPalette::Background]]; color:[[ColorPalette::Foreground]];}
#backstageButton a {background:none; color:[[ColorPalette::Background]]; border:none;}
#backstageButton a:hover {background:[[ColorPalette::Foreground]]; color:[[ColorPalette::Background]]; border:none;}
#backstagePanel {background:[[ColorPalette::Background]]; border-color: [[ColorPalette::Background]] [[ColorPalette::TertiaryDark]] [[ColorPalette::TertiaryDark]] [[ColorPalette::TertiaryDark]];}
.backstagePanelFooter .button {border:none; color:[[ColorPalette::Background]];}
.backstagePanelFooter .button:hover {color:[[ColorPalette::Foreground]];}
#backstageCloak {background:[[ColorPalette::Foreground]]; opacity:0.6; filter:alpha(opacity=60);}
/*}}}*/</pre>
</div>
<div title="StyleSheetLayout">
<pre>/*{{{*/
* html .tiddler {height:1%;}

body {font-size:.75em; font-family:arial,helvetica; margin:0; padding:0;}

h1,h2,h3,h4,h5,h6 {font-weight:bold; text-decoration:none;}
h1,h2,h3 {padding-bottom:1px; margin-top:1.2em;margin-bottom:0.3em;}
h4,h5,h6 {margin-top:1em;}
h1 {font-size:1.35em;}
h2 {font-size:1.25em;}
h3 {font-size:1.1em;}
h4 {font-size:1em;}
h5 {font-size:.9em;}

hr {height:1px;}

a {text-decoration:none;}

dt {font-weight:bold;}

ol {list-style-type:decimal;}
ol ol {list-style-type:lower-alpha;}
ol ol ol {list-style-type:lower-roman;}
ol ol ol ol {list-style-type:decimal;}
ol ol ol ol ol {list-style-type:lower-alpha;}
ol ol ol ol ol ol {list-style-type:lower-roman;}
ol ol ol ol ol ol ol {list-style-type:decimal;}

.txtOptionInput {width:11em;}

#contentWrapper .chkOptionInput {border:0;}

.externalLink {text-decoration:underline;}

.indent {margin-left:3em;}
.outdent {margin-left:3em; text-indent:-3em;}
code.escaped {white-space:nowrap;}

.tiddlyLinkExisting {font-weight:bold;}
.tiddlyLinkNonExisting {font-style:italic;}

/* the 'a' is required for IE, otherwise it renders the whole tiddler in bold */
a.tiddlyLinkNonExisting.shadow {font-weight:bold;}

#mainMenu .tiddlyLinkExisting,
	#mainMenu .tiddlyLinkNonExisting,
	#sidebarTabs .tiddlyLinkNonExisting {font-weight:normal; font-style:normal;}
#sidebarTabs .tiddlyLinkExisting {font-weight:bold; font-style:normal;}

.header {position:relative;}
.header a:hover {background:transparent;}
.headerShadow {position:relative; padding:4.5em 0 1em 1em; left:-1px; top:-1px;}
.headerForeground {position:absolute; padding:4.5em 0 1em 1em; left:0; top:0;}

.siteTitle {font-size:3em;}
.siteSubtitle {font-size:1.2em;}

#mainMenu {position:absolute; left:0; width:10em; text-align:right; line-height:1.6em; padding:1.5em 0.5em 0.5em 0.5em; font-size:1.1em;}

#sidebar {position:absolute; right:3px; width:16em; font-size:.9em;}
#sidebarOptions {padding-top:0.3em;}
#sidebarOptions a {margin:0 0.2em; padding:0.2em 0.3em; display:block;}
#sidebarOptions input {margin:0.4em 0.5em;}
#sidebarOptions .sliderPanel {margin-left:1em; padding:0.5em; font-size:.85em;}
#sidebarOptions .sliderPanel a {font-weight:bold; display:inline; padding:0;}
#sidebarOptions .sliderPanel input {margin:0 0 0.3em 0;}
#sidebarTabs .tabContents {width:15em; overflow:hidden;}

.wizard {padding:0.1em 1em 0 2em;}
.wizard h1 {font-size:2em; font-weight:bold; background:none; padding:0; margin:0.4em 0 0.2em;}
.wizard h2 {font-size:1.2em; font-weight:bold; background:none; padding:0; margin:0.4em 0 0.2em;}
.wizardStep {padding:1em 1em 1em 1em;}
.wizard .button {margin:0.5em 0 0; font-size:1.2em;}
.wizardFooter {padding:0.8em 0.4em 0.8em 0;}
.wizardFooter .status {padding:0 0.4em; margin-left:1em;}
.wizard .button {padding:0.1em 0.2em;}

#messageArea {position:fixed; top:2em; right:0; margin:0.5em; padding:0.5em; z-index:2000; _position:absolute;}
.messageToolbar {display:block; text-align:right; padding:0.2em;}
#messageArea a {text-decoration:underline;}

.tiddlerPopupButton {padding:0.2em;}
.popupTiddler {position: absolute; z-index:300; padding:1em; margin:0;}

.popup {position:absolute; z-index:300; font-size:.9em; padding:0; list-style:none; margin:0;}
.popup .popupMessage {padding:0.4em;}
.popup hr {display:block; height:1px; width:auto; padding:0; margin:0.2em 0;}
.popup li.disabled {padding:0.4em;}
.popup li a {display:block; padding:0.4em; font-weight:normal; cursor:pointer;}
.listBreak {font-size:1px; line-height:1px;}
.listBreak div {margin:2px 0;}

.tabset {padding:1em 0 0 0.5em;}
.tab {margin:0 0 0 0.25em; padding:2px;}
.tabContents {padding:0.5em;}
.tabContents ul, .tabContents ol {margin:0; padding:0;}
.txtMainTab .tabContents li {list-style:none;}
.tabContents li.listLink { margin-left:.75em;}

#contentWrapper {display:block;}
#splashScreen {display:none;}

#displayArea {margin:1em 17em 0 14em;}

.toolbar {text-align:right; font-size:.9em;}

.tiddler {padding:1em 1em 0;}

.missing .viewer,.missing .title {font-style:italic;}

.title {font-size:1.6em; font-weight:bold;}

.missing .subtitle {display:none;}
.subtitle {font-size:1.1em;}

.tiddler .button {padding:0.2em 0.4em;}

.tagging {margin:0.5em 0.5em 0.5em 0; float:left; display:none;}
.isTag .tagging {display:block;}
.tagged {margin:0.5em; float:right;}
.tagging, .tagged {font-size:0.9em; padding:0.25em;}
.tagging ul, .tagged ul {list-style:none; margin:0.25em; padding:0;}
.tagClear {clear:both;}

.footer {font-size:.9em;}
.footer li {display:inline;}

.annotation {padding:0.5em; margin:0.5em;}

* html .viewer pre {width:99%; padding:0 0 1em 0;}
.viewer {line-height:1.4em; padding-top:0.5em;}
.viewer .button {margin:0 0.25em; padding:0 0.25em;}
.viewer blockquote {line-height:1.5em; padding-left:0.8em;margin-left:2.5em;}
.viewer ul, .viewer ol {margin-left:0.5em; padding-left:1.5em;}

.viewer table, table.twtable {border-collapse:collapse; margin:0.8em 1.0em;}
.viewer th, .viewer td, .viewer tr,.viewer caption,.twtable th, .twtable td, .twtable tr,.twtable caption {padding:3px;}
table.listView {font-size:0.85em; margin:0.8em 1.0em;}
table.listView th, table.listView td, table.listView tr {padding:0 3px 0 3px;}

.viewer pre {padding:0.5em; margin-left:0.5em; font-size:1.2em; line-height:1.4em; overflow:auto;}
.viewer code {font-size:1.2em; line-height:1.4em;}

.editor {font-size:1.1em;}
.editor input, .editor textarea {display:block; width:100%; font:inherit;}
.editorFooter {padding:0.25em 0; font-size:.9em;}
.editorFooter .button {padding-top:0; padding-bottom:0;}

.fieldsetFix {border:0; padding:0; margin:1px 0px;}

.zoomer {font-size:1.1em; position:absolute; overflow:hidden;}
.zoomer div {padding:1em;}

* html #backstage {width:99%;}
* html #backstageArea {width:99%;}
#backstageArea {display:none; position:relative; overflow: hidden; z-index:150; padding:0.3em 0.5em;}
#backstageToolbar {position:relative;}
#backstageArea a {font-weight:bold; margin-left:0.5em; padding:0.3em 0.5em;}
#backstageButton {display:none; position:absolute; z-index:175; top:0; right:0;}
#backstageButton a {padding:0.1em 0.4em; margin:0.1em;}
#backstage {position:relative; width:100%; z-index:50;}
#backstagePanel {display:none; z-index:100; position:absolute; width:90%; margin-left:3em; padding:1em;}
.backstagePanelFooter {padding-top:0.2em; float:right;}
.backstagePanelFooter a {padding:0.2em 0.4em;}
#backstageCloak {display:none; z-index:20; position:absolute; width:100%; height:100px;}

.whenBackstage {display:none;}
.backstageVisible .whenBackstage {display:block;}
/*}}}*/
</pre>
</div>
<div title="StyleSheetLocale">
<pre>/***
StyleSheet for use when a translation requires any css style changes.
This StyleSheet can be used directly by languages such as Chinese, Japanese and Korean which need larger font sizes.
***/
/*{{{*/
body {font-size:0.8em;}
#sidebarOptions {font-size:1.05em;}
#sidebarOptions a {font-style:normal;}
#sidebarOptions .sliderPanel {font-size:0.95em;}
.subtitle {font-size:0.8em;}
.viewer table.listView {font-size:0.95em;}
/*}}}*/</pre>
</div>
<div title="StyleSheetPrint">
<pre>/*{{{*/
@media print {
#mainMenu, #sidebar, #messageArea, .toolbar, #backstageButton, #backstageArea {display: none !important;}
#displayArea {margin: 1em 1em 0em;}
noscript {display:none;} /* Fixes a feature in Firefox 1.5.0.2 where print preview displays the noscript content */
}
/*}}}*/</pre>
</div>
<div title="PageTemplate">
<pre>&lt;!--{{{--&gt;
&lt;div class='header' macro='gradient vert [[ColorPalette::PrimaryLight]] [[ColorPalette::PrimaryMid]]'&gt;
&lt;div class='headerShadow'&gt;
&lt;span class='siteTitle' refresh='content' tiddler='SiteTitle'&gt;&lt;/span&gt;&amp;nbsp;
&lt;span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div class='headerForeground'&gt;
&lt;span class='siteTitle' refresh='content' tiddler='SiteTitle'&gt;&lt;/span&gt;&amp;nbsp;
&lt;span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id='mainMenu' refresh='content' tiddler='MainMenu'&gt;&lt;/div&gt;
&lt;div id='sidebar'&gt;
&lt;div id='sidebarOptions' refresh='content' tiddler='SideBarOptions'&gt;&lt;/div&gt;
&lt;div id='sidebarTabs' refresh='content' force='true' tiddler='SideBarTabs'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id='displayArea'&gt;
&lt;div id='messageArea'&gt;&lt;/div&gt;
&lt;div id='tiddlerDisplay'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="ViewTemplate">
<pre>&lt;!--{{{--&gt;
&lt;div class='toolbar' macro='toolbar [[ToolbarCommands::ViewToolbar]]'&gt;&lt;/div&gt;
&lt;div class='title' macro='view title'&gt;&lt;/div&gt;
&lt;div class='subtitle'&gt;&lt;span macro='view modifier link'&gt;&lt;/span&gt;, &lt;span macro='view modified date'&gt;&lt;/span&gt; (&lt;span macro='message views.wikified.createdPrompt'&gt;&lt;/span&gt; &lt;span macro='view created date'&gt;&lt;/span&gt;)&lt;/div&gt;
&lt;div class='tagging' macro='tagging'&gt;&lt;/div&gt;
&lt;div class='tagged' macro='tags'&gt;&lt;/div&gt;
&lt;div class='viewer' macro='view text wikified'&gt;&lt;/div&gt;
&lt;div class='tagClear'&gt;&lt;/div&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="EditTemplate">
<pre>&lt;!--{{{--&gt;
&lt;div class='toolbar' macro='toolbar [[ToolbarCommands::EditToolbar]]'&gt;&lt;/div&gt;
&lt;div class='title' macro='view title'&gt;&lt;/div&gt;
&lt;div class='editor' macro='edit title'&gt;&lt;/div&gt;
&lt;div macro='annotations'&gt;&lt;/div&gt;
&lt;div class='editor' macro='edit text'&gt;&lt;/div&gt;
&lt;div class='editor' macro='edit tags'&gt;&lt;/div&gt;&lt;div class='editorFooter'&gt;&lt;span macro='message views.editor.tagPrompt'&gt;&lt;/span&gt;&lt;span macro='tagChooser excludeLists'&gt;&lt;/span&gt;&lt;/div&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="GettingStarted">
<pre>To get started with this blank [[TiddlyWiki]], you'll need to modify the following tiddlers:
* [[SiteTitle]] &amp; [[SiteSubtitle]]: The title and subtitle of the site, as shown above (after saving, they will also appear in the browser title bar)
* [[MainMenu]]: The menu (usually on the left)
* [[DefaultTiddlers]]: Contains the names of the tiddlers that you want to appear when the TiddlyWiki is opened
You'll also need to enter your username for signing your edits: &lt;&lt;option txtUserName&gt;&gt;</pre>
</div>
<div title="OptionsPanel">
<pre>These [[InterfaceOptions]] for customising [[TiddlyWiki]] are saved in your browser

Your username for signing your edits. Write it as a [[WikiWord]] (eg [[JoeBloggs]])

&lt;&lt;option txtUserName&gt;&gt;
&lt;&lt;option chkSaveBackups&gt;&gt; [[SaveBackups]]
&lt;&lt;option chkAutoSave&gt;&gt; [[AutoSave]]
&lt;&lt;option chkRegExpSearch&gt;&gt; [[RegExpSearch]]
&lt;&lt;option chkCaseSensitiveSearch&gt;&gt; [[CaseSensitiveSearch]]
&lt;&lt;option chkAnimate&gt;&gt; [[EnableAnimations]]

----
Also see [[AdvancedOptions]]</pre>
</div>
<div title="ImportTiddlers">
<pre>&lt;&lt;importTiddlers&gt;&gt;</pre>
</div>
</div>
<!--POST-SHADOWAREA-->
<div id="storeArea">
<div title="Showcase" server.title="Showcase" server.page.revision="845" server.etag="&quot;docs/Showcase/845:111d5ad1b36d09fa145b5b411b738d6135e10f10&quot;" modifier="fnd.lewcid.org" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091017084005" created="20090719160603" tags="" >
<pre>* [[Scrumptious|http://scrumptious.tv]]
* [[Cork|http://gist.github.com/121370]] (work in progress)
* [[TiddlyWebConfigurator|http://github.com/jayfresh/TiddlyWebConfigurator]] (work in progress)
* [[TiddlyRecon|http://github.com/FND/TiddlyRecon]] ([[demo|http://collab.tiddlywiki.org/TiddlyRecon/]])
* [[TiddlyDocs|http://tiddlydocs.com]] (currently being ported to TiddlyWeb)</pre>
</div>
<div title="OverviewComment1278151033391" server.title="OverviewComment1278151033391" server.page.revision="1525" server.etag="&quot;comments/OverviewComment1278151033391/1525:be8c7ec176a0c3083205e87833ac3c7cdeee9f52&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100703095716" created="20100703095716" tags="comment" daddy="OverviewComment1278150956520" root="Overview">
<pre>works very well</pre>
</div>
<div title="SimpleSearchPlugin" server.title="SimpleSearchPlugin" server.page.revision="2019" server.etag="&quot;tpc/SimpleSearchPlugin/2019:8232e2520d8f19309a88415655118980c9ef2546&quot;" modifier="fnd" creator="fnd" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090515235114" created="20090515235114" tags="systemConfig" >
<pre>/***
|''Name''|SimpleSearchPlugin|
|''Description''|displays search results as a simple list of matching tiddlers|
|''Authors''|FND|
|''Version''|0.4.1|
|''Status''|stable|
|''Source''|http://devpad.tiddlyspot.com/#SimpleSearchPlugin|
|''CodeRepository''|http://svn.tiddlywiki.org/Trunk/contributors/FND/plugins/SimpleSearchPlugin.js|
|''License''|[[Creative Commons Attribution-ShareAlike 3.0 License|http://creativecommons.org/licenses/by-sa/3.0/]]|
|''Keywords''|search|
!Revision History
!!v0.2.0 (2008-08-18)
* initial release
!!v0.3.0 (2008-08-19)
* added Open All button (renders Classic Search option obsolete)
* sorting by relevance (title matches before content matches)
!!v0.4.0 (2008-08-26)
* added tag matching
!To Do
* tag matching optional
* animations for container creation and removal
* when clicking on search results, do not scroll to the respective tiddler (optional)
* use template for search results
!Code
***/
//{{{
if(!version.extensions.SimpleSearchPlugin) { //# ensure that the plugin is only installed once
version.extensions.SimpleSearchPlugin = { installed: true };

if(!config.extensions) { config.extensions = {}; }

config.extensions.SimpleSearchPlugin = {
	heading: "Search Results",
	containerId: "searchResults",
	btnCloseLabel: "close",
	btnCloseTooltip: "dismiss search results",
	btnCloseId: "search_close",
	btnOpenLabel: "Open all",
	btnOpenTooltip: "open all search results",
	btnOpenId: "search_open",

	displayResults: function(matches, query) {
		story.refreshAllTiddlers(true); // update highlighting within story tiddlers
		var el = document.getElementById(this.containerId);
		query = '"""' + query + '"""'; // prevent WikiLinks
		if(el) {
			removeChildren(el);
		} else { //# fallback: use displayArea as parent
			var container = document.getElementById("displayArea");
			el = document.createElement("div");
			el.id = this.containerId;
			el = container.insertBefore(el, container.firstChild);
		}
		var msg = "!" + this.heading + "\n";
		if(matches.length &gt; 0) {
			msg += "''" + config.macros.search.successMsg.format([matches.length.toString(), query]) + ":''\n";
			this.results = [];
			for(var i = 0 ; i &lt; matches.length; i++) {
				this.results.push(matches[i].title);
				msg += "* [[" + matches[i].title + "]]\n";
			}
		} else {
			msg += "''" + config.macros.search.failureMsg.format([query]) + "''"; // XXX: do not use bold here!?
		}
		createTiddlyButton(el, this.btnCloseLabel, this.btnCloseTooltip, config.extensions.SimpleSearchPlugin.closeResults, "button", this.btnCloseId);
		wikify(msg, el);
		if(matches.length &gt; 0) { // XXX: redundant!?
			createTiddlyButton(el, this.btnOpenLabel, this.btnOpenTooltip, config.extensions.SimpleSearchPlugin.openAll, "button", this.btnOpenId);
		}
	},

	closeResults: function() {
		var el = document.getElementById(config.extensions.SimpleSearchPlugin.containerId);
		removeNode(el);
		config.extensions.SimpleSearchPlugin.results = null;
		highlightHack = null;
	},

	openAll: function(ev) {
		story.displayTiddlers(null, config.extensions.SimpleSearchPlugin.results);
		return false;
	}
};

config.shadowTiddlers.StyleSheetSimpleSearch = "/*{{{*/\n" +
	"#" + config.extensions.SimpleSearchPlugin.containerId + " {\n" +
	"\toverflow: auto;\n" +
	"\tpadding: 5px 1em 10px;\n" +
	"\tbackground-color: [[ColorPalette::TertiaryPale]];\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.containerId + " h1 {\n" +
	"\tmargin-top: 0;\n" +
	"\tborder: none;\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.containerId + " ul {\n" +
	"\tmargin: 0.5em;\n" +
	"\tpadding-left: 1.5em;\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.containerId + " .button {\n" +
	"\tdisplay: block;\n" +
	"\tborder-color: [[ColorPalette::TertiaryDark]];\n" +
	"\tpadding: 5px;\n" +
	"\tbackground-color: [[ColorPalette::TertiaryLight]];\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.containerId + " .button:hover {\n" +
	"\tborder-color: [[ColorPalette::SecondaryMid]];\n" +
	"\tbackground-color: [[ColorPalette::SecondaryLight]];\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.btnCloseId + " {\n" +
	"\tfloat: right;\n" +
	"\tmargin: -5px -1em 5px 5px;\n" +
	"}\n\n" +
	"#" + config.extensions.SimpleSearchPlugin.btnOpenId + " {\n" +
	"\tfloat: left;\n" +
	"\tmargin-top: 5px;\n" +
	"}\n" +
	"/*}}}*/";
store.addNotification("StyleSheetSimpleSearch", refreshStyles);

// override Story.search()
Story.prototype.search = function(text, useCaseSensitive, useRegExp) {
	highlightHack = new RegExp(useRegExp ? text : text.escapeRegExp(), useCaseSensitive ? "mg" : "img");
	var matches = store.search(highlightHack, null, "excludeSearch");
	var q = useRegExp ? "/" : "'";
	config.extensions.SimpleSearchPlugin.displayResults(matches, q + text + q);
};

// override TiddlyWiki.search() to sort by relevance
TiddlyWiki.prototype.search = function(searchRegExp, sortField, excludeTag, match) {
	var candidates = this.reverseLookup("tags", excludeTag, !!match);
	var primary = [];
	var secondary = [];
	var tertiary = [];
	for(var t = 0; t &lt; candidates.length; t++) {
		if(candidates[t].title.search(searchRegExp) != -1) {
			primary.push(candidates[t]);
		} else if(candidates[t].tags.join(" ").search(searchRegExp) != -1) {
			secondary.push(candidates[t]);
		} else if(candidates[t].text.search(searchRegExp) != -1) {
			tertiary.push(candidates[t]);
		}
	}
	var results = primary.concat(secondary).concat(tertiary);
	if(sortField) {
		results.sort(function(a, b) {
			return a[sortField] &lt; b[sortField] ? -1 : (a[sortField] == b[sortField] ? 0 : +1);
		});
	}
	return results;
};

} //# end of "install only once"
//}}}</pre>
</div>
<div title="twLink" server.title="twLink" server.page.revision="2029" server.etag="&quot;tpc/twLink/2029:634a0709547ced1dbfe2d27b010bbd727e8b5e65&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090407180320" created="20090407180320" tags="systemConfig" >
<pre>//{{{

config.commands.serverlink = {
        text: "serverlink",
        tooltip: "this tiddler on the server",

        handler: function(event, src, title) {
                var tiddler = store.getTiddler(title);
                var base = tiddler.fields['server.host'];
                var recipe = tiddler.fields['server.recipe'];
                var workspace = recipe ? 'recipes/' + recipe : tiddler.fields['server.workspace'];
                var uri = base + workspace + '/' + 'tiddlers/' + encodeURIComponent(title);
                window.open(uri);
		return false;
	}
};

//}}}</pre>
</div>
<div title="Retrieving Tiddlers from a Bag" server.title="Retrieving Tiddlers from a Bag" server.page.revision="811" server.etag="&quot;docs/Retrieving%20Tiddlers%20from%20a%20Bag/811:e545802b70f946978b7e67e7ccfcfee312191e81&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X GET -H 'Accept: application/json' \
	http://localhost:8080/bags/system/tiddlers
}}}</pre>
</div>
<div title="Navigation" server.title="Navigation" server.page.revision="732" server.etag="&quot;docs/Navigation/732:061181b9192de94f6631a8e815fdf34a6c93639c&quot;" modifier="fnd.lewcid.org" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100321165304" created="20090719151549" tags="meta" >
<pre>* [[Overview]]
* [[Getting Help]]
* [[Installing TiddlyWeb]]
* [[Using TiddlyWeb]]
* [[Customizing TiddlyWeb]]
* [[Developing With TiddlyWeb]]
* [[Theory of Operation]]
* [[Lego Pieces Model]]
* [[Features]]
* [[Futures]]
* [[Credits]]

!HTTP API
&lt;&lt;tagsplorer httpapi&gt;&gt;
!How To
&lt;&lt;tagsplorer howto&gt;&gt;</pre>
</div>
<div title="Chris Dent" server.title="Chris Dent" server.page.revision="296" server.etag="&quot;docs/Chris%20Dent/296:2d0e04b785e5b73d27080943f8cdf7ea6676e0df&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100313145324" created="20091018123012" tags="" >
<pre>See also [[ChrisDent]], [[cdent]], etc.
</pre>
</div>
<div title="method:put" server.title="method:put" server.page.revision="1264" server.etag="&quot;docs/method%3Aput/1264:20d94634302800426b7a2d7b54304fe2d7a25221&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090625205753" created="20090625205753" tags="" >
<pre>Methods in the [[HTTP API]] which respond to the request method {{{PUT}}}.</pre>
</div>
<div title="FancyMissingPlugin" server.title="FancyMissingPlugin" server.page.revision="2013" server.etag="&quot;tpc/FancyMissingPlugin/2013:8ebc9063acd640d4a925f7a433e12c05cde46113&quot;" modifier="fnd" creator="fnd" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090326143406" created="20090326143406" tags="systemConfig" >
<pre>//{{{
(function() {

// hijack getMissingLinks to sort by number of references
var getMissingLinks = TiddlyWiki.prototype.getMissingLinks;
TiddlyWiki.prototype.getMissingLinks = function(sortField) {
	var results = getMissingLinks.apply(this, arguments);
	var index = results.map(function(item, i) {
		return {
			title: results[i],
			count: store.getReferringTiddlers(results[i]).length
		};
	});
	return index.sort(function(a, b) {
		return b.count - a.count;
	}).map(function(item, i) {
		return item.title;
	});
};

})();
//}}}</pre>
</div>
<div title="/search" server.title="/search" server.page.revision="2187" server.etag="&quot;docs/%2Fsearch/2187:df4292e934a94c24faa4e314cbe68899d5afc0f6&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830222400" created="20090511123721" tags="rep:json rep:html method:get rep:text httpapi" >
<pre>!Resource
A list of [[tiddlers|tiddler]] that match the provided query string.  The results are only those tiddlers which are from bags on which the [[current user]] passes the read [[constraint]].

!Representations
; {{{text/plain}}}
: A linefeed separated list of tiddlers.
; {{{text/html}}}
: An HTML presentation of the description of the bag and a link to its list of tiddlers.
; {{{application/json}}}
: [[JSON]] representation of the tiddlers in the bag. See [[JSON tiddler]]. By default the included tiddlers are skinny. You [[can make them fat|How can I GET many tiddlers at once?]].

!Methods
!! {{{GET}}}
Get the tiddlers that match the query.

!Notes
The query is provide in a {{{q=&lt;query&gt;}}} parameter on the URL. How the query is used is entirely up to the [[store]] being used or any changes made by [[plugins|plugin]]. The default search does simple checks for the text in query anywhere in the tiddler.
These tiddlers may be [[filtered|filter]].

!Example
http://tiddlyweb.peermore.com/wiki/search?q=search
</pre>
</div>
<div title="StoreSet" server.title="StoreSet" server.page.revision="849" server.etag="&quot;docs/StoreSet/849:32096a8ea7afd5ef986d183b8fd59373769455c6&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409105153" created="20090409094931" tags="" >
<pre>StoreSet is a WSGI application in the [[server_request_filters]] stack that sets {{{tiddlyweb.store}}} in [[environ]] to an instantiated [[store]]. This is done so that any single request only needs to "open" the store once per request.

Some stores will choose to use persistent database handles, manage by the implementor of the [[StorageInterface]].

In code that is part of the web handlers the store kep in {{{tiddlyweb.store}}} should be used, as follow:

{{{
tiddler = Tiddler('foo', 'bar')
store = environ['tiddlyweb.store']
tiddler = store.get(tiddler)
}}}</pre>
</div>
<div title="TiddlyWeb and Apache" server.title="TiddlyWeb and Apache" server.page.revision="930" server.etag="&quot;docs/TiddlyWeb%20and%20Apache/930:4bdb3e23bed55c5addb7e767c3ab2ce42950e7c4&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100325112747" created="20090218170317" tags="" >
<pre>There are several ways to run TiddlyWeb under [[Apache|http://httpd.apache.org/]]:

* run it as a [[CGI|Using CGI]] (not recommended, unless you have no alternatives)
* run it under [[mod_python|Using Mod Python]] (not recommended)
* run it under [[mod_wsgi|Using Mod WSGI]] (recommended)
* run it under [[Fast CGI|Using Fast CGI]] (untested)
* use Apache as a [[proxy|Using Mod Proxy]] (experimental)

While TiddlyWeb should work with 1.3.x versions of Apache, it is probably best to use 2.x versions.
</pre>
</div>
<div title="RevisionsCommandPlugin" server.title="RevisionsCommandPlugin" server.page.revision="2167" server.etag="&quot;system/RevisionsCommandPlugin/2167:054b728783eedd58f51deb493bbdf6aafddf645b&quot;" modifier="FND" creator="FND" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="20100830213215" created="20090927211936" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|RevisionsCommandPlugin|
|''Description''|provides access to tiddler revisions|
|''Author''|FND|
|''Contributors''|Martin Budden|
|''Version''|0.3.1|
|''Status''|@@beta@@|
|''Source''|http://svn.tiddlywiki.org/Trunk/association/plugins/RevisionsCommandPlugin.js|
|''CodeRepository''|http://svn.tiddlywiki.org/Trunk/association/plugins/|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.6.0|
|''Keywords''|serverSide|
!Usage
Extend [[ToolbarCommands]] with {{{revisions}}}.
!Revision History
!!v0.1 (2009-07-23)
* initial release (renamed from experimental ServerCommandsPlugin)
!!v0.2 (2010-03-04)
* suppressed wikification in diff view
!!v0.3 (2010-04-07)
* restored wikification in diff view
* added link to side-by-side diff view
!To Do
* strip server.* fields from revision tiddlers
* resolve naming conflicts
* i18n, l10n
* code sanitizing
* documentation
!Code
***/
//{{{
(function($) {

jQuery.twStylesheet(".diff { white-space: pre, font-family: monospace }",
	{ id: "diff" });

var cmd = config.commands.revisions = {
	type: "popup",
	hideShadow: true,
	text: "revisions",
	tooltip: "display tiddler revisions",
	revTooltip: "", // TODO: populate dynamically?
	loadLabel: "loading...",
	loadTooltip: "loading revision list",
	selectLabel: "select",
	selectTooltip: "select revision for comparison",
	selectedLabel: "selected",
	compareLabel: "compare",
	linkLabel: "side-by-side view",
	revSuffix: " [rev. #%0]",
	diffSuffix: " [diff: #%0 #%1]",
	labelTemplate: "%0(%1)",
	dateFormat: "YYYY-0MM-0DD 0hh:0mm",
	listError: "revisions could not be retrieved",

	getText: function(tiddler) {
		var count = tiddler.fields["server.page.revision"] || 0;
		return this.labelTemplate.format([this.text, count]);
	},
	handlePopup: function(popup, title) {
		stripSuffix = function(type, title) {
			var str = cmd[type + "Suffix"];
			var i = str.indexOf("%0");
			i = title.indexOf(str.substr(0, i));
			if(i != -1) {
				title = title.substr(0, i);
			}
			return title;
		};
		title = stripSuffix("rev", title);
		title = stripSuffix("diff", title);
		var tiddler = store.getTiddler(title);
		var type = this._getField("server.type", tiddler);
		var adaptor = new config.adaptors[type]();
		var limit = null; // TODO: customizable
		var context = {
			host: this._getField("server.host", tiddler),
			workspace: this._getField("server.workspace", tiddler)
		};
		var loading = createTiddlyButton(popup, cmd.loadLabel, cmd.loadTooltip);
		var params = { popup: popup, loading: loading, origin: title };
		adaptor.getTiddlerRevisionList(title, limit, context, params, this.displayRevisions);
	},

	displayRevisions: function(context, userParams) {
		removeNode(userParams.loading);
		if(context.status) {
			var callback = function(ev) {
				var e = ev || window.event;
				var revision = resolveTarget(e).getAttribute("revision");
				context.adaptor.getTiddlerRevision(tiddler.title, revision, context,
					userParams, cmd.displayTiddlerRevision);
			};
			var table = createTiddlyElement(userParams.popup, "table");
			for(var i = 0; i &lt; context.revisions.length; i++) {
				var tiddler = context.revisions[i];
				var row = createTiddlyElement(table, "tr");
				var timestamp = tiddler.modified.formatString(cmd.dateFormat);
				var revision = tiddler.fields["server.page.revision"];
				var cell = createTiddlyElement(row, "td");
				createTiddlyButton(cell, timestamp, cmd.revTooltip, callback, null,
					null, null, { revision: revision });
				cell = createTiddlyElement(row, "td", null, null, tiddler.modifier);
				cell = createTiddlyElement(row, "td");
				createTiddlyButton(cell, cmd.selectLabel, cmd.selectTooltip,
					cmd.revisionSelected, null, null, null,
					{ index:i, revision: revision, col: 2 });
				cmd.context = context; // XXX: unsafe (singleton)!?
			}
		} else {
			$("&lt;li /&gt;").text(cmd.listError).appendTo(userParams.popup);
		}
	},

	revisionSelected: function(ev) {
		var e = ev || window.event;
		e.cancelBubble = true;
		if(e.stopPropagation) {
			e.stopPropagation();
		}
		var n = resolveTarget(e);
		var index = n.getAttribute("index");
		var col = n.getAttribute("col");
		while(!index || !col) {
			n = n.parentNode;
			index = n.getAttribute("index");
			col = n.getAttribute("col");
		}
		cmd.revision = n.getAttribute("revision");
		var table = n.parentNode.parentNode.parentNode;
		var rows = table.childNodes;
		for(var i = 0; i &lt; rows.length; i++) {
			var c = rows[i].childNodes[col].firstChild;
			if(i == index) {
				if(c.textContent) {
					c.textContent = cmd.selectedLabel;
				} else {
					c.text = cmd.selectedLabel;
				}
			} else {
				if(c.textContent) {
					c.textContent = cmd.compareLabel;
				} else {
					c.text = cmd.compareLabel;
				}
				c.onclick = cmd.compareSelected;
			}
		}
	},

	compareSelected: function(ev) {
		var e = ev || window.event;
		var n = resolveTarget(e);
		var context = cmd.context;
		context.rev1 = n.getAttribute("revision");
		context.rev2 = cmd.revision;
		context.tiddler = context.revisions[n.getAttribute("index")];
		context.format = "unified";
		context.adaptor.getTiddlerDiff(context.tiddler.title, context,
			context.userParams, cmd.displayTiddlerDiffs);
	},

	displayTiddlerDiffs: function(context, userParams) {
		var tiddler = context.tiddler;
		tiddler.title += cmd.diffSuffix.format([context.rev1, context.rev2]);
		tiddler.text = "{{diff{\n" + context.diff + "\n}}}";
		tiddler.tags = ["diff"];
		tiddler.fields.doNotSave = "true"; // XXX: correct?
		if(!store.getTiddler(tiddler.title)) {
			store.addTiddler(tiddler);
		}
		var src = story.getTiddler(userParams.origin);
		var tiddlerEl = story.displayTiddler(src, tiddler);
		var uri = context.uri.replace("format=unified", "format=horizontal");
		var link = $('&lt;a target="_blank" /&gt;').attr("href", uri).text(cmd.linkLabel);
		$(".viewer", tiddlerEl).prepend(link);
	},

	displayTiddlerRevision: function(context, userParams) {
		var tiddler = context.tiddler;
		tiddler.title += cmd.revSuffix.format([tiddler.fields["server.page.revision"]]);
		tiddler.fields.doNotSave = "true"; // XXX: correct?
		if(!store.getTiddler(tiddler.title)) {
			store.addTiddler(tiddler);
		}
		var src = story.getTiddler(userParams.origin);
		story.displayTiddler(src, tiddler);
	},

	_getField: function(name, tiddler) {
		return tiddler.fields[name] || config.defaultCustomFields[name];
	}
};

})(jQuery);
//}}}</pre>
</div>
<div title="Standard OperationsComment1283424504622" server.title="Standard OperationsComment1283424504622" server.page.revision="2205" server.etag="&quot;comments/Standard%20OperationsComment1283424504622/2205:22ee08cab2bca1fdb446aae5041c5531db1a6e27&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100902104825" created="20100902104825" tags="comment" daddy="Standard Operations" root="Standard Operations">
<pre>Not so much a request for operations, more a wish list...

Assuming that TiddlyWebWiki is being used to host multiple TiddlyWikis, and that the End User view will only be from within TiddlyWiki pages, the following is a list of things that would be useful from an End User perspective from within a Default Wiki:

1) A TiddlyWebLogon TiddlyWiki macro that provides User Logon (basic)

2) A TiddlyWebRecipeList TiddlyWiki macro that lists Recipe Names and Descriptions that are available to the current User - appended to each item should be a hyperlink to that view TiddlyWiki

3) A TiddlyWebUser macro that allows that User or Admin to change their Password

I would anticipate that these operations use AJAX techniques, so that the content of 2) is updated by the use of 1).  Just the provision of these will allow a consistent UI where Default can be used as a navigator to other Wikis without constant editing.


The provision of an Admin Wiki that can include the following functions from within the Admin Wiki:

4) A BagAdmin TiddlyWiki macro that lists Bag Names and Descriptions and allows for the creation, update and deletion of Bags

5) A RecipeAdmin TiddlyWiki macro that lists Recipe Name, Description, Contained Bags and Policy, and that allows for the creation, update and deletion of Recipes and the set of Roles that can access them

6) A UserAdmin TiddlyWiki macro that lists User Name, Note, Roles and Recipes that each User can access, and that allows for the creation, modification and deletion of Users

7) A BagImport macro that supports the import of Tiddlers from a local file TiddlyWiki into a Bag with the option of only importing changed Tiddlers.

Most of these are already possible, but are not automatically available from within a TiddlyWiki. I haven't thought too much about whether these should be included into BackStage functions or be embedded into Tiddlers, but my thought is that it should be possible to administrate a TiddlyWikiWeb site without having to open an SSH onto the server.

Number 7) would be useful as we autogenerate TiddlyWiki files only containing the Store Div, but don't have the ability to generate deltas, so an import into an existing bag using wimport creates new versions of tiddlers unchanged apart from the created date - if the body and tags of the tiddler are unchanged it would be useful to avoid creating new revisions.

Rather more of a nice to have, because I don't think that it is a such a generic requirement is the concept of a "Template" - this would be optionally used when a new Bag is created to set the Policy for the bag, and to automatically create a Recipe of the same name.  The new Recipe to include the new Bag somewhere in a predefined list of Bags and to use a predefined Policy.  This would allow for automatic publishing as a Recipe as a single step triggered by Bag creation.

Matt Flower</pre>
</div>
<div title="server_prefix" server.title="server_prefix" server.page.revision="1390" server.etag="&quot;docs/server_prefix/1390:392b4cc139f30ff3d62386b9de8a7abbd9b13474&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090315191001" created="20090218181406" tags="glossary config" >
<pre>A configuration item that can be in [[tiddlywebconfig.py]]. It describes a URL path portion which is a prefix to every URL the system uses and produces. Use this to [[mount]] TiddlyWeb in a subdirectory such as {{{/wiki}}}. Default is the empty string.</pre>
</div>
<div title="Installation Options" server.title="Installation Options" server.page.revision="2178" server.etag="&quot;docs/Installation%20Options/2178:6a9473066d87fd73b5bbeb47d51092b1347f328e&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830215859" created="20090218144106" tags="" creator="cdent.livejournal.com">
<pre>!! not using an installer

Many experienced Python developers prefer to handle installing packages on their own. If you don't like [[pip]] you can get the latest tarballs from http://pypi.python.org/pypi/tiddlyweb and http://pypi.python.org/pypi/tiddlywebwiki and process {{{setup.py}}} in whatever way you deem reasonable.

!! install or run from source
TiddlyWeb can be run directly from a checkout of its code from the [[source repository]]:

{{{
    git clone git://github.com/tiddlyweb/tiddlyweb.git
    cd tiddlyweb
}}}

(or a clone of your own fork, if you work that way)

Read the {{{README}}} file you will find there to see the other modules you need to install.

!! install on a shared server
[[Ben Gillies]] has written some information on [[installing and running TiddlyWeb on a shared server|http://bengillies.net/.a/#%5B%5BRunning%20on%20TiddlyWeb%2C%20Part%20One%5D%5D]].

Once you have TiddlyWeb installed you can carry on to [[Using TiddlyWeb]].
</pre>
</div>
<div title="comment_1243523761009" server.title="comment_1243523761009" server.page.revision="1568" server.etag="&quot;comments/comment_1243523761009/1568:5f0bbf40f5af633196529b0954913c439687838a&quot;" modifier="drleidig.myopenid.com" creator="drleidig.myopenid.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090528151601" created="20090528151601" tags="comment" >
<pre>The OpenID challenger does not work over a proxy no my server. Urlopen seems not to respect the environment setting of $http_proxy. It works if I set the proxies parameter in urlopen directly.

However, it seems that urllib is outdated anyway, since Python 3.0 will only support urllib2.</pre>
</div>
<div title="TagsplorerMacro" server.title="TagsplorerMacro" server.page.revision="859" server.etag="&quot;docs/TagsplorerMacro/859:b6cade48b3dce74ff6a41221ca1a5cbb956e662d&quot;" modifier="fnd" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100413200706" created="20100321165005" tags="systemConfig" >
<pre>/***
|''Name''|TagsplorerMacro|
|''Description''|tag-based faceted tiddler navigation|
|''Author''|FND|
|''Version''|1.3.3|
|''Status''|stable|
|''Source''|http://svn.tiddlywiki.org/Trunk/contributors/FND/plugins/TagsplorerMacro.js|
|''CodeRepository''|http://svn.tiddlywiki.org/Trunk/contributors/FND/|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.6.0|
|''Keywords''|navigation tagging|
!Usage
{{{
&lt;&lt;tagsplorer [exclude:&lt;tagName&gt;] [tag] [tag] ... &gt;&gt;
}}}
!!Examples
&lt;&lt;tagsplorer exclude:excludeLists systemConfig&gt;&gt;
!Revision History
!!v1.0 (2010-03-21)
* initial release
!!v1.1 (2010-03-26)
* added sorting for tag and tiddler collections
* added section headings
* adjusted styling
!!v1.2 (2010-03-27)
* added exclude parameter for excludeLists support
!!v1.3 (2010-03-29)
* added automatic scrolling after tag selection
!To Do
* refresh handling
* "open all" functionality
* animations for new/removed tags/tiddlers (requires array diff'ing)
!StyleSheet
.tagsplorer {
	border: 1px solid [[ColorPalette::TertiaryLight]];
	padding: 5px;
	background-color: [[ColorPalette::TertiaryPale]];
}

.tagsplorer h3,
.tagsplorer ul {
	margin: 0;
	padding: 0;
}

.tagsplorer h3 {
	margin: 0 -5px;
	padding: 0 5px;
	border: none;
}

.tagsplorer h3.tags {
	float: left;
	margin-right: 1em;
}

.tagsplorer h3.tiddlers {
	margin-top: 5px;
	border-top: 1px solid [[ColorPalette::TertiaryLight]];
	padding-top: 5px;
}

.tagsplorer .tagSelection {
	overflow: auto;
	list-style-type: none;
}

.tagsplorer .tagSelection li {
	float: left;
}

.tagsplorer .tagSelection li a.tag {
	border: 1px solid [[ColorPalette::TertiaryLight]];
	border-top-right-radius: 0.7em;
	-webkit-border-top-right-radius: 0.7em;
	-moz-border-radius-topright: 0.7em;
	border-bottom-right-radius: 0.7em;
	-webkit-border-bottom-right-radius: 0.7em;
	-moz-border-radius-bottomright: 0.7em;
	padding: 0 0.5em 0 0.3em;
}

.tagsplorer .tiddlerList {
	margin-left: 1.5em;
}
!Code
***/
//{{{
(function($) {

config.shadowTiddlers.StyleSheetTagsplorer = store.getTiddlerText(tiddler.title + "##StyleSheet");
store.addNotification("StyleSheetTagsplorer", refreshStyles);

var macro = config.macros.tagsplorer = {};

config.macros.tagsplorer = $.extend(macro, {
	locale: {
		tagsLabel: "Tags",
		tiddlersLabel: "Tiddlers",
		newTagLabel: "[+]",
		newTagTooltip: "add tag to filter",
		delTagTooltip: "remove tag from filter",
		noTagsLabel: "N/A",
		noTiddlersLabel: "N/A"
	},

	handler: function(place, macroName, params, wikifier, paramString, tiddler) {
		var prms = paramString.parseParams("anon", null, true);
		var excludeTag = getParam(prms, "exclude", null);
		var tags = prms[0].anon || [];
		var tiddlers = getTiddlers(tags, excludeTag);

		var container = $('&lt;div class="tagsplorer" /&gt;').
			append('&lt;h3 class="tags" /&gt;').children(":last").
				text(this.locale.tagsLabel).end().
			append('&lt;ul class="tagSelection" /&gt;').
			append('&lt;h3 class="tiddlers" /&gt;').children(":last").
				text(this.locale.tiddlersLabel).end().
			append('&lt;ul class="tiddlerList" /&gt;').
			data("excludeTag", excludeTag);

		macro.refreshTags(tags, container);
		macro.refreshTiddlers(tiddlers, container);

		container.appendTo(place);
	},
	newTagClick: function(ev) {
		var btn = $(this);
		var container = btn.closest(".tagsplorer");

		var tags = container.find(".tagSelection").data("tags");
		var tiddlers = container.find(".tiddlerList").data("tiddlers");
		var tagSelection = getTagSelection(tiddlers, tags);

		var popup = Popup.create(this, "ul");
		if(tagSelection.length) {
			$.each(tagSelection, function(i, tag) {
				createTagElement(popup, tag, macro.locale.newTagTooltip, macro.onTagClick);
			});
		} else {
			createTagElement(popup, macro.locale.noTagsLabel);
		}
		$(popup).data({
			container: container,
			tags: tags,
			tiddlers: tiddlers
		});
		Popup.show();
		ev.stopPropagation();
		return false;
	},
	onTagClick: function(ev) {
		var btn = $(this);
		var popup = btn.closest(".popup");
		var data = popup.data();
		var tag = btn.text();
		data.tags.pushUnique(tag);
		data.tiddlers = filterTiddlers(data.tiddlers, tag);
		if(config.options.chkAnimate &amp;&amp; anim &amp;&amp; typeof Scroller == "function") {
			anim.startAnimating(new Scroller(data.container[0]));
		} else {
			window.scrollTo(0, ensureVisible(data.container[0]));
		}
		macro.refreshTags(data.tags, data.container);
		macro.refreshTiddlers(data.tiddlers, data.container);
		return !ev.ctrlKey;
	},
	delTag: function(ev) {
		var btn = $(this);
		var container = btn.closest(".tagsplorer");
		var tags = container.find(".tagSelection").data("tags");
		tags.remove(btn.text());
		var tiddlers = getTiddlers(tags, container.data("excludeTag"));
		btn.parent().remove();
		macro.refreshTags(tags, container);
		macro.refreshTiddlers(tiddlers, container);
		return false;
	},
	refreshTags: function(tags, container) {
		var orig = container.find(".tagSelection");
		var clone = orig.clone().empty();
		clone.data("tags", tags);

		var self = this;
		$.each(tags, function(i, tag) {
			createTagElement(clone, tag, self.locale.delTagTooltip, self.delTag, "tag");
		});
		createTagElement(clone, this.locale.newTagLabel, this.locale.newTagTooltip, this.newTagClick).
			addClass("button");

		orig.replaceWith(clone);
	},
	refreshTiddlers: function(tiddlers, container) {
		var orig = container.find(".tiddlerList");
		var clone = orig.clone().empty();
		clone.data("tiddlers", tiddlers);

		if(tiddlers.length) {
			$.each(tiddlers, function(i, tiddler) {
				var el = $("&lt;li /&gt;").appendTo(clone)[0];
				createTiddlyLink(el, tiddler.title, true);
			});
		} else {
			$("&lt;li /&gt;").text(macro.locale.noTiddlersLabel).appendTo(clone);
		}

		orig.replaceWith(clone);
	}
});

var getTiddlers = function(tags, excludeTag) {
	var tiddlers = store.getTiddlers("title", excludeTag);
	for(var i = 0; i &lt; tags.length; i++) {
		tiddlers = filterTiddlers(tiddlers, tags[i]);
	}
	return tiddlers;
};

var filterTiddlers = function(tiddlers, tag) {
	return $.map(tiddlers, function(item, i) {
		if(item.tags.contains(tag)) {
			return item;
		}
	});
};

var getTagSelection = function(tiddlers, exclude) {
	var tags = [];
	for(var i = 0; i &lt; tiddlers.length; i++) {
		var _tags = tiddlers[i].tags;
		for(var j = 0; j &lt; _tags.length; j++) {
			var tag = _tags[j];
			if(!exclude.contains(tag)) {
				tags.pushUnique(tag);
			}
		}
	}
	return tags.sort();
};

var createTagElement = function(container, label, tooltip, action, className) {
	var el = $("&lt;li /&gt;").appendTo(container);
	return $('&lt;a href="javascript:;" /&gt;').
		addClass(className || "").
		attr("title", tooltip || "").
		text(label).
		click(action || null).
		appendTo(el);
};

})(jQuery);
//}}}
</pre>
</div>
<div title="BinaryTiddlersPlugin" server.title="BinaryTiddlersPlugin" server.page.revision="2165" server.etag="&quot;system/BinaryTiddlersPlugin/2165:b93544526ddf8a48d1004e91a028b3954d6ea872&quot;" modifier="FND" creator="FND" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="20100830213215" created="20100721105237" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|BinaryTiddlersPlugin|
|''Description''|renders base64-encoded binary tiddlers as images or links|
|''Author''|FND|
|''Version''|0.2.0|
|''Status''|@@beta@@|
|''Source''|http://svn.tiddlywiki.org/Trunk/association/plugins/BinaryTiddlersPlugin.js|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.5|
|''Requires''|TiddlyWebConfig|
|''Keywords''|files binary|
!Revision History
!!v0.1 (2010-07-20)
* initial release
!Code
***/
//{{{
(function($) {

var ns = config.extensions.tiddlyweb;

if(!ns) { // XXX: not generic
	throw "Missing dependency: TiddlyWebConfig";
}

// hijack text viewer to add special handling for binary tiddlers
var _view = config.macros.view.views.wikified;
config.macros.view.views.wikified = function(value, place, params, wikifier,
		paramString, tiddler) {
	var ctype = tiddler.fields["server.content-type"];
	if(params[0] == "text" &amp;&amp; ctype &amp;&amp; !tiddler.tags.contains("systemConfig")) {
		var el;
		if(ns.isBinary(tiddler)) {
			var uri = "data:%0;base64,%1".format([ctype, tiddler.text]); // TODO: fallback for legacy browsers
			if(ctype.indexOf("image/") == 0) {
				el = $("&lt;img /&gt;").attr("alt", tiddler.title).attr("src", uri);
			} else {
				el = $("&lt;a /&gt;").attr("href", uri).text(tiddler.title);
			}
		} else {
			el = $("&lt;pre /&gt;").text(tiddler.text);
		}
		el.appendTo(place);
	} else {
		_view.apply(this, arguments);
	}
};

})(jQuery);
//}}}</pre>
</div>
<div title="comment_1242729691790" server.title="comment_1242729691790" server.page.revision="1562" server.etag="&quot;comments/comment_1242729691790/1562:306e6dca0824bd65edf69bfb57fe55aebadeb8d1&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090519104136" created="20090519104136" tags="comment" >
<pre>Sorry, I gave somewhat misleading information. The WorkspaceConfig in bagXedit should not "undo" the one in bagX, but instead should just set:
{{{
config.defaultCustomFields["server.workspace"] = "bags/bagX";
}}}
This will have the effect of accepting the default settings for edit controls display, and make sure that new content is saved back to bagX.</pre>
</div>
<div title="server_response_filters" server.title="server_response_filters" server.page.revision="1395" server.etag="&quot;docs/server_response_filters/1395:fcaf0cc2e022d9f52f500a132eff3ae43ff7b5e9&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323174455" created="20090323174455" tags="config" >
<pre>{{{server_response_filters}}} is a configuration item that controls which [[WSGI]] applications a response is processed //through// after being handled by the core of the TiddlyWeb code. The {{{server_response_filters}}} are used to modify the headers or content of the response, log some information, or handle unusual situations appropriately.

Any [[instance]] may add or remove filters, but in practice this has proven rare.

The default response filters, in chronological order of use, are:
# [[HTMLPresenter]]
# [[PermissionsExceptor]]
# [[HTTPExceptor]]
# [[EncodeUTF8]]
# [[SimpleLog]]</pre>
</div>
<div title="TiddlyHoster" server.title="TiddlyHoster" server.page.revision="2171" server.etag="&quot;docs/TiddlyHoster/2171:dd6e87a143a1853834a43813ed04cbcd522d7282&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830213812" created="20100830213812" tags="" >
<pre>TiddlyHoster is shared hosting service for TiddlyWeb entities (bags, recipes and tiddlers) built on TiddlyWeb. Like TiddlySpace it can provide hosting for TiddlyWiki documents, but it provides a more bare metal and hackable environment for dealing with bags and recipes, especially the [[authorization]] [[policies|policy]].

There is a public service at http://hoster.peermore.com/
The code is at http://github.com/cdent/tiddlyhoster</pre>
</div>
<div title="plugins" server.title="plugins" server.page.revision="1287" server.etag="&quot;docs/plugins/1287:eb5c586529b73211308828aef7b39828b3b495ee&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091018122826" created="20090316152310" tags="" >
<pre>Much like in TiddlyWiki, TiddlyWeb can use plugins to extend the functionality of the system. Plugins can add functionality to the web server, to [[twanager]] or both.

A plugin can be distributed for use with other TiddlyWeb installations. For a list of of plugins, see [[Plugin List]].

Plugins are included in a TiddlyWeb [[instance]] by editing [[tiddlywebconfig.py]] to add [[system_plugins]] and/or [[twanager_plugins]] information.

There is Python package called [[tiddlywebplugins.utils]] that includes useful functions for creating plugins.

A [[tiddlywebplugins]] namespace has been reserved for those plugins which have reached a level of stability where it makes sense for them to be distributed from [[PyPI]].

The best way to learn how to create plugins is to look at [[existing examples|Plugin List]].</pre>
</div>
<div title="config.merge_config" server.title="config.merge_config" server.page.revision="1130" server.etag="&quot;docs/config.merge_config/1130:c9239a960c2c0a120052c0b78e40f2279c4d9cb4&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001121708" created="20091001121708" tags="pyapi" >
<pre>!!Description
Update [[config]] settings, usually [[tiddlyweb.config]], with additional date in the form of a dict.

!!Parameters
* global_config
* additional_config
* //reconfig=True//

!!Returns
* None (global config is updated in place)

!!Example
{{{
    merge_config(config, {'css_uri': 'http://example.com'})
}}}

!!Notes
{{{reconfig}}}, when True (the default), will cause [[tiddlywebconfig.py]] to be reread and reprocessed after additional_config has been merged in. This is done to ensure that overrides in tiddlywebconfig.py take precedence.</pre>
</div>
<div title="/bags" server.title="/bags" server.page.revision="156" server.etag="&quot;docs/%2Fbags/156:32e1565ee104ba60a512e4821a8d3086460191ce&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314161305" created="20090315211455" tags="rep:json rep:html method:get rep:text httpapi" >
<pre>
!Resource
A list of [[bags|bag]] on the system for which the [[current user]] passes the read [[constraint]].

!Representations
; {{{text/plain}}}
: A linefeed separated list of bag names.
; {{{text/html}}}
: An unordered list of bag names, linking to the [[/bags/{bag_name}/tiddlers]] resource for each bag. //N.B: The link is to tiddlers not the bag as accessing the bag requires elevated [[authorization]].//
; {{{application/json}}}
: A [[JSON]] list of bag names.

!Methods
!! {{{GET}}}
Get the list of bags.

!Notes
If the [[current user]] can read no bags, this may be an empty list.

!Example
http://tiddlyweb.peermore.com/wiki/bags
</pre>
</div>
<div title="Osmosoft" server.title="Osmosoft" server.page.revision="738" server.etag="&quot;docs/Osmosoft/738:606ada14f9b6fd0a38e41650de156715e9e9dd89&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409091311" created="20090409091311" tags="" >
<pre>[[Osmosoft|http://www.osmosoft.com/]]</pre>
</div>
<div title="pipComment1279445395358" server.title="pipComment1279445395358" server.page.revision="1598" server.etag="&quot;comments/pipComment1279445395358/1598:6286a8d848a4268441b634d1d1cd3ef8054c73a0&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100718092956" created="20100718092956" tags="comment" daddy="pip" root="pip">
<pre>virtualenv is a tool to create isolated Python environments. Learn more at: http://pypi.python.org/pypi/virtualenv</pre>
</div>
<div title="TWW task dredge" server.title="TWW task dredge" server.page.revision="854" server.etag="&quot;docs/TWW%20task%20dredge/854:53f6f32a56f5c770e7451861681f832c1e31147c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100406110534" created="20100406110534" tags="" >
<pre>This is a temporary note taking tiddler related to possible tasks to improve TiddlyWebWiki. See also [[Futures]] where there are additional ideas.

* in wiki login?
* more effective handling of 412
* fixing (for real) the Error "OK" thing
* add plugin based handling of the new server.content-type field
** (such that you can't edit a binary?
* confirm/make real etc visibility of different permissions on different tiddlers
* catologue the ways in which on demand loading fails to be complete
* if its not already been fixed, deal with those weirdnesses in sync that I pointed out a while back but can't really remember now
* forget about Martin and fix the diff thing yourself
* spend some time linting and pep8ing tww code, just for sake of review and refresh
* continue work on a tww+recipes+bags expose
** i.e. some docs
* consider adding a help/about (bag and recipe) or (tiddler) to tww distribution
* decide when/where/how a proxy is going to fit in
* figure out where the sync UI breaks when there are too many tiddlers (this is something discussed with JR early on)
* detune server.workspace back into _just_ the sync machine, and not the twww.serialization
* add a plugin which strings a callback on the back of any request to server.host which does a GET of recent tiddlers on the workspace/recipe/bag modified since the last time we checked (based on locally stored javascript variable, instantiated at load time). if there are changes, notify somehow
** (that's another thing that was discussed in various forms in the past
</pre>
</div>
<div title="How do I change which challengers are used?Comment1257859938051" server.title="How do I change which challengers are used?Comment1257859938051" server.page.revision="1518" server.etag="&quot;comments/How%20do%20I%20change%20which%20challengers%20are%20used%3FComment1257859938051/1518:73903735c47699b48b87c94d632517fe5766a1d1&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091110133708" created="20091110133708" tags="comment" >
<pre>'auth_systems': ['cookie_form'] would give you a cookie based challenger
The [[env]] plugin is quite useful for seeing the default ones.</pre>
</div>
<div title="source repository" server.title="source repository" server.page.revision="1401" server.etag="&quot;docs/source%20repository/1401:1a7853cab61a7140b8495d47072913129c914389&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314184327" created="20090223133715" tags="" >
<pre>Development of TiddlyWeb is kept in the TiddlyWeb [[git]] repository, the core code can be found at:

&gt; http://github.com/tiddlyweb/tiddlyweb
</pre>
</div>
<div title="twikradComment1278887900800" server.title="twikradComment1278887900800" server.page.revision="1610" server.etag="&quot;comments/twikradComment1278887900800/1610:615d376cef4698065321496bdef4618a5a12095b&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100711223823" created="20100711223823" tags="comment" daddy="twikrad" root="twikrad">
<pre>what a great tool!!! it needs more features, like an inline-editor, and maybe some addjournal script ...</pre>
</div>
<div title="apache.pyComment1279288547118" server.title="apache.pyComment1279288547118" server.page.revision="1529" server.etag="&quot;comments/apache.pyComment1279288547118/1529:c4f31d3a8269b67b10913333dd1e9d886e143eb1&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100716135547" created="20100716135547" tags="comment" daddy="apache.py" root="apache.py">
<pre>!!!wget apache.py
{{{
wget http://github.com/tiddlyweb/tiddlyweb/raw/master/apache.py
}}}</pre>
</div>
<div title="wikklytextrender" server.title="wikklytextrender" server.page.revision="1508" server.etag="&quot;docs/wikklytextrender/1508:8233eb56aa1ee657ccee95b3af18607f973a31d4&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710155757" created="20090710155757" tags="" >
<pre>A plugin used to [[render|renderer]] TiddlyWiki syntax text to HTML, using the [[wikklytext]] Python module.

Find it on [[github|http://github.com/tiddlyweb/tiddlyweb-plugins/blob/master/wikklytextrender]]</pre>
</div>
<div title="Installing on Ubuntu" server.title="Installing on Ubuntu" server.page.revision="628" server.etag="&quot;docs/Installing%20on%20Ubuntu/628:4690b98696c7c2eaca1ea7c4010af83fe7c621d1&quot;" modifier="fnd.lewcid.org" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100610103820" created="20090218140554" tags="" >
<pre>On modern Ubuntu (or, generally, Debian-based) systems the installation process is cleanly straightforward:
{{{
sudo apt-get install python-pip python-dev
sudo pip install -U pip
sudo pip install -U tiddlywebwiki
}}}

On less recent Ubuntu systems, [[pip]] will not be available as a package. In that situation, setuptools will first need to be installed:
{{{
sudo apt-get install python-setuptools
sudo easy_install -U pip
sudo pip install -U setuptools
sudo pip install -U tiddlywebwiki
}}}
(it might be necessary to remove {{{setuptools.egg-info}}} and {{{setuptools.pth}}} in {{{/usr/lib/python2.5/site-packages}}} or the equivalent directory)

If Apache and [[mod_wsgi|Using Mod WSGI]] are to be used, {{{libapache2-mod-wsgi}}} should be installed as well.</pre>
</div>
<div title="How do I get more verbose logging?" server.title="How do I get more verbose logging?" server.page.revision="503" server.etag="&quot;docs/How%20do%20I%20get%20more%20verbose%20logging%3F/503:99f53f5d0e047a0ff658c52407f5d1fc28924672&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511134900" created="20090511134900" tags="faq" >
<pre>TiddlyWeb will produce more information in [[tiddlyweb.log]] if you change or set the [[log_level]] config setting in [[tiddlywebconfig.py]]. 'DEBUG' is a common setting:
{{{
config = {
    'log_level': 'DEBUG',
}
}}}</pre>
</div>
<div title="Authenticating with curl" server.title="Authenticating with curl" server.page.revision="2251" server.etag="&quot;docs/Authenticating%20with%20curl/2251:41113b49b8f5b68c609b0bf53a1b9d3f4ceb0bcc&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110121124449" created="20100301091239" tags="curl howto" >
<pre>!Using HTTP Basic Authentication
{{{
curl -X GET -H 'Content-Type: application/json' \
    -u &lt;username&gt;:&lt;password&gt; \
    http://localhost:8080/recipes/confidential
}}}
!Using Cookies

If you log in with a username and password and then want to use a cookie as the auth token, you can do the following:
&lt;&lt;&lt;
1) First use curl to post username and password to the cookie_form and store a cookie for it locally:
{{{
curl --cookie-jar cookies.txt -d "user=&lt;username&gt;&amp;password=&lt;password&gt;&amp;submit=submit" &lt;yourwebsite.com&gt;/challenge/cookie_form
}}}
2) Pass the created cookie to subsequent post to upload tiddlers
{{{
curl --cookie cookies.txt -X PUT -H 'Content-Type: text/plain' --data-binary @&lt;filename&gt; &lt;yourwebsite.com&gt;/bags/default/tiddlers/monkey
}}}
&lt;&lt;&lt;
[[source|http://groups.google.com/group/tiddlyweb/browse_thread/thread/f756973de4146676/97828872a7eda93c?#97828872a7eda93c]]

If you log in with OpenID and can't do the above because of the multiple steps involved to validate the OpenID you can instead do the following:
* Log in with OpenID in a browser.
* Visit the cookies for the current domain and get the value of the tiddlyweb_user cookie.
* Make your curl request, but add a Cookie header containing that value as a tiddlyweb_user cookie:
{{{
    curl -H 'Cookie: tiddlyweb_user=username.openid.com:xxxxxxxxxxxxxxxxxxx' -X PUT -H 'Contenet-Type: text/plain'  \
        --data-binary@&lt;filename&gt; &lt;yourwebsite.com/bags/default/tiddlers/monkey
}}}</pre>
</div>
<div title="/recipes/{recipe_name}/tiddlers/{tiddler_title}/revisions" server.title="/recipes/{recipe_name}/tiddlers/{tiddler_title}/revisions" server.page.revision="239" server.etag="&quot;docs/%2Frecipes%2F%7Brecipe_name%7D%2Ftiddlers%2F%7Btiddler_title%7D%2Frevisions/239:8804e7063e1bd8015c3a5bfe10d33e394cff0299&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001124418" created="20090511122348" tags="rep:json rep:html rep:text httpapi method:get rep:wiki" >
<pre>!Resource
A list of revisions associated with the named  [[tiddler]] produced by the named [[recipe]].  The [[current user]] must pass the read [[constraint]] in all the bags in the recipe to see the revisions.

!Representations
; {{{text/plain}}}
: A linefeed separated list of tiddlers.
; {{{text/html}}}
: An HTML list of the revisions.
; {{{application/json}}}
: [[JSON]] representation of the tiddler revisions. See [[JSON tiddler]]. By default the included tiddlers are skinny, with a {{{revision}}} field. You [[can make them fat|How can I GET many tiddlers at once?]].
; {{{text/x-tiddlywiki}}}
: A [[TiddlyWiki]] representation of the revisions of this tiddler. At the moment this is not very useful because TiddlyWiki can only display one tiddler with the same title, and at the moment the tiddler it chooses to display is the one that is oldest. This will eventually be fixed.

!Methods
!! {{{GET}}}
Get the list of tiddler revisions.

!Notes
Making regular use of this URL is not recommended as it can be a bit unpredictable if the [[recipe]] changes. A more predictable URL is [[/bags/{bag_name}/tiddlers/{tiddler_title}/revisions]].

!Example
http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers/HTTP%20API/revisions</pre>
</div>
<div title="comment_1247763645871" server.title="comment_1247763645871" server.page.revision="1590" server.etag="&quot;comments/comment_1247763645871/1590:ef2329a6f9543293914986e05c4ea064877ece81&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090716170048" created="20090716170048" tags="comment" >
<pre>Couple of issues with the instructions:

1) The installation directory for Portable Python was "C:\PortablePython_1.1_py2.5.4" rather than "C:\Portable\Python". Copying the files to the new location enabled the setup scripts to be run.

2) The selector python dependency wasn't available as the server wasn't responding and it had to be installed manually from a different server.
</pre>
</div>
<div title="tiddlywebplugins.wimporter" server.title="tiddlywebplugins.wimporter" server.page.revision="1441" server.etag="&quot;docs/tiddlywebplugins.wimporter/1441:3889817c217ddcebd6d83a6c10153ef4a964a6fc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123122247" created="20091123122247" tags="plugin" >
<pre>wimporter is a plugin that provides a web-based, server-side interface for importing some tiddlers from a remote TiddlyWiki into a selected bag hosted by the TiddlyWeb hosting the wimporter interface. The remote TiddlyWiki can be identified by an http URL, or provided as an uploaded file.

The plugin is available from PyPI as [[tiddlywebplugins.wimporter|http://pypi.python.org/pypi/tiddlywebplugins.wimporter]].</pre>
</div>
<div title="How do I request only some tiddlers from a URL?" server.title="How do I request only some tiddlers from a URL?" server.page.revision="514" server.etag="&quot;docs/How%20do%20I%20request%20only%20some%20tiddlers%20from%20a%20URL%3F/514:c4dce34676e19efb02677448a05592c609decf11&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206120313" created="20090508201019" tags="v0.9.31 faq" >
<pre>Several ~URLs in the TiddlyWeb [[HTTP API]] produce a result set which is a list or collection of tiddlers. Any of these may be [[filtered|filter]] to return a subset of that collection. To filter a tiddler collection URL a filter string is appended to the url as a query string.

The default collection ~URLs include:
* [[/recipes/{recipe_name}/tiddlers]]
* [[/bags/{bag_name}/tiddlers]]
* [[/search]]

!Examples

''20 most recently modified blog postings from recipe blogs:''
{{{
    /recipes/blogs/tiddlers?select=tag:blog;select=tag:published;sort=-modified;limit=20
}}}</pre>
</div>
<div title="userpass" server.title="userpass" server.page.revision="1487" server.etag="&quot;docs/userpass/1487:4d2589327b20ccf146ff51c53a66e9360e4e9f8b&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710152139" created="20090710152139" tags="" >
<pre>A [[twanager]] command that resets the password for an existing [[user]] in the [[store]]. If the user does not exist an exception is raised. To create a user use [[adduser]]. There are no restrictions (from the admin) level on what a password may contain. Any particular [[instance]] may wish to set their only policies on such things.

!Syntax
{{{
    twanager userpass &lt;username&gt; &lt;password&gt;
}}}

!Example
Set the user monkey's password to sw!ng3r
{{{
    twanager userpass monkey 'sw!ng3r'
}}}</pre>
</div>
<div title="Getting HelpComment1261513265952" server.title="Getting HelpComment1261513265952" server.page.revision="1516" server.etag="&quot;comments/Getting%20HelpComment1261513265952/1516:db4a81bc2b6df856ddcfbb4ec0437be1dad1588b&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091222202105" created="20091222202105" tags="comment" >
<pre>trying out comments</pre>
</div>
<div title="comment_1241862191009" server.title="comment_1241862191009" server.page.revision="1552" server.etag="&quot;comments/comment_1241862191009/1552:7ce5b3515d9c91dfe5f454751a3c1ed62aeb9217&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090509074312" created="20090509074312" tags="comment" >
<pre>Again an empty comment. who? why?</pre>
</div>
<div title="addrole" server.title="addrole" server.page.revision="1064" server.etag="&quot;docs/addrole/1064:412a6fca1de47020c47a1f76f38d76f71fb79edb&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710151909" created="20090710151909" tags="twanager" >
<pre>A [[twanager]] command the adds one or more [[roles|role]] to an existing [[user]]. If the user does not exist an exception is raised. To create a user use [[adduser]].

!Syntax
{{{
    twanager addrole &lt;username&gt; [role] [[role] [role] ...]
}}}

!Example
Add the role mammal to the user monkey.
{{{
    twanager addrole monkey mammal
}}}</pre>
</div>
<div title="ViewTemplate" server.title="ViewTemplate" server.page.revision="2027" server.etag="&quot;tpc/ViewTemplate/2027:2999eaaf1768e7e85315c703a287828b2e035463&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090612152052" created="20090612152052" tags="" >
<pre>&lt;!--{{{--&gt;
&lt;div class='toolbar' macro='toolbar [[ToolbarCommands::ViewToolbar]]'&gt;&lt;/div&gt;
&lt;div class='commentBreadcrumb' macro='commentBreadcrumb'&gt;&lt;/div&gt;
&lt;div class='title' macro='view title'&gt;&lt;/div&gt;
&lt;div class='subtitle'&gt;&lt;span macro='view modifier link'&gt;&lt;/span&gt;, &lt;span macro='view modified date'&gt;&lt;/span&gt; (&lt;span macro='message views.wikified.createdPrompt'&gt;&lt;/span&gt; &lt;span macro='view created date'&gt;&lt;/span&gt;)&lt;/div&gt;
&lt;div class='tagging' macro='tagging'&gt;&lt;/div&gt;
&lt;div class='tagged' macro='tags'&gt;&lt;/div&gt;
&lt;div class='viewer' macro='view text wikified'&gt;&lt;/div&gt;
&lt;div class='tagClear'&gt;&lt;/div&gt;
&lt;div class='comments' macro='tiddlyWebComments'&gt;&lt;/div&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="comment_1244755011243" server.title="comment_1244755011243" server.page.revision="1574" server.etag="&quot;comments/comment_1244755011243/1574:d260e2dfe797373491562f6b0b101b83488277d2&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090611211651" created="20090611211651" tags="comment" >
<pre>Ah good catch. Good diagnosis. Should have a fix out tomorrow. Thanks.

Something like this where you've got a clear test case, it might make sense to create a ticket on http://trac.tiddlywiki.org/</pre>
</div>
<div title="MainMenu" server.title="MainMenu" server.page.revision="2280" server.etag="&quot;tpc/MainMenu/2280:014dfaec9011b2aa8764cd05ee47fa17f7877106&quot;" modifier="fnd" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20111026140222" created="20090811094510" tags="excludeLists" >
<pre>[[Documentation|TiddlyWeb Documentation]]
[[Downloads]]
[[Glossary]]
[[Howtos]]
[[Plugins|Plugin List]]
[[FAQ]]
[[API]]
[[Login]]
[[Colophon]]
[[Known Issues]]
{{logos{
[img[peermore|http://peermore.com/images/peermore100.png][http://peermore.com]]
{{osmologo{[img[osmosoft|http://www.osmosoft.com/logo.png][http://www.osmosoft.com]]}}}
[img[unamesa|http://www.projects.unamesa.org/space/showlogo/1234912128/logo.gif][http://www.unamesa.org]]
}}}</pre>
</div>
<div title="twanager" server.title="twanager" server.page.revision="1454" server.etag="&quot;docs/twanager/1454:d269f5aca5e84d7fff954de019c69e5f61a49e9d&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831155819" created="20090218164327" tags="" >
<pre>//twanager// is the command-line tool included with [[TiddlyWeb]].
With it you can manipulate the [[store]], adding content and users. Some of the powers of twanager are also available via the [[HTTP API]] and vice versa. Which you choose depends on your environment.

//twanager// is [[extensible|Customizing TiddlyWeb]].

When run without any arguments, it will default to {{{usage}}}, listing the available commands along with a brief description. What commands are listed depends on the [[twanager_plugins]] in use.

See also:
&lt;&lt;list filter [tag[twanager]]&gt;&gt;
</pre>
</div>
<div title="How do I set or edit a bag policy?" server.title="How do I set or edit a bag policy?" server.page.revision="518" server.etag="&quot;docs/How%20do%20I%20set%20or%20edit%20a%20bag%20policy%3F/518:5aab2361a1dedf04aa8413bd35f7079298167e61&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100124170630" created="20090520152658" tags="faq" creator="cdent.tumblr.com">
<pre>The [[policy]] of a [[bag]] is set or edited when editing a bag either via [[twanager]] or using the [[HTTP API]].

The {{{bag}}} command of twanager takes a bag name as an argument and an optional JSON string representing a [[policy]]:
{{{
twanager bag foobar
{"policy": {"read":["someusername"]}}
^D
}}}

PUT to [[/bags/{bag_name}]] is much the same: the JSON representation must include a policy element.

In either case, if the bag already exists, the bag's current policy is clobbered by the new one provided.</pre>
</div>
<div title="formeditor" server.title="formeditor" server.page.revision="1225" server.etag="&quot;docs/formeditor/1225:8441b1ed765fb4375ce4fdd840947f76215615ea&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090623100940" created="20090623100932" tags="plugin" >
<pre>The formeditor [[plugin]] provides a quick solution for editing a single [[tiddler]] when you visit the HTML representation of that tiddler. It adds an {{{FormEdit}}} link to the page, which points to a page that present a simple textarea in which you can edit the text (but not yet tags) for the tiddler.

The code can be found at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins]].</pre>
</div>
<div title="Ben Gillies" server.title="Ben Gillies" server.page.revision="281" server.etag="&quot;docs/Ben%20Gillies/281:aa4be6412c77c71e1dee0a57850796278a887963&quot;" modifier="fnd" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090722122720" created="20090409090939" tags="people" >
<pre>An [[osmonaut|Osmosoft]] who got TiddlyWeb running [[Using CGI]].
He has also written some [[validators|validator]].

* [[blog|http://bengillies.net]]</pre>
</div>
<div title="recipe_create_policy" server.title="recipe_create_policy" server.page.revision="1333" server.etag="&quot;docs/recipe_create_policy/1333:420fb10054a2517f7bf6460fb14c30ec2812d663&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090515133535" created="20090515133403" tags="config" >
<pre>A [[config]] setting which declares who or what is able to create a [[recipe]] on the system. Since [[policies|policy]] are associated with existing recipes, we need a separate mechanism for controlling creation. The {{{recipe_create_policy}}} does this. It's default value is an empty string, which means anyone can create a new recipe via a {{{PUT}}} to [[/recipes/{recipe_name}]]. Other options are:
;{{{ANY}}}
:Any [[authenticated|authentication]] user may create a recipe.
;{{{ADMIN}}}
:Any user with the {{{ADMIN}}} [[role]] may create a recipe.

Other options are possible by overriding existing code.</pre>
</div>
<div title="Serializing and Deserializing" server.title="Serializing and Deserializing" server.page.revision="829" server.etag="&quot;docs/Serializing%20and%20Deserializing/829:02661a8f43b1ff991e8cb81c555ecdd684024f2c&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090422153735" created="20090422152656" tags="codeSnippets howto dev" >
<pre>{{{
from tiddlyweb.model.tiddler import Tiddler
from tiddlyweb.serializer import Serializer

tiddler = Tiddler(title)

serializer = Serializer("json")
serializer.object = tiddler
serializer.from_string(json_string)

serializer = Serializer("text")
serializer.object = tiddler
text_string = serializer.to_string()
}}}
''N.B.:'' Here {{{json_string}}} is expected to be a Unicode string (cf. [[Unicode Handling]]).</pre>
</div>
<div title="I have a TiddlyWeb vertical. What are best practices for development and deployment?" server.title="I have a TiddlyWeb vertical. What are best practices for development and deployment?" server.page.revision="554" server.etag="&quot;docs/I%20have%20a%20TiddlyWeb%20vertical.%20What%20are%20best%20practices%20for%20development%20and%20deployment%3F/554:0bdfa47272d6b08f8087b4f76c12f802e3905dde&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091029160534" created="20090409094129" tags="faq" >
<pre>If you have created a TiddlyWeb [[vertical]] there's a high chance you would like to be able to work on its development, deploy it to installations and allow others to install it themselves in as effective way as possible.

This tiddler explores the options available.

The most direct answer is that we don't yet know what the best practices are because:
* There are not yet enough verticals being developed and deployed to identify any generic patterns.
* There have been insufficient reports of and questions about existing projects to gather data.

//You// can help. Please comment with your questions and experiences. The more data available, the more it will be possible to automate.

That said it is possible to describe the tools and practices that are available which may be combined to make the development, deployment and installation process more automated. As with any software service, performing customization with TiddlyWeb can never be a fully automated process. Even with something as flexible as TiddlyWiki customizations you still need to do some work to gather the requisite plugin or plugins, get them into your TiddlyWiki and perhaps configure them. This is the routine with any system or framework: you have to find the stuff, get the stuff, install the stuff, configure the stuff.

Therefore, for deployment and installation you want to assemble the tools that make it possible to automate those parts of the system which are repeatable. Much of this is sysadmin 101 and in the open source development world there is little distinction between sysadmin and developer, nor should there be. In the Unix (and Unix-like) world these tools include (but are not limited to) make, Bourne shell, wget or curl, rsync, tar, source control tools (e.g. svn, git etc.) and symlinks.

In the information below we assume that a TiddlyWeb vertical involves TiddlyWiki in some way. This will often be the case, but is by no means required.

A TiddlyWeb vertical uses or includes:
* TiddlyWeb itself.
* The [[tiddlywebplugins.utils]] package, if required.
* Any required TiddlyWeb [[plugins|plugin]].
* Any required auxiliary files for the plugin (such as template files).
* Possibly a [[tiddlywebconfig.py]].
* Any required TiddlyWiki plugins.
* Any required TiddlyWiki tiddler content.
* Any required web server configuration.
* [[apache.py]] if you are using [[mod_python|Using Mod Python]] or [[mod_wsgi|Using Mod WSGI]].
* [[index.cgi]] if you are [[Using CGI]].

Options for dealing with these:
* TiddlyWeb itself should not be installed or deployed as part of the vertical installation process. TiddlyWeb is something the vertical //uses// or depends on. TiddlyWeb should either already be installed on the machine in question, or be installed as a dependency of the vertical. See [[Installing TiddlyWeb]]. Keep in mind that there only needs to be one copy of TiddlyWeb on any given machine, regardless of how many [[instances|instance]] are present.
* That same is true for the [[tiddlywebplugins.utils]] package. It only needs to be installed once and should be installed as a Python package, in the usual Python ways.
* The current routine for getting TiddlyWeb plugins and tiddlywebconfig.py is to use wget to get the files from their canonical place on the web. This getting can be scripted and if any local customizations are required this can be scripted too.
* If your plugin uses multiple files then you may wish to consider:
** Making it into a Python package so it is easy to install and update.
** Making a script to automate (on the development side) the creation of a tarball or similar archive package which is easy to retrieve.
** Making a script to automate using git or svn to check your plugin out of the repo.
** Making a script to use rsnc to get your plugin from where it is being developed to where it is deployed. 
* For TiddlyWiki content (tiddlers and plugins) there are several useful tools:
** The [[twanager]] [[twimport]] command provides a clean mechanism for retrieving content into a TiddlyWeb [[bag]]. {{{twimport}}} can read TiddlyWiki cook style recipe files. If, development-side, you maintain a recipe file with your required tiddlers you get two things:
*** An easy way to build a TiddlyWiki to experiment with your plugins.
*** An easy way to retrieve those plugins into a TiddlyWeb.
** If you need to create specific bags, recipes or tiddlers [[twanager]] has commands for that. twanager can be called from scripts.
** The config item [[instance_tiddlers]] can be used with the [[twanager]] [[update]] command to:
*** Install required tiddlers.
*** Update those tiddlers as required.
** The [[twanager]] [[imwiki]] command may be used to import all the tiddlers in an existing TiddlyWiki file. A TiddlyWiki file may also be {{{POST}}}ed into a TiddlyWeb using the [[HTTP API]].

None of the above is a magic silver bullet, but combined they provide a powerful suite of tools that allow //you// to make at least a stainless steel bullet that works for //you//.

There's more to come here, please comment to shape things as you require.

See also:
* [[devstore]]
</pre>
</div>
<div title="How do I create or update a bag over HTTP?" server.title="How do I create or update a bag over HTTP?" server.page.revision="489" server.etag="&quot;docs/How%20do%20I%20create%20or%20update%20a%20bag%20over%20HTTP%3F/489:30ccc753ca11b03126dbe4c96398fa7d3c90271f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511134657" created="20090511133901" tags="faq" >
<pre>Bags can be created or updated over HTTP by using the [[HTTP API]] to access [[/bags/{bag_name}]] to send a {{{PUT}}} request containing a [[JSON bag]]. The content-type header must be set to {{{application/json}}}.

For a bag that already exists in the store, to make edits the [[current user]] must pass the manage [[constraint]] on the bag. To create a new bag, the current user must pass the [[bag_create_policy]].

See [[How can I use curl to create stuff in TiddlyWeb?]] for a simple example.</pre>
</div>
<div title="authorization" server.title="authorization" server.page.revision="1082" server.etag="&quot;docs/authorization/1082:c6a84025a850273ebdccc55538d6403ba1c4b1ed&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620122318" created="20090331125050" tags="glossary" >
<pre>Authorization is the management of access control: who or what gets access to particular resources or information. The authorization process requires that the requesting entity be [[authentic|authentication]].

Except for two cases, authorization in TiddlyWeb is managed by [[policies|policy]].

The two exceptions are instances of the same problem: the creation of policies. This is controlled by configuration items: [[bag_create_policy]] and [[recipe_create_policy]].</pre>
</div>
<div title="pyapitemplate" server.title="pyapitemplate" server.page.revision="1316" server.etag="&quot;docs/pyapitemplate/1316:c9d48f19e0bf78db8cdce4874a177b5da6ac6bbc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001111110" created="20091001102822" tags="excludeLists" >
<pre>!!Description


!!Parameters


!!Returns


!!Example


!!Notes</pre>
</div>
<div title="Server Request Model" server.title="Server Request Model" server.page.revision="830" server.etag="&quot;docs/Server%20Request%20Model/830:10a909adafb3be9230be692bb2f80aa78f8701af&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323172902" created="20090323172902" tags="" >
<pre>When TiddlyWeb receives an HTTP request, the request is processes through several stages before content is handled or produced. Once a response is ready, the response is also processed through several stages.

* Request
** The request is received and processed by the [[WSGI]] applications in [[server_request_filters]] until it arrives at [[selector]].
** The selector application uses [[urls.map]] to determine what TiddlyWeb method (either in the {{{tiddlyweb.web.handler}}} package or a plugin) should handle it.
* Handling
** Each handler method performs the requested action, using the provided [[environ]] to determine the details of the action. The action usually involves getting or putting something to or from the [[store]], transforming the content, as required, with a [[serializer]].
** The handler establishes the headers of a response with [[start_response]] and returns some content as an iterator.
** If there have been any uncaught exceptions during the request, they are caught by the [[PermissionsExceptor]] or [[HTTPExceptor]].
* Response
** The response is processed by the [[server_response_filters]].
** The response is finally given to the controlling web server.</pre>
</div>
<div title="Retrieving POST Data" server.title="Retrieving POST Data" server.page.revision="802" server.etag="&quot;docs/Retrieving%20POST%20Data/802:28dc26f7e0e170d9d7fd5ff42e2e28b54c6c38a1&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090422123411" created="20090422091525" tags="codeSnippets howto dev" >
<pre>//POST//ed data can arrive in two forms:
* as form content ({{{Content-Type: application/x-www-form-urlencoded}}}), in which case it is accessible via {{{environ["tiddlyweb.query"]}}}
* as "raw" request, which has to be read from {{{stdin}}}:
{{{
length = int(environ["CONTENT_LENGTH"])
content = environ["wsgi.input"].read(length)
}}}</pre>
</div>
<div title="Developing Plugins" server.title="Developing Plugins" server.page.revision="358" server.etag="&quot;docs/Developing%20Plugins/358:24f1971475c5ef5c9cc5162aceabd04063e85cbf&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206152142" created="20091125135044" tags="howto dev" >
<pre>Generally, good references on how to perform specific tasks are provided by the [[core code|http://github.com/tiddlyweb/tiddlyweb]] and its [[tests|http://github.com/tiddlyweb/tiddlyweb/tree/master/test/]] in particular. There is also a [[variety|http://github.com/search?q=tiddlyweb]] of [[plugins|http://github.com/tiddlyweb/tiddlyweb-plugins]] which can be consulted for guidance.

The [[pluginmaker]] may provide a good starting point for creating plugins.

!See Also
* [[Customizing TiddlyWeb]]
&lt;&lt;tagging dev&gt;&gt;</pre>
</div>
<div title="Open Source" server.title="Open Source" server.page.revision="734" server.etag="&quot;docs/Open%20Source/734:020c9116357e1532ad3f5a089b2359a38a081351&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314145740" created="20090218194647" tags="" >
<pre>TiddlyWeb is licensed under the [[BSD License|http://opensource.org/licenses/bsd-license.php]].

TiddlyWeb is Copyright (c) UnaMesa Association 2008-2010.

</pre>
</div>
<div title="tiddlerComment1287028853566" server.title="tiddlerComment1287028853566" server.page.revision="2237" server.etag="&quot;comments/tiddlerComment1287028853566/2237:d0a12896bc84cce17d1cf4a4bbe011c9d3e8e1a9&quot;" modifier="cdent.tumblr.com" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20101113120510" created="20101014040051" tags="excludeLists excludeSearch excludeMissing" daddy="tiddler" root="tiddler">
<pre>This tiddler has been deleted.</pre>
</div>
<div title="control.determine_bag_for_tiddler" server.title="control.determine_bag_for_tiddler" server.page.revision="1140" server.etag="&quot;docs/control.determine_bag_for_tiddler/1140:3940ded74b9ff336b07fc105a25582bbaddce333&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001112826" created="20091001112826" tags="pyapi" >
<pre>!!Description
Determine which bag in a recipe a tiddler could be saved into.

!!Parameters
* [[recipe]]
* [[tiddler]]
* //[[environ]]=None//

!!Returns
* bag

Raises {{{NoBagError}}} if no bag can be found.

!!Example
{{{
    tiddler = Tiddler('somename')
    recipe = Recipe('foobar')
    recipe = store.get(recipe)
    bag = control.determine_bag_for_tiddler(recipe, tiddler)
}}}

!!Notes
This is primarily used when putting a tiddler to recipe-based URL (which doesn't happen a lot, you should PUT a tiddler to a bag-based URL). Generally, unless the last bag in the recipe has a filter on it, the last bag is what will be returned from this method.

If an {{{environ}}} parameter is provided this is assumed to be a {{{dict}}} which is the [[WSGI]] [[environ]]. It is used to process the {{{_recipe_template}}} (see the [[source|source repository]] for details).</pre>
</div>
<div title="StyleSheet" server.title="StyleSheet" server.page.revision="2024" server.etag="&quot;tpc/StyleSheet/2024:cf7b075efdf07b2c0cde7bc8dc1bac9fe403ffaf&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20091214112955" created="20090721174351" tags="excludeLists" >
<pre>/*{{{*/
/*
 * page layout
 */

body {
	font-family: "Lucida Grande", Helvetica, sans-serif;
}

#header {
	position: relative;
	border-bottom: 2px solid [[ColorPalette::TertiaryDark]];
	padding: 10px 10px 5px;
	background-color: [[ColorPalette::Foreground]];
}

#header,
#header a {
	color: [[ColorPalette::Background]];
}

#header a:hover {
	color: [[ColorPalette::Foreground]];
	background-color: [[ColorPalette::Background]];
}

#searchBox {
	position: absolute;
	bottom: 10px;
	right: 10px;
}

#searchBox .searchButton {
	margin-right: 5px;
	font-weight: bold;
}

/*
 * sidebars
 */

#mainMenu a {
	color: [[ColorPalette::Foreground]];
}

#mainMenu a:hover {
	color: [[ColorPalette::Background]];
	background-color: [[ColorPalette::Foreground]];
}

#mainMenu .logos {
	margin-top: 25px;
}

#mainMenu .logos img {
	width: 100px;
	margin: 2px;
}

#mainMenu .osmologo a {
	display: block; /* adjust height */
	float: right; /* shrink-wrap */
	background-color: #000;
}

#mainMenu .logos a:hover {
	background-color: transparent;
}

#sidebarOptions {
	margin-top: 20px;
}

#sidebarOptions .button {
	padding: 0 2px;
}

#sidebarOptions .button:hover {
	border-color: [[ColorPalette::TertiaryDark]];
}

#sidebarTabs .tabset,
#sidebarTabs .tabContents,
#sidebarTabs .tabsetWrapper a {
	color: [[ColorPalette::Foreground]];
	background-color: [[ColorPalette::Background]];
}

#sidebarTabs .tabsetWrapper a:hover {
	color: [[ColorPalette::Background]];
	background-color: [[ColorPalette::Foreground]];
}

#sidebarTabs .tiddlyLinkNonExisting {
	font-style: italic;
}

/*
 * story
 */

.tiddler {
	margin-bottom: 10px;
	border: 1px solid [[ColorPalette::TertiaryPale]];
	padding-bottom: 10px;
}

.selected {
	border-color: [[ColorPalette::TertiaryLight]];
}

/*
 * comments
 */

.comments {
	margin: 5em 1em 1em;
	border-top: 2px solid [[ColorPalette::TertiaryMid]];
	padding: 2em;
}

.comments .comments {
	margin: 1em;
	border: none;
}

#adsense {
	margin-top: 1em;
	padding: .5em;
	border: solid thin black;
	background: [[ColorPalette::TertiaryPale]];
}

#twitter_div {
	padding-bottom: .5em;
}

#twitter_div  ul {
	display: block;
	padding-left: 0;
	margin-left: 0;
}

#twitter_div  li {
	display: block;
}

#twitter_div span {
	display: block;
}
/*}}}*/
</pre>
</div>
<div title="tiddlyweb.log" server.title="tiddlyweb.log" server.page.revision="1421" server.etag="&quot;docs/tiddlyweb.log/1421:e89143bef8afe940787bf775ee274657f3932bc7&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620124202" created="20090218175012" tags="glossary" >
<pre>Every [[instance]] has a {{{tiddlyweb.log}}} file. By default requests to the web application are logged to it. If {{{log_level}}} is changed in [[tiddlywebconfig.py]] more information will be written there. Try {{{DEBUG}}}.

The choices are: 'CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'WARNING'.</pre>
</div>
<div title="How do I create or update a User object in code?" server.title="How do I create or update a User object in code?" server.page.revision="486" server.etag="&quot;docs/How%20do%20I%20create%20or%20update%20a%20User%20object%20in%20code%3F/486:3e3dad397a8bbd762c8f0cddbb3be52f133c2dc0&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331144826" created="20090331143529" tags="faq" >
<pre>In a [[plugin]] you can create or update a [[User]] object as follows:
{{{
    username = 'foo'
    password = 'monkey'
    roles = ['ADMIN', 'science']
    user = User(username)
    user.set_password(password)
    for role in roles:
        user.add_role(role)
    environ['tiddlyweb.store'].put(user)
}}}
The code assumes you have the necessary modules imported and that [[environ]] has been populated as expected in a WSGI application. See the [[Plugin List]] for links to existing plugins which have examples of some of the other ways to do this.

Note that there is no requirement for [[roles|role]] to be pre-existing. You can use any string you like. It is up to you to manage that.</pre>
</div>
<div title="Twanager Model" server.title="Twanager Model" server.page.revision="960" server.etag="&quot;docs/Twanager%20Model/960:7249d4671f69d3cdb8cf17048e4e3048b3478205&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323164404" created="20090323164404" tags="" >
<pre>[[Twanager|twanager]] is the command line tool that comes with TiddlyWeb. It is used to administer your [[instance]] from the server. It can be extended with [[plugins]].

When twanager is run, the following process is followed:

* Check for [[twanager_plugins]]. Import the listed modules, if any.
* Assemble of a list of commands via [[@make_command]]
* The first argument to twanager is compared against the list of commands. If there, a corresponding method is run, passed the remaining arguments.
* That method can do whatever it wants. Exceptions are passed up to the user.</pre>
</div>
<div title="JavaScript" server.title="JavaScript" server.page.revision="679" server.etag="&quot;docs/JavaScript/679:ea067934f920aa1cebc99633b40663942eaaf0a6&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331122935" created="20090318161705" tags="" >
<pre>http://en.wikipedia.org/wiki/JavaScript

&gt;JavaScript is a scripting language widely used for client-side web development. It was the originating dialect of the ~ECMAScript standard. It is a dynamic, weakly typed, prototype-based language with first-class functions. JavaScript was influenced by many languages and was designed to look like Java, but be easier for non-programmers to work with.</pre>
</div>
<div title="recipeComment1262175469621" server.title="recipeComment1262175469621" server.page.revision="1603" server.etag="&quot;comments/recipeComment1262175469621/1603:d1ba6c5daf31d3f64e70bc70b8aa54df1ce523c0&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091230121752" created="20091230121752" tags="comment" >
<pre>Is there a trick to getting the "{{ user }}" special case to work?  Somehow this fails for me. </pre>
</div>
<div title="Retrieving Tiddlers from a Recipe" server.title="Retrieving Tiddlers from a Recipe" server.page.revision="812" server.etag="&quot;docs/Retrieving%20Tiddlers%20from%20a%20Recipe/812:31f4376a61db23cbd576878fb3b477a35f904882&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X GET -H 'Accept: application/json' \
	http://localhost:8080/recipes/default/tiddlers
}}}</pre>
</div>
<div title="UserExtract" server.title="UserExtract" server.page.revision="970" server.etag="&quot;docs/UserExtract/970:ba90b1e40411d7c55c46f712b2d6b28ba7f45639&quot;" modifier="burningchrome.com" creator="burningchrome.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331091740" created="20090331091740" tags="" >
<pre>UserExtract is the [[WSGI]] application which manages the [[credentials extractor]] subsystem.

Every incoming request passes through UserExtract which in turn passes the request through one or more configured credentials extractors. These look for user information in the request and attempt to validate it. If valid the information is used to set [[tiddlyweb.usersign]] in the environment. If the extractor finds no valid information it returns {{{False}}} and the next extractor is tried. If no extractor finds valid information, {{{tidddlyweb.usersign}}} is set to {{{GUEST}}}.</pre>
</div>
<div title="easy_install" server.title="easy_install" server.page.revision="1181" server.etag="&quot;docs/easy_install/1181:2fe6f2517bfc635472937818d9fc78ba1425de3f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100131123845" created="20090331145604" tags="" creator="cdent.tumblr.com">
<pre>''Do not use easy_install if you intend to use tiddywebplugins. Use [[pip]] instead.''

* See [[EasyInstall PyPI page|http://pypi.python.org/pypi/setuptools]] for information about installating and using {{{easy_install}}}.

These days (late 2009 on), using [[pip]] to install TiddlyWeb is preferred.</pre>
</div>
<div title="TiddlyWebConfig" server.title="TiddlyWebConfig" server.page.revision="2170" server.etag="&quot;system/TiddlyWebConfig/2170:6207ff4abb4b281cbf3352d6bce0973aec868a64&quot;" modifier="FND" creator="FND" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="20100830213215" created="20090217160717" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|TiddlyWebConfig|
|''Description''|configuration settings for TiddlyWebWiki|
|''Author''|FND|
|''Version''|1.2.1|
|''Status''|stable|
|''Source''|http://svn.tiddlywiki.org/Trunk/association/plugins/TiddlyWebConfig.js|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''Requires''|TiddlyWebAdaptor|
|''Keywords''|serverSide TiddlyWeb|
!Code
***/
//{{{
(function($) {

if(!config.adaptors.tiddlyweb) {
	throw "Missing dependency: TiddlyWebAdaptor";
}

if(window.location.protocol != "file:") {
	config.options.chkAutoSave = true;
}

var adaptor = tiddler.getAdaptor();
var recipe = tiddler.fields["server.recipe"];
var workspace = recipe ? "recipes/" + recipe : "bags/common";

var plugin = config.extensions.tiddlyweb = {
	host: tiddler.fields["server.host"].replace(/\/$/, ""),
	username: null,
	status: {},

	getStatus: null, // assigned later
	getUserInfo: function(callback) {
		this.getStatus(function(status) {
			callback({
				name: plugin.username,
				anon: plugin.username == "GUEST"
			});
		});
	},
	hasPermission: function(type, tiddler) {
		var perms = tiddler.fields["server.permissions"];
		if(perms) {
			return perms.split(", ").contains(type);
		} else {
			return true;
		}
	},
	// NB: pseudo-binaries are considered non-binary here
	isBinary: function(tiddler) {
		var type = tiddler.fields["server.content-type"];
		return type ? !this.isTextual(type) : false;
	},
	isTextual: function(ctype) {
		return ctype.indexOf("text/") == 0 || this.endsWith(ctype, "+xml");
	},
	endsWith: function(str, suffix) {
		return str.length &gt;= suffix.length &amp;&amp;
			str.substr(str.length - suffix.length) == suffix;
	}
};

config.defaultCustomFields = {
	"server.type": tiddler.getServerType(),
	"server.host": plugin.host,
	"server.workspace": workspace
};

// modify toolbar commands

config.shadowTiddlers.ToolbarCommands = config.shadowTiddlers.ToolbarCommands.
	replace("syncing ", "revisions syncing ");

config.commands.saveTiddler.isEnabled = function(tiddler) {
	return plugin.hasPermission("write", tiddler) &amp;&amp; !tiddler.isReadOnly();
};

config.commands.deleteTiddler.isEnabled = function(tiddler) {
	return !readOnly &amp;&amp; plugin.hasPermission("delete", tiddler);
};

// hijack option macro to disable username editing
var _optionMacro = config.macros.option.handler;
config.macros.option.handler = function(place, macroName, params, wikifier, paramString) {
	if(params[0] == "txtUserName") {
		params[0] = "options." + params[0];
		var self = this;
		var args = arguments;
		args[0] = $("&lt;span /&gt;").appendTo(place)[0];
		plugin.getUserInfo(function(user) {
			config.macros.message.handler.apply(self, args);
		});
	} else {
		_optionMacro.apply(this, arguments);
	}
};

// hijack isReadOnly to take into account permissions and content type
var _isReadOnly = Tiddler.prototype.isReadOnly;
Tiddler.prototype.isReadOnly = function() {
	return _isReadOnly.apply(this, arguments) || plugin.isBinary(this) ||
		!plugin.hasPermission("write", this);
};

var getStatus = function(callback) {
	if(plugin.status.version) {
		callback(plugin.status);
	} else {
		var self = getStatus;
		if(self.pending) {
			if(callback) {
				self.queue.push(callback);
			}
		} else {
			self.pending = true;
			self.queue = callback ? [callback] : [];
			var _callback = function(context, userParams) {
				var status = context.serverStatus || {};
				for(var key in status) {
					if(key == "username") {
						plugin.username = status[key];
						config.macros.option.propagateOption("txtUserName",
							"value", plugin.username, "input");
					} else {
						plugin.status[key] = status[key];
					}
				}
				for(var i = 0; i &lt; self.queue.length; i++) {
					self.queue[i](plugin.status);
				}
				delete self.queue;
				delete self.pending;
			};
			adaptor.getStatus({ host: plugin.host }, null, _callback);
		}
	}
};
(plugin.getStatus = getStatus)(); // XXX: hacky (arcane combo of assignment plus execution)

})(jQuery);
//}}}</pre>
</div>
<div title="bag_create_policy" server.title="bag_create_policy" server.page.revision="1101" server.etag="&quot;docs/bag_create_policy/1101:03487365aa5670ce132f2a10ecc1c2b36a7fc735&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090515133538" created="20090515133538" tags="config" >
<pre>A [[config]] setting which declares who or what is able to create a [[bag]] on the system. Since [[policies|policy]] are associated with existing bags, we need a separate mechanism for controlling creation. The {{{bag_create_policy}}} does this. It's default value is an empty string, which means anyone can create a new bag via a {{{PUT}}} to [[/bags/{bag_name}]]. Other options are:
;{{{ANY}}}
:Any [[authenticated|authentication]] user may create a bag.
;{{{ADMIN}}}
:Any user with the {{{ADMIN}}} [[role]] may create a bag.

Other options are possible by overriding existing code.</pre>
</div>
<div title="env" server.title="env" server.page.revision="1183" server.etag="&quot;docs/env/1183:b8f3cdeee85c028e1f20032e62fb3853b210570c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090520120107" created="20090520120044" tags="plugin" >
<pre>env is a [[plugin]] that displays the [[WSGI]] environment of the current request. This can be quite illuminating to display how TiddlyWeb works and how various query parameters and HTTP headers impact the request. Useful for debugging and learning.

The code can be found at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/env]].</pre>
</div>
<div title="HTTP API by method" server.title="HTTP API by method" server.page.revision="465" server.etag="&quot;docs/HTTP%20API%20by%20method/465:9916928aa4364d9924ed1e9e83e36f885abefaec&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001103330" created="20090511125421" tags="" >
<pre>The ~URLs in the [[HTTP API]] grouped by the methods that work with each.

!GET
&lt;&lt;list  filter [tag[method:get]]&gt;&gt;

!PUT
&lt;&lt;list filter [tag[method:put]]&gt;&gt;

!POST
&lt;&lt;list filter [tag[method:post]]&gt;&gt;

!DELETE
&lt;&lt;list filter [tag[method:delete]]&gt;&gt;</pre>
</div>
<div title="config" server.title="config" server.page.revision="1129" server.etag="&quot;docs/config/1129:d44259105cd1513502d3b78215fdc90dea9e2952&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090223203047" created="20090223203047" tags="" >
<pre>Configuration settings that can be set or modified in [[tiddlywebconfig.py]].</pre>
</div>
<div title="TiddlyWeb DocumentationComment1262901384820" server.title="TiddlyWeb DocumentationComment1262901384820" server.page.revision="2200" server.etag="&quot;comments/TiddlyWeb%20DocumentationComment1262901384820/2200:6e75fdc8e3a39d270c1d576ceacf663a065e5ece&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100830235926" created="20100107215625" tags="comment" >
<pre>The documentation should give a basic overview:
http://github.com/FND/tiddlyweb-plugins/blob/master/differ/README
http://github.com/FND/tiddlyweb-plugins/blob/master/differ/tiddlywebplugins/differ.py

If that doesn't suffice, please let us know - preferably on the [[mailing list]].</pre>
</div>
<div title="comment_1242818996073" server.title="comment_1242818996073" server.page.revision="1567" server.etag="&quot;comments/comment_1242818996073/1567:2fb95b71b2c00cf6d84f6ff5532a917622fd769f&quot;" modifier="bekeller.livejournal.com" creator="bekeller.livejournal.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090520112957" created="20090520112957" tags="comment" >
<pre>Addendum
I have an unelegant solution: Putting the above macro in a systemConfig-tagged tiddler (i.e. CommentsPluginTweak) in each bagX and replacing the server.workspace:bags/comments by server.workspace:bags/bagX. It would be more elegant, if the bagX could be handled as a parameter in the original commentsplugin. But that's beyond my competencies.</pre>
</div>
<div title="Server Startup Model" server.title="Server Startup Model" server.page.revision="838" server.etag="&quot;docs/Server%20Startup%20Model/838:448d300cd517b99c29258e989525c4c15829b9b1&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314184626" created="20090323170106" tags="" >
<pre>When TiddlyWeb first starts up as a web server, either using the internal server or whatever server is being used to [[mount]] the service, it goes through several steps to configure itself and establish how it will [[respond to requests|Server Request Model]].

* tiddlyweb.config and [[tiddlywebconfig.py]] are read to establish configuration settings.
** [[server_host]], [[server_prefix]]
** [[server_request_filters]], [[server_response_filters]]
** [[serializers|serializer]], [[server_store]]
** [[auth_systems]], [[extractors]]
** [[urls_map]]
** [[base_tiddlywiki]]
** [[system_plugins]]
* If there are any system plugins, they are imported and processed. These may modify other configuration settings.
* The stack of [[WSGI]] applications is configured (see [[WSGI Middleware Illustration]]).
* The bottom of that stack, [[selector]], is configured with the {{{urls_map}}}.
* The entire WSGI application is provided to the handling server and the server now waits for requests.

See [[Server Request Model]].
</pre>
</div>
<div title="REST" server.title="REST" server.page.revision="785" server.etag="&quot;docs/REST/785:40e1eb59d9a1e5de4859c068ced80c422da2f507&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314151903" created="20100314151903" tags="" >
<pre>REST stands for "Representational State Transfer". The term is used to describe a class of system architectures, notably the modern day web support by HTTP version 1.1.

The term was defined at some length in Roy Fielding's thesis [[Architectural Styles and
the Design of Network-based Software Architectures|http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm]].
</pre>
</div>
<div title="tiddlyweb.usersign" server.title="tiddlyweb.usersign" server.page.revision="1422" server.etag="&quot;docs/tiddlyweb.usersign/1422:06c1d19a04e422599b46e94ee335c35fbe8906d1&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331135310" created="20090331135310" tags="glossary" >
<pre>{{{tiddlyweb.usersign}}} is a member of the [[environ]] value that is passed around all the [[WSGI]] code in TiddlyWeb. It contains information about the current [[user]] as determined by the [[credentials extractor]] system. The data is passed to a [[policy]] when it is checked.

There are two elements in the data structure:
* ''name'': A string representing the  identity of the current user. If no user was extracted this will be {{{GUEST}}}. It should never be empty.
* ''roles'': A list of strings of [[roles|role]]. This may be a zero length list.

The name {{{usersign}}} is used because there's nothing preventing the user from having an identifier which bears no resemblance to a name.</pre>
</div>
<div title="filters.parse_for_filters" server.title="filters.parse_for_filters" server.page.revision="1222" server.etag="&quot;docs/filters.parse_for_filters/1222:6a41d96b7466809527c305598a51468617c7a109&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091008105136" created="20091008105124" tags="pyapi" >
<pre>!!Description
Take a string in the form of a CGI query string and parse it for [[filters|filter]], returning filter functions and any remaining query parameters. This is usually used in WSGI middleware to parse filters from ~URLs, but may also be used in plugin code to generate filters from strings.

!!Parameters
* query_string

!!Returns
* list of [[filters|filter]]
* string of remaining query parameters

!!Example
{{{
    filters, leftovers = parse_for_filters('select=tag:systemConfig;fat=1')
}}}

!!Notes</pre>
</div>
<div title="/recipes/{recipe_name}/tiddlers" server.title="/recipes/{recipe_name}/tiddlers" server.page.revision="225" server.etag="&quot;docs/%2Frecipes%2F%7Brecipe_name%7D%2Ftiddlers/225:c3bd567af55963f176e8d3dcc8559211bbf0a01f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001124531" created="20090511111842" tags="rep:json rep:html rep:text httpapi method:get rep:wiki" >
<pre>!Resource
A list of [[tiddlers|tiddler]] contained by the named [[recipe]].  The [[current user]] must pass the read [[constraint]] on the recipe as well as the read constraint on each of the [[bags|bag]] in the recipe.

!Representations
; {{{text/plain}}}
: A linefeed separated list of tiddlers.
; {{{text/html}}}
: An HTML presentation of the description of the bag and a link to its list of tiddlers.
; {{{application/json}}}
: [[JSON]] list representation of the tiddlers in the recipe. See [[JSON tiddler]] for a description of each individual item in the list. By default the included tiddlers are skinny. You [[can make them fat|How can I GET many tiddlers at once?]].
;  {{{text/x-tiddlywiki}}}
: A TiddlyWiki representation of the tiddlers produced by this recipe. This is the canonical way to get TiddlyWeb to produce a TiddlyWiki. [[tiddlywebwiki]] is required.

!Methods
!! {{{GET}}}
Get the list of tiddlers.

!Notes
These tiddlers may be [[filtered|filter]].

!Example
http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers</pre>
</div>
<div title="How can I use curl to create stuff in TiddlyWeb?" server.title="How can I use curl to create stuff in TiddlyWeb?" server.page.revision="476" server.etag="&quot;docs/How%20can%20I%20use%20curl%20to%20create%20stuff%20in%20TiddlyWeb%3F/476:5e878b8e23f138458ef313b1d99cf742814f32f3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091207100451" created="20090420205551" tags="faq" >
<pre>Sometimes you may wish to create or update a [[tiddler]], [[bag]] or [[recipe]] from the command line and [[twanager]] won't work for you for some reason. Maybe you are using [[Google App Engine]] or your are accessing a remote server. In these instances you can use [[curl]] or [[wget]] to make requests to the TiddlyWeb server.

Below are some examples. In each of these the argument to the -d switch is a JSON string, so the use of {{{'}}} and {{{"}}} matter.

!!Create or Update a Bag
{{{
      curl -X PUT -H 'Content-Type: application/json' -d '{"policy":{}}' http://0.0.0.0:8080/bags/foobar
}}}

!!Create or Update a Recipe
{{{
    curl -X PUT -H 'Content-Type: application/json' -d '{"recipe":[["system",""],["common",""]]}' \
        http://0.0.0.0:8080/recipes/default
}}}

!!Create or Update a Tiddler
{{{
    curl -X PUT -H 'Content-Type: application/json' -d '{"text":"hello"}' \
        http://0.0.0.0:8080/bags/foobar/tiddlers/monkey
}}}

If you wish to {{{PUT}}} a [[binary tiddler]] you can do the following, assuming the source file is named {{{monkey.png}}}:
{{{
    curl -X PUT -H 'Content-Type: image/png' --data-binary @monkey.png \
        http://0.0.0.0:8080/bags/foobar/tiddlers/monkey
}}}

See also:

* [[tiddlywebweb]]
* [[HTTP API]]</pre>
</div>
<div title="twimportComment1264360634205" server.title="twimportComment1264360634205" server.page.revision="1615" server.etag="&quot;comments/twimportComment1264360634205/1615:6a8f0dabf5beee16fe4dc9f250c6d50ef58fd4df&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100124191718" created="20100124191718" tags="comment" daddy="twimport" root="twimport">
<pre>tiddlywebplugins.twimport now implements some of the functionality
from bimport. The rules go like this (for twanager twimport bag_name
filename) where filename is:

*.{wiki,html}       import as a tiddlywiki
note: i suggest also to include '.htm' for importing tiddlywikis

*.{tid,tiddler,js}  import as various forms of tiddler
                     .tid is tiddlyweb text store style
                     .js and .tiddler are Cook formats

*.{recipe}          import the expansion of a recipe

*.&lt;anything else&gt;   import as a "binary" tiddler, attempting
                     to deduce the content-type

twimport is include with the latest tiddlywebwiki dependencies 

</pre>
</div>
<div title="Colophon" server.title="Colophon" server.page.revision="315" server.etag="&quot;docs/Colophon/315:8dd31e166ed965a662c233ca337fab13abf3519a&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091018130510" created="20090218194258" tags="" >
<pre>This site is hosted on TiddlyWeb (of course) [[mounted|mount]] on [[mod_wsgi|Using Mod WSGI]] under Apache 2. It uses the [[cachinghoster]], [[caching-store]], [[atomplugin|atom]], [[mselect]], [[pathinfohack]], [[formeditor]], [[tiddlyeditor]], [[sqlstore]] and [[tiddlywebplugins.status]] server-side [[plugins|plugin]] and [[ServerSideSavingPlugin]], [[TiddlyWebAdaptor]] and [[CommentsPlugin]] on the client side. This is an example of a TiddlyWeb as a [[server side]] for TiddlyWiki.

A more detailed [[How is this server put together?]] document will be made available.

Many thanks to [[FND]] for cooking up the improved style for this TiddlyWiki.

Work on TiddlyWeb development is supported by:
* [[Peermore Limited|http://peermore.com/]]
* [[Osmosoft|http://www.osmosoft.com/]]
* [[Unamesa|http://www.unamesa.org/]]</pre>
</div>
<div title="How do I change which challengers are used?" server.title="How do I change which challengers are used?" server.page.revision="2257" server.etag="&quot;docs/How%20do%20I%20change%20which%20challengers%20are%20used%3F/2257:d0f2be6a3cb1f0383d002f144b83de6bfbdcb58d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110222163030" created="20090511135726" tags="faq" >
<pre>Which [[challlengers|challenger]] are presented to the user when an authenticated user is required is controlled by the [[auth_systems]] [[config]] item. This is a list of modules which are challengers. To change, set {{{auth_systems}}} in [[tiddlywebconfig.py]]:
{{{
config = {
    'auth_systems': ['tiddlywebplugins.openid2'],
}
}}}
If there is only one challenger listed, when a challenge happens, the system will automatically redirect to that challenger. Otherwise, a list of the available challengers will be presented.</pre>
</div>
<div title="tiddlywebplugins.jsonp" server.title="tiddlywebplugins.jsonp" server.page.revision="1428" server.etag="&quot;docs/tiddlywebplugins.jsonp/1428:58a45d749177e8aca314ddec7d6d268c3cfc8b54&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123121859" created="20091123121859" tags="plugin" >
<pre>jsonp provides jsonp wrapper callback handlng for any [[JSON]] representation provided by TiddyWeb. If the plugin is installed, when a JSON type request is made and {{{jsonp_callback}}} is set in the query string of the request, the output will be wrapped with that callback.

jsonp is available from PyPI as [[tiddlywebplugins.jsonp|http://pypi.python.org/pypi/tiddlywebplugins.jsonp]].</pre>
</div>
<div title="What is a bag for?" server.title="What is a bag for?" server.page.revision="2149" server.etag="&quot;docs/What%20is%20a%20bag%20for%3F/2149:2b4ab8da5574098c318c49dcf260b1e0cfb5d31a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830211814" created="20090826150544" tags="faq" >
<pre>A [[bag]] acts as a container for [[tiddlers|tiddler]]. As a container it provides several related functions:
* A bag provides a topical domain for the tiddlers. Tiddlers in bag X are related to some topic, concept, purpose, application, etc. For example all the tiddlers in the //teamtasks// bag are general data and code for running a teamtasks application whereas the tiddlers in the //notes// bag are random gatherings of tiddlers.
* A bag provides an [[authorization]] domain through the use of [[policies|policy]].
* A bag provides a building block for [[recipes|recipe]].

These functions are implemented at the level of the bag rather than the tiddler to make the functionality easier to manage on a few dimensions: in the minds of people using them, in application design, and in code.

It should be noted that a bag does not //have to// indicate any sense of topicality: it's a place to put things and there is no obligation that those things be the same in any particular way.</pre>
</div>
<div title="Using Mod Proxy" server.title="Using Mod Proxy" server.page.revision="988" server.etag="&quot;docs/Using%20Mod%20Proxy/988:df5eef81066d263ee6327bdbb936af8795d3c2ae&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100325114458" created="20100325114458" tags="" >
<pre>
In some setups, it may be useful to use Apache as a proxy server to some other web server that is running TiddlyWeb, for example [[gunicorn|Using gunicorn]] or [[spawning|Using spawning]]. This may help save memory and can also provide ways to load balance and scale your application. One option is to use Apache to server up static content while the proxied server serves up the dynamic content created by TiddlyWeb.

To get started first ensure that your Apache has mod_proxy enabled. On Ubuntu (and perhaps other similar systems) you can run:
{{{
    a2enmod proxy_http
}}}
This will enable settings in your apache config to load the proxy module and set a reasonable configuration. If you need to do this by hand please see the [[the mod proxy docs|http://httpd.apache.org/docs/2.0/mod/mod_proxy.html]].

Create an [[instance]], setting [[server_host]] to the external IP and port. Launch the instance with gunicorn, spawning or any other WSGI server, binding to a local only interface (e.g. localhost:8080). If you wish to have your TiddlyWeb in a subdirectory (e.g. {{{/wiki}}}) set [[server_prefix]] to that subdirectory.

Configure apache to proxy a virtual host or direcory to the TiddlyWeb server:
{{{
    &lt;VirtualHost *&gt;
        ServerName dev.peermore.com
        &lt;Proxy *&gt;
            Order deny,allow
            Allow from all
        &lt;/Proxy&gt;
        ProxyPreserveHost On
        ProxyPass /wiki/ http://0.0.0.0:8080/
        ErrorLog /var/log/apache2/dev.peermore.com-error.log
        CustomLog /var/log/apache2/dev.peermore.com-access.log combined
    &lt;/VirtualHost&gt;
}}}

Restart apache. If things are configured correctly you should see requests to Apache being passed on to the TiddlyWeb server.
</pre>
</div>
<div title="tiddlywebplugins" server.title="tiddlywebplugins" server.page.revision="1427" server.etag="&quot;docs/tiddlywebplugins/1427:f388b1386a5a1ee6b786094a5bfe89654f79041c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091018122952" created="20091018122952" tags="" >
<pre>`tiddlywebplugins` is being used as a `namespace_package` for mature TiddlyWeb plugins that are likely to be used in the created of [[verticals|vertical]].

[[Chris Dent]] has written a [[short reference|http://cdent.tumblr.com/post/216241761/python-namespace-packages-for-tiddlyweb]] on using the namespace.</pre>
</div>
<div title="environ" server.title="environ" server.page.revision="1187" server.etag="&quot;docs/environ/1187:72e9408142456f93e12f08001bb9ac8e631882a1&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831164548" created="20090406145219" tags="" >
<pre>In [[Python's|Python]] [[WSGI]] specification, a WSGI application is a //callable// that has a specific signature. The first parameter is a dictionary, usually called {{{environ}}}, that contains all sorts of information related to the current web request. This includes common {{{CGI}}} environment variables, information about the WSGI server, and any pieces of information that upstream WSGI applications have added to {{{environ}}}.

Pretty much anything can be added to environ but whatever is added only lasts from the point of its introduction into the environment until the end of the current web request.

A common trick in a WSGI stack of applications is to modify the incoming request to make it appear like a different type of request. This is especially useful in TiddlyWeb as a way of reusing existing code.
</pre>
</div>
<div title="representation" server.title="representation" server.page.revision="1343" server.etag="&quot;docs/representation/1343:1ce9cdad7ba18067e6b11aae01e801ee9cd6de01&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314154050" created="20090218162232" tags="glossary" >
<pre>On the web a representation is one of possible many forms of a single [[resource]]. In TiddlyWeb a [[tiddler]] is a resource. It can be represented in a variety of forms including HTML, text, JSON. Each of these are a representation of the resource. A [[serializer]] is used to turn a resource into a particular representation.
</pre>
</div>
<div title="comment_1247149363728" server.title="comment_1247149363728" server.page.revision="1586" server.etag="&quot;comments/comment_1247149363728/1586:ff9968c750c0af780bd1cc8937c70b80521153ec&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090709142357" created="20090709142244" tags="comment" >
<pre>Need more context in order to be able to respond to this. The unset owner is {{{null}}} in the [[JSON]] representation of a policy. Which is valid JSON equivalent with {{{None}}} in Python. In the internal representation of a [[policy]] the default owner is {{{None}}}.

If you're seeing {{{null}}} in a way that doesn't correspond with these things, give a shout.</pre>
</div>
<div title="HTML tiddler" server.title="HTML tiddler" server.page.revision="447" server.etag="&quot;docs/HTML%20tiddler/447:10bde7ce634d94f45a22898c5fd9926ce2fd8adc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831171018" created="20090511130759" tags="" >
<pre>When the [[HTML representation|rep:html]] of a [[tiddler]] is requested, the wikitext of the tiddler is rendered, //serverside//, to HTML by a [[renderer]]. When wiki functionality is enabled, the code uses the [[wikklytextrender]] to create HTML by using [[wikklytext]]. Where possible wiki links in the tiddler are made to link to other tiddlers in the same [[bag]] or [[recipe]]. Some of the attributes of the tiddler are encoded into attributes on the div that contains the rendered HTML.</pre>
</div>
<div title="comment_1241853869198" server.title="comment_1241853869198" server.page.revision="1551" server.etag="&quot;comments/comment_1241853869198/1551:0ddb1c9cdacee5237804518d0c73cfdac20f4e08&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090509072429" created="20090509072429" tags="comment" >
<pre></pre>
</div>
<div title="FAQ" server.title="FAQ" server.page.revision="388" server.etag="&quot;docs/FAQ/388:55195ed11d95742d9a6284ad8ce25901429b773a&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331155106" created="20090223102356" tags="" >
<pre>&lt;&lt;list filter [tag[faq]]&gt;&gt;

If you have a question that you think might be a FAQ add a comment, and we'll see about finding the answer. //Thanks.//</pre>
</div>
<div title="caching-store" server.title="caching-store" server.page.revision="1110" server.etag="&quot;docs/caching-store/1110:7401323a5503e5de2e67d3a7ea3ef75bdef6ca89&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123112633" created="20090519170144" tags="plugin" >
<pre>The caching-store is a [[plugin]] which provides a [[store]] that will query a [[memcached]] server on a get. If the entity is not found in memcache, then the {{{cached-store}}} is queried. The cached-store is any other store, e.g. the text store, where the content is persisted.

This is a highly experimental plugin. It is in use on the server hosting this content but is not having much impact because use of this server is insufficiently concurrent to require it. It is likely the plugin would have a positive impact in a very high volume situation where individual tiddlers are being requested often. If you have an application like this, please let us know because that would be fun to help optimize.

The code and configuration information can be found at the [[tiddlyweb plugins github|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/caching-store]]. As it says in the {{{README}}} you'll need to do some fiddling to make it go.</pre>
</div>
<div title="JSON recipe" server.title="JSON recipe" server.page.revision="671" server.etag="&quot;docs/JSON%20recipe/671:afe4f24f71db971dd3d1206b56e1cf5fcd719bc3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511104950" created="20090511104943" tags="" >
<pre>When a [[recipe]] is GET or PUT as [[JSON]] the following form is used:
{{{
{
    "recipe": [
        ["bag name 1", "select=tag:blog"],
        ["bag name 2", ""]
    ],
    "policy": {
        "read": [], 
        "write": [],
        "create": [],
        "delete": [],
        "manage": [],
        "owner": ''
    },
    "desc": "optional description of the bag (may be an empty string or absent)",
}
}}}</pre>
</div>
<div title="comment_1244743197938" server.title="comment_1244743197938" server.page.revision="1573" server.etag="&quot;comments/comment_1244743197938/1573:a7b8a1a7351169aad7653d8f06340fa01f57c33d&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090611180004" created="20090611180004" tags="comment" >
<pre>Thanks for your work!
However, there is another problem to report.

If a port number is used in the openid string (localhost.localdomain:8080/id/user) than you will get a error thrown by simple_cookie.py, saying that in line 36 split doesn't work. You probably expect only one colon in an openid, which is probably true in the most cases.</pre>
</div>
<div title="/recipes/{recipe_name}/tiddlers/{tiddler_title}" server.title="/recipes/{recipe_name}/tiddlers/{tiddler_title}" server.page.revision="2186" server.etag="&quot;docs/%2Frecipes%2F%7Brecipe_name%7D%2Ftiddlers%2F%7Btiddler_title%7D/2186:5fcae79e3645b9327fc170499e3b59b8b4b8d4da&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830222125" created="20090511120353" tags="rep:json method:put method:delete rep:html rep:text httpapi method:get" >
<pre>!Resource
A single [[tiddler]] produced by the named [[recipe]].  The [[current user]] must pass the read [[constraint]] on the recipe to see the tiddler as well as the read constraint on //all// the [[bags|bag]] in the recipe.

!Representations
; {{{text/plain}}}
: A text representation of the tiddler. See [[text tiddler]].
; {{{text/html}}}
: An HTML representation of the tiddler. See [[HTML tiddler]]. 
; {{{application/json}}}
: [[JSON]] representation of the tiddler. See [[JSON tiddler]].

!Methods
!! {{{GET}}}
Get the tiddler.
!! {{{PUT}}}
Create or edit the named tiddler use the [[text|text tiddler]] or [[JSON|JSON tiddler]] representations. Which bag the tiddlers is stored into is determined by the [[recipe cascade]].

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers/HTTP%20API
</pre>
</div>
<div title="comment_1242394195126" server.title="comment_1242394195126" server.page.revision="1555" server.etag="&quot;comments/comment_1242394195126/1555:fdb8b2ed4a72f372c3ceee679099ee388cf36142&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090515132958" created="20090515132958" tags="comment" >
<pre>I've edited the above to hopefully make this somewhat more clear, but to be more specific in answer to your question:
* you have to be able to {{{read}}} recipe1 to get at its list of bags
* then to be able to get at the list of tiddlers produced by those bags, you need {{{read}}} on the bags, including bag1
* actions that involve a write only check the constraint on the target bag (which is either explicit in the request, or determined implicitly by reading and processing the recipe)
* {{{manage}}} only comes into play when editing the the policy or description of a bag or recipe</pre>
</div>
<div title="FND" server.title="FND" server.page.revision="391" server.etag="&quot;docs/FND/391:6b718678f6eec2a85c38058871821569a9680899&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831172228" created="20090722122912" tags="people" >
<pre>An [[osmonaut|Osmosoft]] primarily responsible for the [[tiddlywebwiki]] package.

* [[website|http://fnd.lewcid.org]]</pre>
</div>
<div title="Use a Different empty html" server.title="Use a Different empty html" server.page.revision="969" server.etag="&quot;docs/Use%20a%20Different%20empty%20html/969:cacecf7a41e8e77c0fd8d0b30c9bf791a3e1daf8&quot;" modifier="cdent" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="200903242134" created="20090223201616" tags="howto" >
<pre>[[TiddlyWiki]]s that are generated by TiddlyWeb start from a base tiddlywiki included in the distribution. The file is a copy of the most recent public empty.html kept at http://tiddlywiki.com/.

The html file is not directly accessible to users and developers. If you want to use a different file as your [[base_tiddlywiki]] you can point to it in [[tiddlywebconfig.py]] as follows:

{{{
    config = {
        'base_tiddlywiki': '/path/to/tiddlywiki.html'
    }
}}}

The path can be absolute or relative to the [[instance]] directory.</pre>
</div>
<div title="recipeComment1262198198989" server.title="recipeComment1262198198989" server.page.revision="1604" server.etag="&quot;comments/recipeComment1262198198989/1604:e8c0c557f0fa7322ed005023505d2bbb84484e3d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091230183639" created="20091230183639" tags="comment" >
<pre>Are you getting any error message?

The entry in the recipe should look like this:
{{{
/bags/{{ user }}/tiddlers
}}}

A bag for each candidate username must exist.</pre>
</div>
<div title="Philosophy" server.title="Philosophy" server.page.revision="760" server.etag="&quot;docs/Philosophy/760:7a765a18324bc51407d09959cec0a21ee7c32349&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091124134924" created="20091029121540" tags="" >
<pre>//work in progress//
* the basic architecture is predisposed to enabling anyone to use the resources at hand in any way imaginable (or even not yet imaginable) 
* first and foremost, [[recipes|recipe]], [[bags|bag]] and [[tiddlers|tiddler]] are for use by humans - which is why they have names rather than IDs
* this allows anyone to "make stuff" with the contents
* "anyone", here, is the guy on the street, the guy you never planned for

You can get a sense of this philosophy by reading the TiddlyWeb related [[blog posts|http://cdent.tumblr.com/tagged/tiddlyweb]] from ChrisDent.</pre>
</div>
<div title="control.get_tiddlers_from_recipe" server.title="control.get_tiddlers_from_recipe" server.page.revision="1151" server.etag="&quot;docs/control.get_tiddlers_from_recipe/1151:523f1f878541598167e1eb3192cd4d1c1da86153&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001111039" created="20091001103659" tags="pyapi" >
<pre>!!Description
Return the list of tiddlers which are the result of processing the provided [[recipe]]. If more than one tiddler of the same name is pulled from different bags, the [[tiddler]] from the [[bag]] processed later is the one that is kept. See also [[recipe cascade]].

!!Parameters
* [[recipe]]
* //[[environ]]=None//

!!Returns
* list of [[tiddlers|tiddler]]

If there are no tiddlers, an empty list is returned.

!!Example
{{{
    recipe = Recipe('foobar')
    recipe = store.get(recipe)
    tiddlers = control.get_tiddlers_from_recipe(recipe)
}}}

!!Notes
This is the canonical way of getting the tiddlers from a recipe. If the {{{store}}} attribute is set on the provided recipe, the bags listed in the recipe will be read from the store to get their lists of tiddlers and then filter them according to the filters in the recipe.

If an {{{environ}}} parameter is provided this is assumed to be a {{{dict}}} which is the [[WSGI]] [[environ]]. It is used to process the {{{_recipe_template}}} (see the [[source|source repository]] for details).</pre>
</div>
<div title="comment_1247133689386" server.title="comment_1247133689386" server.page.revision="1583" server.etag="&quot;comments/comment_1247133689386/1583:91a4a9fe19df53a6e7b47d51a6f4aa481598b21d&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090709100133" created="20090709100133" tags="comment" >
<pre>[[policy]] explains how roles are prepended with {{{R:}}} - what if there's a user called "R:T:F:M"?</pre>
</div>
<div title="policy" server.title="policy" server.page.revision="1308" server.etag="&quot;docs/policy/1308:0368d7b70d28b7dda27f31ec798a988233a99581&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314162650" created="20090331122808" tags="" creator="cdent.tumblr.com">
<pre>A policy is the TiddlyWeb method for controlling access to resources on the system. That is: it is the mechanism by which [[authorization]] is managed.

There are policies associated with each [[bag]] and each [[recipe]].
Each policy has a list of [[constraints|constraint]] and a list of arguments to the constraint.
It also has an {{{owner}}} key and value (string), representing the person who modified the policy (but otherwise not yet used).

The policy constraint arguments are either user identification strings (such as a username or [[OpenID]]), or [[roles|role]] prepended by {{{R:}}}.

Policies are checked throughout the code, primarily in the web handlers. The current user and their roles (in the form of [[tiddlyweb.usersign]] are compared against the constraint being queried. If there is no match the system raises a permissions error which is usually returned to the user as an HTTP error.

If a policy requires a user, but the current user is {{{GUEST}}}, TiddlyWeb will attempt to call the [[challenger]] system to get a user.

Policies are edited by editing the [[recipe]] or [[bag]] to which they are associated. See the [[API]] and [[twanager]].

!Processing Model
Policies are engaged in six different scenarios:
# Listing recipes: [[/recipes]].
# Listing bags: [[/bags]].
# Requesting an existing [[recipe]]: [[/recipes/{recipe_name}]].
# Requesting an existing [[bag]]: [[/bags/{bag_name}]].
# Requesting all or one of the tiddlers produced by a recipe: [[/recipes/{recipe_name}/tiddlers]].
# Requesting all or one of the tiddlers produced by a bag: [[/bags/{bag_name}/tiddlers]].

For a bag or recipe to be included in a list, the current user must pass the {{{read}}} constraint on the entity.

To view or edit an existing bag, the current user must pass the {{{manage}}} constraint.

To view an existing recipe, the current must pass the {{{read}}} constraint (this may change to be consistent with bags). To edit, the {{{manage}}} constraint is checked.

{{{delete}}}, {{{read}}}, {{{write}}} and {{{create}}} are used in the "obvious" fashion when addressing tiddlers in a bag.

When editing a tiddler via a recipe URL, the policy on the bag of its eventual destination is checked for {{{write}}}, {{{create}}} or {{{accept}}}. The policy on the recipe does not control edits of tiddlers.

When reading a tiddler via a recipe URL, the current user must have {{{read}}} on the recipe policy //and// {{{read}}} in the policy of the bag in which the tiddler is located. In fact the user must have {{{read}}} in the policies of all bags used in the recipes. This is because a recipe must be read to determine which bags are being used in the recipe, and then the bags must be read to find the "right" tiddler.

Conceptually, the policy on a recipe is specifically for controlling //reading// and //managing// the recipe itself, whereas the policy on a bag does the job of controlling management of the bag's policy and //reading// and //editing// (including deleting) of the tiddlers. For another perspective on this distinction see [[this google group message|http://groups.google.com/group/tiddlyweb/msg/e0b3709851565dbe]].

When creating a recipe or bag, the [[recipe_create_policy]] and [[bag_create_policy]] [[config]] items are checked, respectively.

A policy constraint can contain any combination of three different types of entries:

* A string representing a username or usersign. The term usersign is used because what indicates a user is entirely up to the [[challenger]] and [[credentials extractor]] system or systems being used.
* A string representing a [[role]]. A role is indicates by prepending the role name with {{{R:}}}. By convention roles are uppercased.
* A string representing one of these built in meanings:
** {{{GUEST}}}: The default unauthenticated user.
** {{{NONE}}}: No user, GUEST or authenticated may pass this constraint.
** {{{ANY}}}: Any authenticated (not GUEST) user.

[[Policy Examples]]
</pre>
</div>
<div title="How do I give a user a role?" server.title="How do I give a user a role?" server.page.revision="2258" server.etag="&quot;docs/How%20do%20I%20give%20a%20user%20a%20role%3F/2258:e3b2ce1bcbefe26d5102ee5c57b7a52e0f95cbe5&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110222163313" created="20090331162629" tags="faq" >
<pre>If you wish to establish a [[role]] for a [[user]] of the TiddlyWeb system, you need to create or update a [[User]] in the datastore.

You may do this from the command line using the [[twanager]] [[adduser]] command. If you wish to make the changes using Python code, see [[How do I create or update a User object in code?]].

There are two ways to update an existing user from the command line:
* One is just like creating the user anew, but including role information. When you add a role in this way to an existing user (//from the command line//), you will be resetting their password.
* The other is to use the {{{addrole}}} twanager command.

To add a role to the user {{{barney}}} with password {{{dinosaur}}} and the roles {{{ADMIN}}} and {{{science}}} do the following:
{{{
twanager adduser barney dinosaur ADMIN science
}}}

Or
{{{
twanager addrole barney ADMIN science
}}}

If you are using [[OpenID]] or a similar service that uses it's own password or authentication mechanism but would like for the user to have roles in the [[datastore]] you may create an entry for the user with an empty password:
{{{
twanager adduser barney.example.com '' ADMIN science
}}}

See also:
* [[How do I add a user?]]
* [[How do I create or update a User object in code?]]
* [[May I edit the datastore by hand?]]</pre>
</div>
<div title="Installing on OS X" server.title="Installing on OS X" server.page.revision="619" server.etag="&quot;docs/Installing%20on%20OS%20X/619:5e8056779ca4047a8740b1682cf446e0b13f3e66&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206113704" created="20090218141444" tags="" >
<pre>Modern macs come with Python and [[easy_install]] so installing TiddlyWeb is straightforward:

{{{
    sudo easy_install -U pip
    sudo pip install -U tiddlywebwiki
}}}

[[pip]] is used to install TiddlyWeb as it is most reliable and flexible when later using [[plugins]]. Once the install is done go to [[Using TiddlyWeb]].
</pre>
</div>
<div title="Installing TiddlyWebComment1258619067929" server.title="Installing TiddlyWebComment1258619067929" server.page.revision="1519" server.etag="&quot;comments/Installing%20TiddlyWebComment1258619067929/1519:7d06f8e07c933e86c80358a1fb463104305842e8&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091119082428" created="20091119082428" tags="comment" >
<pre>test
</pre>
</div>
<div title="comment_1240477097103" server.title="comment_1240477097103" server.page.revision="1550" server.etag="&quot;comments/comment_1240477097103/1550:abf32b89cf80e86c0aee07cccc8337ccab5f71a1&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090423085818" created="20090423085818" tags="comment" >
<pre>thanks</pre>
</div>
<div title="tiddlywebplugins.utils" server.title="tiddlywebplugins.utils" server.page.revision="1437" server.etag="&quot;docs/tiddlywebplugins.utils/1437:27ffa48bc071836af80a91493d0455897cc1bfb4&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206114857" created="20090316153203" tags="" >
<pre>tiddlywebplugins.utils is a Python package with useful functions for creating plugins. It can be found in two locations:
* [[On pypi|http://pypi.python.org/pypi/tiddlywebplugins.utils]] so you can install it with [[pip]].
* [[In github|http://github.com/tiddlyweb/tiddlywebplugins.utils]].</pre>
</div>
<div title="Google App Engine" server.title="Google App Engine" server.page.revision="439" server.etag="&quot;docs/Google%20App%20Engine/439:60616458c1d72e08bebb27f087a461e89ef9656d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090407184146" created="20090407184146" tags="" >
<pre>http://code.google.com/appengine/

"Run your web apps on Google's infrastructure."</pre>
</div>
<div title="Installing on Windows" server.title="Installing on Windows" server.page.revision="654" server.etag="&quot;docs/Installing%20on%20Windows/654:445a870b15bda7afbea2d626a97dfdae2434d24c&quot;" modifier="fnd.lewcid.org" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100318143107" created="20090218142029" tags="howto" creator="cdent.livejournal.com">
<pre>!Step-by-Step Instructions
Yang Li has posted detailed [[step-by-step instructions for setting up TiddlyWeb in a Windows  client-server environment|http://groups.google.com/group/tiddlyweb/browse_thread/thread/97133daa3303c98]].
!Using Cygwin
[[Cygwin|http://www.cygwin.com]] can be used to install Python, then [[easy_install]] is [[available|http://pypi.python.org/pypi/setuptools#cygwin-mac-os-x-linux-other]] to install the [[tiddlyweb|TiddlyWeb]] and/or [[tiddlywebwiki|TiddlyWebWiki]] packages.

''Do not use easy_install if you intend to use tiddywebplugins. Use [[pip]] instead.''

!Portable Setup
These instructions are for installing [[TiddlyWebWiki]].
* create a directory {{{C:\Portable\TiddlyWeb}}}
* install [[Portable Python|http://portablepython.com]] (version 2.5 recommended) to {{{C:\Portable\TiddlyWeb\App\Python\}}}
* download {{{install.bat}}} and {{{launch.bat}}} from [[this repository|http://gist.github.com/235101]] (via the //raw// link) to {{{C:\Portable\TiddlyWeb}}}
* execute {{{install.bat}}}, which is a one-time operation for the basic setup and [[instance]]
* optionally [[configure|tiddlywebconfig.py]] instance as desired
* execute {{{launch.bat}}}, which will open TiddlyWeb at http://localhost:8080 in the browser
!Configuring Proxy
If required (e.g. for //easy_install// to work from behind a corporate firewall), a proxy can be set up with the following command:
{{{
set http_proxy=http://proxy.mycorp.com:8080
}}}
</pre>
</div>
<div title="DefaultTiddlers" server.title="DefaultTiddlers" server.page.revision="2012" server.etag="&quot;tpc/DefaultTiddlers/2012:2ed590fe95adaee1cb07cb17db889839cc208cb0&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090217204752" created="20090217204752" tags="" >
<pre>[[TiddlyWeb Documentation]]</pre>
</div>
<div title="When I edit a tiddler on the filesystem the changes don't show up in the wiki. Why not?" server.title="When I edit a tiddler on the filesystem the changes don't show up in the wiki. Why not?" server.page.revision="1056" server.etag="&quot;docs/When%20I%20edit%20a%20tiddler%20on%20the%20filesystem%20the%20changes%20don't%20show%20up%20in%20the%20wiki.%20Why%20not%3F/1056:facc5942b3ed42bc87ac7c00138b7112353d2b14&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090223174657" created="20090223103016" tags="faq" >
<pre>Sometimes you might want to edit a tiddler directly on the filesystem in the data store. If you do this you may find that the changes do not show up the next time you load the Tiddler from a browser.

When TiddlyWeb presents content to a browser it sends it with an Etag. This Etag is then used by the browser to validate future requests to see if it can use what's in its cache. The Etags are calculated from the metadata of the tiddlers (title, modified time, revision number), which don't get changed when you edit them in place in the store.

To force the Etag to change you need to do one or two things, depending on how you are accessing the Tiddler or Tiddlers:

* If you are most concerned with forcing the wiki that is generated to update, change the modified field on the tiddler
* If you want to make sure that the individual tiddler will reload in the browser, save your changes as a new revision (i.e. if you loaded 1, write it as 2).

In most cases it is the first thing that will matter.

See [[the original trac ticket|http://trac.tiddlywiki.org/ticket/943]].</pre>
</div>
<div title="May I edit the datastore by hand?" server.title="May I edit the datastore by hand?" server.page.revision="722" server.etag="&quot;docs/May%20I%20edit%20the%20datastore%20by%20hand%3F/722:bf79db6a9d4ec79abe067292ec1f717671b3b396&quot;" modifier="fnd" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409132017" created="20090331162940" tags="faq" >
<pre>If you have the interest and skills you are welcome to edit the TiddlyWeb [[datastore]] by hand. The tools you will need to do so depend on the [[store]] you are using.

The text store that ships with TiddlyWeb is a collection of {{{UTF-8}}} encoded files in a directory hierarchy. Their format should be relatively straightforward.

If you choose to edit the datastore by hand you should be aware that this is quite likely to result in unpredictable HTTP caching behavior as revisions ids, modified times and the like are used for generating [[ETags|ETag]].</pre>
</div>
<div title="comment_1247042228731" server.title="comment_1247042228731" server.page.revision="1582" server.etag="&quot;comments/comment_1247042228731/1582:80e03cf927dcdaee04b26db75cbcbdd33737423a&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090708084448" created="20090708084448" tags="comment" >
<pre>Comment for windows user.

So long as you get your python config right (the right python.exe is accessible to the command shell), you can rename "twanager" to "twanager.py" and it will save you type "c:\python26\python ...".</pre>
</div>
<div title="API" server.title="API" server.page.revision="261" server.etag="&quot;docs/API/261:3df0fde347c971cf17dc75ed7a4f9aa3cd977d6c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319194142" created="20090312173620" tags="concept" >
<pre>TiddlyWeb has two ~APIs. One, the [[HTTP API]], is used for remote access to TiddlyWeb resources. The other, the [[Python API]], is used when writing [[plugins]] and other server-side extensions to TiddlyWeb.

There is also a client-side JavaScript API provided by [[chrjs]].
</pre>
</div>
<div title="How can I use curl to create stuff in TiddlyWeb?Comment1253118804257" server.title="How can I use curl to create stuff in TiddlyWeb?Comment1253118804257" server.page.revision="1517" server.etag="&quot;comments/How%20can%20I%20use%20curl%20to%20create%20stuff%20in%20TiddlyWeb%3FComment1253118804257/1517:bb3f88a5da75cb04e55d63cfbb336ec0ea6d40c8&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090916163422" created="20090916163422" tags="comment" >
<pre>...and an analogous command for creating a bag from within TiddlyWiki is:
{{{
httpReq('PUT','http://0.0.0.0:8080/bags/foobar',null,null,null,'{"policy":{}}"','application/json');
}}}</pre>
</div>
<div title="adduser" server.title="adduser" server.page.revision="1065" server.etag="&quot;docs/adduser/1065:d06b72d9b38bd533b51a3b91c59cdf9609d83da1&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710151535" created="20090710151535" tags="twanager" >
<pre>A [[twanager]] command that adds a user to the [[store]], creating the user, setting their password and optionally setting their roles. If {{{adduser}}} is used again on the same username, the existing user is clobbered. To update an existing user use [[addrole]] and [[userpass]].

!Syntax
{{{
    twanager adduser &lt;username&gt; &lt;password&gt; [[role] [role] ...]
}}}

!Example
Create the user monkey with password oog, and roles tail and fruit.
{{{
    twanager adduser monkey oog tail fruit
}}}</pre>
</div>
<div title="pluginmaker" server.title="pluginmaker" server.page.revision="1282" server.etag="&quot;docs/pluginmaker/1282:c3de8ba4c4d0aa1e63d5e084a171bf660e2506f7&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206152239" created="20091206152239" tags="" >
<pre>The pluginmaker is a git repository which provides a template for creating new plugins. It doesn't have //all// the details but it has enough to get started.

See: http://github.com/tiddlyweb/pluginmaker/</pre>
</div>
<div title="cdent.livejournal.com" server.title="cdent.livejournal.com" server.page.revision="1117" server.etag="&quot;docs/cdent.livejournal.com/1117:ee7156d01d13f46a3914c595b550a57898036105&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090218134317" created="20090218134317" tags="" >
<pre>An [[OpenID]] of ChrisDent.</pre>
</div>
<div title="challenger" server.title="challenger" server.page.revision="2256" server.etag="&quot;docs/challenger/2256:e5600fdf02925cbe7a2c1eae5201d4e4395f37e3&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110222162915" created="20090323203344" tags="glossary component" >
<pre>Challengers are a subsystem of TiddlyWeb used for [[user]] [[authentication]]. 

TiddlyWeb currently includes support for simple username and password authentication against users stored in the [[store]]. Plugins provide other methods, including [[OpenID]].

Adding more challengers is straightforward. There is an example of using google auth in the code use to TiddlyWeb working on [[googleappengine]].

An [[instance]] of TiddlyWeb may be configured to use one or multiple challengers. A {{{GET}}} web request will automatically redirect to the challenger system when a constraint in a [[policy]] is not met.

Challengers are by design triggered only when unauthorized content is accessed but can be explicitly triggered by going to the {{{/challenge}}} URL on your installation.

See [[Auth Model]] for more information.
</pre>
</div>
<div title="util.write_utf8_file" server.title="util.write_utf8_file" server.page.revision="1495" server.etag="&quot;docs/util.write_utf8_file/1495:0df322dcc1e8ef0b23f35a0667c18b76497e519c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001115604" created="20091001115604" tags="pyapi" >
<pre>!!Description
Write a unicode string to disk, utf-8 encoded.

!!Parameters
* filename
* content

!!Returns
* void
</pre>
</div>
<div title="OverviewComment1278150956520" server.title="OverviewComment1278150956520" server.page.revision="1524" server.etag="&quot;comments/OverviewComment1278150956520/1524:083734b7acc7e8270ca2f55cc848e8de6afdd87b&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100703095559" created="20100703095559" tags="comment" daddy="Overview" root="Overview">
<pre>how it works?</pre>
</div>
<div title="bag" server.title="bag" server.page.revision="2148" server.etag="&quot;docs/bag/2148:501578473c0f7cd2b0a6bbcccc9fd95243cee7d5&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830211754" created="20090218153948" tags="glossary" >
<pre>A bag is a container of uniquely named [[tiddlers|tiddler]]. A bag can have rules for who can edit, delete or read the tiddlers in the bag. These rules are defined in a [[policy]].

A bag may also have a description field, containing text that describes the purpose of the bag or the meaning of the tiddlers contained within.

The combination of a bag's name and a tiddler's name creates the unique distinguishing name for a tiddler on a server.

You can create and manage bags through the [[HTTP API]] or with [[twanager]].

A bag does not actually contain tiddlers: it provides a domain tiddlers. To get the tiddlers associated with a bag a separate act is required.

See also [[What is a bag for?]].

!Attributes
; name
: The name of the bag.
; desc
: The description of the bag.
; policy
: The [[policy]] associated with the bag. The default policy allows anyone to do anything with the bag.
</pre>
</div>
<div title="comment_1242681971004" server.title="comment_1242681971004" server.page.revision="1559" server.etag="&quot;comments/comment_1242681971004/1559:e58b02b4fd28ec9146c789a32b504f3785024085&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090518212611" created="20090518212611" tags="comment" >
<pre>The comments plugin "knows" to save comment data to a bag called //comments// if you use the //tiddlyWebComments// macro in the [[ViewTemplate]]. As long as the //comments// bag is set to allow the {{{create}}} constraint, the comments will be saved to the server. If all the other bags restrict {{{write}}}, {{{create}}} and {{{delete}}} then you get the functionality of a read only collection of tiddlers, except for people being able to create new tiddlers.

What you don't get is the right UI. To get the right UI you need to adjust some config variables in a plugin of your choice. In this TiddlyWiki, that plugins is [[WorkspaceConfig]] which is a good convention to use. In there all of these are set:
{{{
config.options.chkAutoSave = true;
config.options.chkHttpReadOnly = true;
readOnly = true;
}}}
I'm not entirely sure which of those is required, or if all of them are, or what, but with that set, the {{{edit}}} links are not viewed, and things like {{{new tiddler}}} and {{{new journal}}} don't show.

Unfortunately when you add that plugin, it impacts anyone viewing the recipe, so what this site does to allow proper editing for the content is have a different recipe that is accessed by editors. That recipes differs from the main by adding another bag which also has a tiddler named WorkspaceConfig. That one sets the values for those config variables to allow editing. When the recipe is processed the first tiddler is clobbered by the second to the wiki ends up being writable.

I hope this made some sense. With some tweaking we can probably turn this into a good FAQ response itself. Another thing worth doing would be an explanation of the setup of this wiki.</pre>
</div>
<div title="Standard Operations" server.title="Standard Operations" server.page.revision="2203" server.etag="&quot;docs/Standard%20Operations/2203:15f865b42491d4ec3bee60eb22f526c995dc0aad&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100831004250" created="20100831000638" tags="" >
<pre>
As noted in [[Futures]] TiddlyWeb lacks tools and/or instructions for a number of administrative operations needed to run a TiddlyWeb setup that uses more than the default [[recipes|recipe]] or [[bags|bag]]. [[twanager]] provides a basic interface for creating such things but adjusting the details of [[policies|policy]] is cumbersome to say the least. Development beyond TiddlyWeb 1.2 will attempt to address some of these issues. In the meantime this tiddler will attempt to link to descriptions of ways to get things done. Please leave a comment if there was something you wanted to do that was too hard.

* [TBD] //help!//
</pre>
</div>
<div title="apache.py" server.title="apache.py" server.page.revision="1068" server.etag="&quot;docs/apache.py/1068:1e2d26467e9b526681d679158f0b9292ec5e12bb&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090421110246" created="20090218172258" tags="mounting" >
<pre>{{{apache.py}}} is a small python module that provides an interface between [[Apache|TiddlyWeb and Apache]] running [[mod_wsgi|Using Mod WSGI]] or [[mod_python|Using Mod Python]] and TiddlyWeb. It has one simple job: presenting a function called {{{application}}} with a [[WSGI]] signature to the [[Python]] interpreter in the Apache server.

{{{apache.py}}} is [[distributed with the TiddlyWeb tarball|http://tiddlyweb.peermore.com/dist]] or [[available from github|http://github.com/tiddlyweb/tiddlyweb/raw/master/apache.py]].</pre>
</div>
<div title="Using spawning" server.title="Using spawning" server.page.revision="1028" server.etag="&quot;docs/Using%20spawning/1028:a0fa4087a029acd7a6edf437c9c0e0f82613df4e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123112353" created="20090710135415" tags="plugin" >
<pre>"Spawning is a wsgi server which supports multiple processes, multiple threads, non-blocking HTTP io, and automatic graceful upgrading of code." -- [[pypi description of spawning|http://pypi.python.org/pypi/Spawning]]

TiddlyWeb can be run with spawning using a [[plugin]] called [[tiddlywebplugins.spawner|http://pypi.python.org/pypi/tiddlywebplugins.spawner]] that provides the {{{wsgi app factory}}} that spawning requires.
{{{
    spawn --factory=tiddlywebplugins.spawner.factory ''
}}}
No effort is made here to instruct you on how to install spwaning itself. Once you get past that point, all that's required is to create a TiddlyWeb [[instance]], install tiddlywebplugins.spawner, and run the above command (note the empty string argument). A server should start up.

//Note//: spawner is experimental and not fully featured, not all aspects of tiddlywebconfig are respected when the server starts, most importantly, server host and port settings. This will come. Please feel to make contributions to tiddlywebplugins.spawner if you find using TiddlyWeb with spawning an interesting thing.</pre>
</div>
<div title="Deleting Tiddlers" server.title="Deleting Tiddlers" server.page.revision="340" server.etag="&quot;docs/Deleting%20Tiddlers/340:17b06ca82a9d4342aaac9a6d11144af6834debfa&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090702173501" created="20090702173501" tags="howto" >
<pre>When [[deleting|HTTP API by method]] a [[tiddler]] in [[TiddlyWeb]], this by default (depending on the [[store]]) leaves no traces allowing the tiddler to be restored.

Such functionality (e.g. trash can / recycle bin) is to be handled at the application level.
Note that there are possible implications on [[access control|policy]] when moving tiddlers between bags. </pre>
</div>
<div title="WindowTitle" server.title="WindowTitle" server.page.revision="1061" server.etag="&quot;docs/WindowTitle/1061:e3ca8b533a309231d8a24cad42b70442a869971d&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100322151422" created="20100322151422" tags="meta" >
<pre>TiddlyWeb Documentation</pre>
</div>
<div title="Howtos" server.title="Howtos" server.page.revision="545" server.etag="&quot;docs/Howtos/545:05a2dfb2532ccb2ff72f4aaffb78cd2d607c6e8a&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090218173429" created="20090218170203" tags="" >
<pre>&lt;&lt;list filter [tag[howto]]&gt;&gt;</pre>
</div>
<div title="comment_1242816448025" server.title="comment_1242816448025" server.page.revision="1566" server.etag="&quot;comments/comment_1242816448025/1566:db74b9d65f1dd60f24d3d4470e34071f63d54e60&quot;" modifier="bekeller.livejournal.com" creator="bekeller.livejournal.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090520104729" created="20090520104729" tags="comment" >
<pre>It would be ok for me, if comments are stored in the same bag as the tiddler that they comment. Two questions:
1. How should I change the macro:
config.macros.tiddlyWebComments.handler =
  function(place,macroName,params,wikifier,paramString,tiddler) {
    paramString = "fields:'server.workspace:bags/comments' inheritedFields:'server.host,server.type'";
    config.macros.comments.handler(place,macroName,params,wikifier, paramString,tiddler);
  }
2. Is this the only place, where changes have to be made?

Thanks for your help

BTW: I hope the openID is working</pre>
</div>
<div title="HTTP APIComment1324849729096" server.title="HTTP APIComment1324849729096" server.page.revision="2285" server.etag="&quot;comments/HTTP%20APIComment1324849729096/2285:5e029812df318a5735723a6ce294747685c2d4f1&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20111225214850" created="20111225214850" tags="comment" daddy="HTTP API" root="HTTP API">
<pre></pre>
</div>
<div title="Group Writable Text Store" server.title="Group Writable Text Store" server.page.revision="444" server.etag="&quot;docs/Group%20Writable%20Text%20Store/444:1592c77e50b8478bd98a0729f1228e5fe10bec8c&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090712100324" created="20090218183915" tags="" >
<pre>//This information is only relevant to installations on filesystems that support unix style permissions and are using the built in text store.//

Sometimes you might like a group of users on a system to be able to edit the files in a [[store]], but not as only one user. To do this you can put all those users in the same group, make the store writable for that group, and cause the server to write files in a way that makes sure they are group writable. If these concepts are alien to you, this is probably not for you.

* change the group of the files in the store:
** {{{chgrp -R &lt;group&gt; store}}}
* make the store group writable:
** {{{chmod -R g+w store}}}
* make all the directories in the store setgid so files that are created in there belong to the right group
** {{{find store -type d | xargs chmod g+s}}}
* set the umask of the serving process by editing [[apache.py]] to include, near the top but below {{{import os}}}:
** {{{os.umask(0002)}}}</pre>
</div>
<div title="filter" server.title="filter" server.page.revision="2260" server.etag="&quot;docs/filter/2260:4cc64b13034188e51b2ec2c7bc69ade14f7e5527&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110223162545" created="20090427122321" tags="glossary v0.9.31" >
<pre>
The filter documentation has been moved to its own specific space at TiddlySpace: http://tweb-filters.tiddlyspace.com/

The information there is more correct (relative to modern TiddlyWeb code and conventions) than the information that had been here.

!See also
* [[How do I use only some tiddlers from a bag when making a recipe?]]
* [[How do I request only some tiddlers from a URL?]]</pre>
</div>
<div title="rep:html" server.title="rep:html" server.page.revision="1338" server.etag="&quot;docs/rep%3Ahtml/1338:e0a3cc8f7d8239ba858d6832a4cedc581ef30e20&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511130828" created="20090511130828" tags="" >
<pre>[[HTTP API]] ~URLs that return an HTML [[representation]].</pre>
</div>
<div title="HwikiTiddlers" server.title="HwikiTiddlers" server.page.revision="547" server.etag="&quot;docs/HwikiTiddlers/547:e74fac324d585c9aa65da1a27db12bafae437425&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090811094659" created="20090811094529" tags="excludeLists" >
<pre>[[TiddlyWeb Documentation]]
[[Downloads]]
[[Glossary]]
[[Howtos]]
[[Plugin List]]
[[FAQ]]
[[API]]
[[Login]]
[[Colophon]]
[[Known Issues]]</pre>
</div>
<div title="FeaturesComment1323832744269" server.title="FeaturesComment1323832744269" server.page.revision="2284" server.etag="&quot;comments/FeaturesComment1323832744269/2284:807e827dfbce33a474345ec3f04c8ccc5f0dba78&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20111214031908" created="20111214031908" tags="comment" daddy="Features" root="Features">
<pre>How security about this?</pre>
</div>
<div title="Retrieving a Bag" server.title="Retrieving a Bag" server.page.revision="814" server.etag="&quot;docs/Retrieving%20a%20Bag/814:fc61cb84e558e506674723400bd250cce19b95c8&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X GET -H 'Accept: application/json' \
	http://localhost:8080/bags/common
}}}</pre>
</div>
<div title="Installing TiddlyWeb" server.title="Installing TiddlyWeb" server.page.revision="2177" server.etag="&quot;docs/Installing%20TiddlyWeb/2177:5cfee43186de61f8ae57b82fc301526a4df526f3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830215433" created="20090331145451" tags="howto" >
<pre>TiddlyWeb is packaged as a collection of [[Python]] packages. As such there are a variety of ways to install it. The most straightforward way to install, if you are connected to the internet, is described here. There are other [[Installation Options]] which may be better suited to your situation. Also have a look at [[TiddlyWeb for the Impatient]].

The following instructions install TiddlyWebWiki, which provides the TiddlyWiki [[server side]]. These installation instructions will install both the tiddlywebwiki and tiddlyweb Python packages.

!! Requirements

# You need an operating system that has [[Python]] installed. TiddlyWeb has been tested on various versions of Linux, Mac OS X, Windows, Solaris (and other Unix-like systems) with Python 2.4, 2.5 and 2.6. Read [[download information for Python|http://www.python.org/download/]] if your system doesn't have Python installed.
# You need the Python tool called [[pip]]. Your system may already have it installed. If it does not, follow the links at [[pip]] for more information.
# Once you have {{{pip}}}, open a comand prompt and:
{{{
    $ sudo pip install -U setuptools
    $ sudo pip install -U tiddlywebwiki
}}}
If your system does not use {{{sudo}}}, leave that out. The above will install the tiddlywebwiki  package into Python's default location for libraries. It will also install two command line scripts called [[twanager]] and [[twinstance]].

If this installation process will not work for you, see the platform instructions below and [[Installation Options]].

Once TiddlyWeb is installed you can start [[using it|Using TiddlyWeb]].

!Instructions by Platform
* [[Installing on Ubuntu]]
* [[Installing on OS X]]
* [[Installing on Windows]]
* [[Installing on iPhone]]

!Instructions by Scenario
* [[Using CGI]] (without root access)
* [[Installing on CentOS Behind a Corporate Firewall]]
* [[Installing from a Bundle]]
</pre>
</div>
<div title="TiddlyWiki" server.title="TiddlyWiki" server.page.revision="947" server.etag="&quot;docs/TiddlyWiki/947:ee7830ecea56cb603ffbcd4a14a83fd8e77da882&quot;" modifier="cdent" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100507100349" created="20090217164320" tags="" >
<pre>TiddlyWiki is a wiki in a single HTML file, driven by javascript. It is very extensible with plugins, macros, and all sorts of interesting customizations.

* [[Home TiddlyWiki Web Site|http://www.tiddlywiki.com]]
* [[TiddlyWiki Documentation|http://www.tiddlywiki.org]]

TiddlyWeb can produce a TiddlyWiki from any collection of [[tiddlers|tiddler]] that it hosts.

</pre>
</div>
<div title="comment_1247904750044" server.title="comment_1247904750044" server.page.revision="1592" server.etag="&quot;comments/comment_1247904750044/1592:2da67a7981ef6deabbf66a5e15c964013933c838&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090718081231" created="20090718081231" tags="comment" >
<pre>On Ubuntu, the required package is called python-dev. (Might also need libc-dev.)</pre>
</div>
<div title="Reference Documentation" server.title="Reference Documentation" server.page.revision="793" server.etag="&quot;docs/Reference%20Documentation/793:055036e03b1a91a853624a9729d78b13ee54bd64&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001102316" created="20091001100202" tags="" >
<pre>!Installation
* Quick Start: [[TiddlyWeb for the Impatient]].
* More Details: [[Installing TiddlyWeb]].

!API
&lt;&lt;tiddler [[API]]&gt;&gt;
</pre>
</div>
<div title="twimport" server.title="twimport" server.page.revision="1614" server.etag="&quot;comments/twimport/1614:88965f513ff3ec5966ba600bd3399377df39382b&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100325122134" created="20091015095603" tags="twanager" >
<pre>//twimport// is a command to retrieve content from an HTTP or file URI and put that content into a bag named in the arguments.

It supports {{{.tiddler}}}, {{{.js}}} and {{{.recipe}}} files in the formats generally used by TiddlyWiki developers. It can also import a TiddlyWiki file that has an extension of {{{.wiki}}} or {{{.html}}}.

If a recipe or wiki file is retrieved, it will traverse the recipe and retrieve the tiddler and JavaScript resources referenced therein.

If the file type is not recognized it is imported as a single [[binary tiddler]].

This command is a very useful way to populate a [[TiddlyWebWiki]] [[instance]] with existing TiddlyWiki content.
</pre>
</div>
<div title="/bags/{bag_name}/tiddlers/{tiddler_title}/revisions" server.title="/bags/{bag_name}/tiddlers/{tiddler_title}/revisions" server.page.revision="197" server.etag="&quot;docs/%2Fbags%2F%7Bbag_name%7D%2Ftiddlers%2F%7Btiddler_title%7D%2Frevisions/197:2521cd46346ebac9e67a6a6f8e0d5ac81d911364&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001124559" created="20090511122228" tags="rep:json method:post rep:html rep:text httpapi method:get rep:wiki" >
<pre>!Resource
A list of [[revisions|revision]] associated with the named  [[tiddler]] contained by the named [[bag]].  The [[current user]] must pass the read [[constraint]] to see the revisions.

!Representations
; {{{text/plain}}}
: A linefeed separated list of tiddlers.
; {{{text/html}}}
: An HTML list of the revisions.
; {{{application/json}}}
: [[JSON]] representation of the tiddler revisions. See [[JSON tiddler]]. By default the included tiddlers are skinny, with a {{{revision}}} field. You [[can make them fat|How can I GET many tiddlers at once?]].
; {{{text/x-tiddlywiki}}}
: A [[TiddlyWiki]] representation of the revisions of this tiddler. At the moment this is not very useful because TiddlyWiki can only display one tiddler with the same title, and at the moment the tiddler it chooses to display is the one that is oldest. This will eventually be fixed. [[tiddlywebwiki]] is required.

!Methods
!! {{{GET}}}
Get the list of tiddler revisions.
!! {{{POST}}}
Import a [[JSON]] list of a fat tiddlers, as part of the rename process.

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/bags/docs/tiddlers/HTTP%20API/revisions</pre>
</div>
<div title="comment_1241940140984" server.title="comment_1241940140984" server.page.revision="1553" server.etag="&quot;comments/comment_1241940140984/1553:e86eb9d5e072f6d94fa2ccc66a4887f267c0a54d&quot;" modifier="KenGirard" creator="KenGirard" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090510071647" created="20090510071647" tags="comment" >
<pre>I think it is mostly people just checking to see if it does anything, as normal TWs don't save the comments.</pre>
</div>
<div title="TiddlyWeb for the Impatient" server.title="TiddlyWeb for the Impatient" server.page.revision="2179" server.etag="&quot;docs/TiddlyWeb%20for%20the%20Impatient/2179:526173068266e01cf09a9785904a696f4cb29357&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830220050" created="20090408145704" tags="" >
<pre>These instructions are based on a [[blog posting|http://cdent.tumblr.com/post/94180697/tiddlyweb-for-the-impatient]]. They assume that you are working in a POSIX-like environment (some form of Unix, e.g. Linux, OS X, FreeBSD, etc). If these instructions do not work for you see [[Installing TiddlyWeb]]. Note that these instructions use [[easy_install]] which is no longer the preferred way to install TiddlyWeb. [[pip]] is now preferred.

N.B: These instructions don't go into detail on how things work or why. If you need that information please follow the more detailed information at [[Installing TiddlyWeb]].

* {{{sudo easy_install -U tiddlywebwiki}}}
* {{{twinstance myname}}}
* {{{cd myname}}}
* {{{twanager server}}}

Then {{{open http://0.0.0.0:8080/recipes/default/tiddlers.wiki}}} or {{{xdg-open http://0.0.0.0:8080/recipes/default/tiddlers.wiki}}}. If you don't have one of those commands open your browser to the shown URL. In your browser you will now see a TiddlyWiki hosted on TiddlyWeb. When you make edits and additions they will be saved to the server.

For this to work you need a fairly modern system with Python and Python's {{{setuptools}}} installed.

Some people have reported that the second step fails reporting an ImportError. When this happens it means the first step did not fully install all the tiddlyweb dependencies, and you'll have to install them separately using easy_install. The ImportError will report what is missing. See [[Troubleshooting easy_install]].

''Note'' that {{{easy_install}}} is not the preferred package install tool for TiddlyWeb, [[pip]] is. {{{easy_install}}} is used here because it is more likely to be already present on a machine.
</pre>
</div>
<div title="twanager_plugins" server.title="twanager_plugins" server.page.revision="1460" server.etag="&quot;docs/twanager_plugins/1460:b73a1f149a51a00a786af408e504d5406aa8b25b&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831161647" created="20090323164832" tags="" >
<pre>A configuration item that can be set in [[tiddlywebconfig.py]]. It is a list of modules (as [[plugins]]) to be imported when [[twanager]] starts up. Each module must have a method called {{init}} which may {{{pass}}} . To add a method to the [[twanager]] command list use [[@make_command]].

See also: [[Twanager Model]].
</pre>
</div>
<div title="store" server.title="store" server.page.revision="1406" server.etag="&quot;docs/store/1406:6421efc9b2103d715412c6888a0b8e9c7e5ee6b6&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314151542" created="20090218154431" tags="glossary" >
<pre>A store is the TiddlyWeb name for the system that does persistent storage of [[recipe]], [[bag]], [[tiddler]], and [[user]] entities. A TiddlyWeb installation only directly uses one store per instance, but stores themself can use one or more other stores (see the [[diststore]] and [[multistore]] for some intriguing examples). The store used is determined by configuration of the [[instance]].
</pre>
</div>
<div title="content negotiation" server.title="content negotiation" server.page.revision="2188" server.etag="&quot;docs/content%20negotiation/2188:0a5bffd1c6cb5634e776fae03f50fe936d0f7223&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830222551" created="20090315212831" tags="" >
<pre>
[[Wikipedia|http://wikipedia.org]] says that [[content negotiation|http://en.wikipedia.org/wiki/Content_negotiation]]

&gt; is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource) at the same URI, so that user agents can specify which version fit their capabilities the best.

TiddlyWeb uses content negotiation to allow a user agent to declare which [[representation]] of a [[resource]] it prefers. Using the {{{Accept}}} header the user agent can declare that it wants a {{{text/plain}}}, {{{text/html}}}, {{{application/json}}} or {{{text/x-tiddlywiki}}} version of a resource (if available).

A user agent (often a person using a web browser) may also adjust the request URL to add an extension to simulate setting the {{{Accept}}} header. For example to get the plain text representation of a bag resource one might request:
{{{
GET /bags/mybag.txt
}}}
The default available extensions are:
* html to get {{{text/html}}}
* txt to get {{{text/plain}}}
* json to get {{{application/json}}}
TiddlyWebWiki adds:
* wiki to get {{{text/x-tiddlywiki}}}
Not all resources provide all representations. See the [[HTTP API]] for details.

Supported extensions can be extended by creating and configuration another [[serialization]].
</pre>
</div>
<div title="SQLAlchemy" server.title="SQLAlchemy" server.page.revision="818" server.etag="&quot;docs/SQLAlchemy/818:85e972c50b8ccb11e3041ad55f9353500f33aa1f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090604184956" created="20090604184953" tags="" >
<pre>&gt; SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.

http://www.sqlalchemy.org/</pre>
</div>
<div title="Theory of Operation" server.title="Theory of Operation" server.page.revision="861" server.etag="&quot;docs/Theory%20of%20Operation/861:8d72f0e1ac64c8021480569ebcee8b3ec9ca1115&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090325235234" created="20090323163656" tags="" >
<pre>TiddlyWeb is in some sense very simple: it's a place where things called tiddlers are stored. However, in order to achieve flexibility across many dimensions it can be fairly complex to use to its maximum capability. The tiddlers linked from this one attempt to explain how TiddlyWeb does what it does, providing an overview with links to more details.

* [[Server Startup Model]]
* [[Server Request Model]]
* [[Twanager Model]]
* [[Auth Model]]</pre>
</div>
<div title="Using Mod Python" server.title="Using Mod Python" server.page.revision="999" server.etag="&quot;docs/Using%20Mod%20Python/999:fc6179125907d1921748d29237f015f03c9f472f&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314183328" created="20090218171708" tags="mounting howto" >
<pre>
One way to use TiddlyWeb with [[Apache|TiddlyWeb and Apache]] is to [[mount]] it using the mod_python module. [[mod_wsgi|Using Mod WSGI]] is a better choice, but if you have to use mod_python you can set it up as follows:
# Install mod_python for your apache server if it is not already there. Instructions on how to do this are out of scope for TiddlyWeb. See http://www.modpython.org/ for more information
# If you don't have it, get and install the [[ModPythonGateway|http://www.aminus.net/wiki/ModPythonGateway]] according to the instructions on that page.
# Get [[apache.py]] and put it in your [[instance]] directory. That file includes information in the comments on how to modify your apache configuration and your [[tiddlywebconfig.py]].

!! Common Problems
* Make sure your apache is configured to support mod_python.
* Make sure any files paths you create or edit in the apache config are correct.
* If you are using the default text [[store]] make sure the {{{store}}} directory and all the files and directories within, including [[tiddlyweb.log]], are writable by the user or group by which the web server is running. See [[Group Writable Text Store]].
* Make sure you have set [[server_prefix]] and [[server_host]] correctly in [[tiddlywebconfig.py]].
</pre>
</div>
<div title="selector" server.title="selector" server.page.revision="1359" server.etag="&quot;docs/selector/1359:6dd993f7ee37aefd4cd72801381c5b3c04556382&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620123356" created="20090323175030" tags="glossary" >
<pre>selector is the [[WSGI]] application used to dispatch web requests to specific [[handler]] code in TiddlyWeb. It is configured by the [[urls.map]].

selector was written by Luke Arno. It is a nice piece of work: simple yet powerful, focusing on one specific task and doing that task well. There is a [[web page for selector|http://lukearno.com/projects/selector/]].</pre>
</div>
<div title="twinstance" server.title="twinstance" server.page.revision="1466" server.etag="&quot;docs/twinstance/1466:e3b5e66398b3b7e2adeeaf11ee6010af501a372c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314152655" created="20100314152655" tags="" >
<pre>{{{twinstance}}} is a command line tool included with TiddlyWebWiki that is used to create a new [[instance]]. It takes a single argument: the name of the directory in which you would like the new instance to be created. The tool creates that directory and places within a basic [[tiddlywebconfig.py]] file and populates a [[store]] with the basics need to get a hosted TiddlyWiki up and running.
</pre>
</div>
<div title="ToolbarCommands" server.title="ToolbarCommands" server.page.revision="2026" server.etag="&quot;tpc/ToolbarCommands/2026:2a691e516ebd4e69fdb7c4acefe11236c0f677e3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20091214112901" created="20090927212320" tags="excludeLists" >
<pre>|~ViewToolbar|serverlink revisions closeTiddler closeOthers +editTiddler &gt; fields syncing permalink references jump|
|~EditToolbar|+saveTiddler cancelTiddler deleteTiddler|</pre>
</div>
<div title="comment_1242728044928" server.title="comment_1242728044928" server.page.revision="1561" server.etag="&quot;comments/comment_1242728044928/1561:d4cb3348b4491397b44b5b4e6cc2c5202873a811&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090519081407" created="20090519081407" tags="comment" >
<pre>Ok. I tried out your proposal. I added a bagXedit and a corresponding recipe rbagXedit with bagXedit appended to the list of bags. bagX contains the WorkspaceConfig mentioned above and bagXedit contains an "undoing" WorkspaceConfig. Everything works, except: edited and created tiddlers go into bagXedit instead of bagX. If I change create- and write-access to ["NONE"], I get a "Error saving NeuTest: Forbidden". How did you solve this here on this site?</pre>
</div>
<div title="Features" server.title="Features" server.page.revision="403" server.etag="&quot;docs/Features/403:45d0cb65298475a87a0fb281218b008b702314e0&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314185346" created="20090630075812" tags="" >
<pre>As TiddlyWeb has developed, it has become increasingly difficult to give a concise description of what TiddlyWeb is and does and can do for you. It is far easier to list what it //has// rather than what it //does//. Part of the reason for this is that TiddlyWeb is [[lego|Lego Pieces Model]], a toolkit for getting stuff done. When you buy a screwdriver it doesn't say anything about what you're going to connect, just that you can. So here, in vaguely chronological order of development, is a list of TiddlyWeb features:

* [[HTTP API]] for manipulating [[tiddlers|tiddler]], [[bags|bag]] and [[recipes|recipe]].
* [[filter]] tiddlers with a pluggable/extensible syntax.
* Pluggable/extensible system for serializing and deserializing those entities to and from various formats using [[serializers|serializer]]. Associate the HTTP API with the serialization system via content negotiation.
* Pluggable/extensible system for [[storing|store]] entities to persistent storage.
* [[Mount|mount]] TiddlyWeb using a built in server or any WSGI capable web server.
* Pluggable/extensible [[WSGI]] middleware stack for [[server_request_filters]] and [[server_response_filters]].
* Unicode on the inside, ~UTF-8 on the outside.
* Tiddlers may be stored with revisions and edit conflict detection.
* Constraint based [[authorization]] system using [[policies|policy]] on bags and recipes.
* Pluggable/extensible [[authentication]] system using [[challengers|challenger]] and [[credentials extractors|credentials extractor]].
* A simple architecture for [[plugins|plugin]] that supports all this pluggability and extensibility.
* Any kind of content (any MIME type) may be stored in a tiddler, not just wikitext.
* Input (i.e. [[PUT|method:put]]) [[validation/sanitation|validator]].
* Server side rendering of wikitext to HTML.
* Pluggable/extensible [[rendering|wikitext renderer]] of different wikitext syntaxes.
* Generating dynamic TiddlyWiki files with a [[recipe cascade]].
* Import an existing TiddlyWiki into the system from the [[command line|twanager]] or a [[POST|method:post]] to [[a bag|/bags/{bag_name}]].



See [[plugins]] for examples of ways in which the pluggable/extensible things have been plugged and extended.
</pre>
</div>
<div title="Extending Configuration With Plugins" server.title="Extending Configuration With Plugins" server.page.revision="385" server.etag="&quot;docs/Extending%20Configuration%20With%20Plugins/385:ae164f513b46ba5ed645e32245ad66f194c35773&quot;" modifier="fnd.lewcid.org" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091202100413" created="20090312102700" tags="codeSnippets howto dev" >
<pre>For some plugins, it can be useful to automatically modify or extend the TiddlyWeb configuration. This can be achieved using an {{{init}}} function within the plugin module, which is passed the {{{config}}} variable.

For example, the following code automatically inserts the necesary configuration for the [[CSS serializer|http://svn.tiddlywiki.org/Trunk/contributors/FND/TiddlyWeb/plugins/css.py]]:
{{{
def init(config):
    # automatically extend configuration
    content_type = "text/css"
    config["extension_types"]["css"] = content_type
    config["serializers"][content_type] = [__name__, "text/css; charset=UTF-8"] })
}}}
(Note the use of {{{__name__}}} to refer to the plugin module itself.)</pre>
</div>
<div title="How can I GET many tiddlers at once?" server.title="How can I GET many tiddlers at once?" server.page.revision="471" server.etag="&quot;docs/How%20can%20I%20GET%20many%20tiddlers%20at%20once%3F/471:e9140569942d8bbe9b847ad71e669aa3d6fc3f99&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090502101731" created="20090502101610" tags="faq" >
<pre>There are times when you might wish to retrieve a collection of tiddlers, including all their metadata and text. TiddlyWeb supports doing this when retrieving the JSON representation of a collection of tiddlers. Compare the output of the following two ~URLs:

http://tiddlyweb.peermore.com/wiki/bags/system/tiddlers.json

http://tiddlyweb.peermore.com/wiki/bags/system/tiddlers.json?fat=1

The first gets everything but the text of a tiddler. The second gets everything including the text.

For the time being the {{{fat}}} parameter only works with the JSON [[serialization]].</pre>
</div>
<div title="Installing on iPhone" server.title="Installing on iPhone" server.page.revision="662" server.etag="&quot;docs/Installing%20on%20iPhone/662:c00360acfb8ac42e63f81d89e6271e0c779cb216&quot;" modifier="fnd.lewcid.org" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100313085950" created="20090809061155" tags="installation howto" creator="fnd">
<pre>This requires a jailbroken iPhone.
!Initial Setup
* install Python via Cydia
* install Setup Tools via Cydia
* install Subversion via Cydia
* install adv-cmds via Cydia
* upgrade Setup Tools and install [[pip]]: {{{$ easy_install -U setuptools pip}}}
* install TiddlyWeb: {{{$ pip install tiddlywebwiki}}}
* create instances directory: {{{mkdir /private/var/mobile/TiddlyWeb}}}
!Instance Setup
{{{
$ cd /private/var/mobile/TiddlyWeb/
$ twinstance myInstance
$ cd myInstance
$ nohup twanager server localhost 8080 &amp;&gt; tweb.log &amp;
}}}
!Accessing Instance
In Safari, open http://localhost:8080 or directly http://localhost:8080/recipes/default/tiddlers.wiki.
!Terminating Instance
{{{
$ ps aux | grep twanager | cut -d " " -f 2-8 # returns PID
$ kill &lt;PID&gt;
}}}
!Related Links
* [[original thread|http://groups.google.com/group/tiddlyweb/browse_thread/thread/8f07292b301a9713/23c1730317c6d258?#23c1730317c6d258]]
</pre>
</div>
<div title="comment_1249395721857" server.title="comment_1249395721857" server.page.revision="1594" server.etag="&quot;comments/comment_1249395721857/1594:33152e31dc205741b5b8d8608295d0f0d3540c08&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091018121437" created="20090804141927" tags="comment" >
<pre>Note: [[tiddlywebplugins.utils]] provides a {{{get_store}}} utility function which might be used for establishing the store.</pre>
</div>
<div title="WSGI" server.title="WSGI" server.page.revision="1031" server.etag="&quot;docs/WSGI/1031:056af9b5975c0e5529fb6e4cef31c6a5dda6c5a6&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620121914" created="20090218173043" tags="glossary" >
<pre>WSGI is "Web Server Gateway Interface"

The [[WSGI Wiki|http://www.wsgi.org/wsgi/What_is_WSGI]] says:

"It is a specification for web servers and application servers to communicate with web applications (though it can also be used for more than that). It is a Python standard, described in detail in [[PEP 333|http://www.python.org/dev/peps/pep-0333/]]."

WSGI is useful to TiddlyWeb for three reasons:
* It makes it easy to create web applications and services independent of the web server through which the services will run. This means it is easy to run simple servers for development and debugging as well as very powerful servers for high load situations.
* It makes it easy to layer web applications to add functionality that is decoupled.
* WSGI encourages the development of highly transparent services.

A WSGI application is identified by the signature of a function or class and the contract of its return value. A WSGI application is a {{{callable}}} that takes [[environ]] and [[start_response]] as arguments, returning an iterator.</pre>
</div>
<div title="How is this server put together?" server.title="How is this server put together?" server.page.revision="543" server.etag="&quot;docs/How%20is%20this%20server%20put%20together%3F/543:2f5c0035ad31ec5f87728e064fb7737e08d420f6&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091018122546" created="20090811120105" tags="" >
<pre>This server is (as far as the authors know) one of the more complicated TiddlyWeb (and TiddlyWebWiki) servers extant. While it's primary purpose is to be a storehouse for [[TiddlyWeb Documentation]], it is also a testbed for [[plugins]] and techniques for achieving a satisfying TiddlyWeb experience.

This content is generated from one of several TiddlyWeb [[instances|instance]] [[mounted|mount a server]] via [[mod_wsgi]] on a Xen virtual host. Mod WSGI daemon mode is used so that the TiddlyWeb is run under its own independent user.

Content is stored in SQLite, using the [[sqlstore]]. Performance is enhanced using the [[cachinghoster]] and [[caching-store]] plugins. These perform two very different but complementary function:

* caching-store, where possible, caches the TiddlyWeb entities which are persisted to the [[store]] in [[memcached]]. After a first request for an entity for the store, as long as the entity does not change, subsequent requests come from memcached. Under certain conditions this can save time as the time to get data from memcached can be faster than getting it from the persistent store. (//N.B: Under fairly light use conditions (like this server) the difference in time is negligible. In fact sometimes going to memcached can be ''slower''. We use it here for the sake of testing.//)
* cachinghoster caches the HTML file that is the wiki that is generated from a specific [[recipe]] and presents that wiki at the base url of the TiddlyWeb server. It performs a variety of heuristics to determine if it should:
** Tell the user-agent to continue using the copy it has in cache.
** Send the user-agent the static copy it has stored in its disk cache.
** Create the wiki anew by going to the store to get the required tiddlers (rewriting the cache in the process).

Because of weirdness with the way Apache handles '/' in the PATH_INFO part of urls, the [[pathinfohack]] plugin is used to make sure that [[tiddlers|tiddler]] with '/' in their titles can be loaded and saved.

The [[atom]] plugin provides Atom syndication feeds of any collection of tiddlers, including just one tiddler.

In addition to the editing (editing is available to [[authorized|authorization]] users) capability provided by the wiki [[serialization]], editing is also provided by the [[formeditor]] and [[tiddlyeditor]] plugins. These are accessible from the HTML representation of a single tiddler. Formeditor presents a simple {{{&lt;textarea&gt;}}} style form that allows the text of the tiddler to be edited. Tidddyeditor generates a TiddlyWiki containing the current tiddler plus those TiddlyWiki plugins required to do editing.

The [[hwiki]] plugin is used to provide a non-javascript representation of this wiki to provide enhanced accessibility and an entry point for search engines.

Within the generated TiddlyWiki, the MainMenu, PageTemplate, ViewTemplate and StyleSheet have all been updated to give a preferred look and feel. The TiddlyWiki plugins include with TiddlyWebWiki provide the required editing and saving functionality. The CommentsPlugin provides support for comments. [[twLink]] and [[FancyMissingPlugin]] are quick hacks to add a serverlink to the command bar and order the missing tiddlers list by number of references, respectively.</pre>
</div>
<div title="control.get_tiddlers_from_bag" server.title="control.get_tiddlers_from_bag" server.page.revision="2150" server.etag="&quot;docs/control.get_tiddlers_from_bag/2150:4c1a4f36f92a9e927421e1f3dbc91cf561169a6d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830212116" created="20091001113512" tags="deprecated pyapi" >
<pre>!!Description
Yield the tiddlers that are in this bag by calling {{{store.list_bag_tiddlers(bag)}}}. The tiddlers have //not// been read from the store. This method is ''deprecated'' in favor of interacting with the [[store]] directly.

!!Parameters
* [[bag]]

!!Returns
* Python generator yielding empty [[tiddler]] objects.

!!Example
{{{
    bag = Bag('somebag')
    bag = store.get(bag)
    for tiddler in control.get_tiddlers_from_bag(bag):
        tiddler = store.get(tiddler)
        print tiddler.title, tiddler.tags
}}}

!!Notes
</pre>
</div>
<div title="Using Mod WSGI" server.title="Using Mod WSGI" server.page.revision="2182" server.etag="&quot;docs/Using%20Mod%20WSGI/2182:7265aef198165ee752594ba561530f24d23829dd&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830221026" created="20090218182745" tags="mounting howto" >
<pre>If you wish to run TiddlyWeb with [[Apache|TiddlyWeb and Apache]] it is best [[mounted|mount]] with the mod_wsgi module. To do so:
# Install mod_wsgi for your apache server if it not already there. Instructions on how to do this are out of scope for TiddlyWeb. See http://code.google.com/p/modwsgi/ for more information.
# Get [[apache.py]] and put it in your [[instance]] directory. That file includes information in the comments on how to modify your apache configuration and your [[tiddlywebconfig.py]].

!! Comparing to [[mod_python|Using Mod Python]]
* mod_wsgi is faster and lighter than mod_python
* mod_wsgi can run in its own daemon process that can run as a user you specify, which can avoid lots of file permission confusion

!! Common Problems
* Make sure any files paths you create or edit in the apache config are correct.
* Make sure you have set [[server_prefix]] and [[server_host]] correctly in [[tiddlywebconfig.py]].
* If you wish to use the {{{http_basic}}} extractor with mod_wsgi you must configure {{{    WSGIPassAuthorization On}}} in your apache config where you have configured other WSGI settings.

TiddlySpace, TiddlyHoster and WikiData all run on mod wsgi setups.
</pre>
</div>
<div title="Installing on WindowsComment1258111050007" server.title="Installing on WindowsComment1258111050007" server.page.revision="1521" server.etag="&quot;comments/Installing%20on%20WindowsComment1258111050007/1521:8559fb6300d75d6e9e87a61ab759ef2d2f6bd233&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091113112234" created="20091113112234" tags="comment" >
<pre>Note that on Windows if using apache with mod-wsgi
the unix line WSGIScriptAlias /wiki /srv/tiddlyweb/sandbox/apache.py
becomes WSGIScriptAlias /wiki \srv\tiddlyweb\sandbox\apache.py

note the backslashes rather than forward slashes.</pre>
</div>
<div title="WikiData" server.title="WikiData" server.page.revision="2174" server.etag="&quot;docs/WikiData/2174:5ad771f1fe94640131657f002f1c6d3fbc978df5&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830214511" created="20100830214422" tags="" >
<pre>~Wiki-Data was the first large service created using TiddlyWeb and TiddlyWeb plugins.

It is hosted at http://www.wiki-data.com/ from which it provides a searchable database of business entity information.

One of the things that is interesting about ~Wiki-Data is that though it makes extensive use of tiddlers (there are over 350,000 of them) it does not use TiddlyWiki.</pre>
</div>
<div title="/recipes/{recipe_name}/tiddlers/{tiddler_title}/revisions/{revision}" server.title="/recipes/{recipe_name}/tiddlers/{tiddler_title}/revisions/{revision}" server.page.revision="243" server.etag="&quot;docs/%2Frecipes%2F%7Brecipe_name%7D%2Ftiddlers%2F%7Btiddler_title%7D%2Frevisions%2F%7Brevision%7D/243:b437fa12ee7ebf3c8392d03ba0a3f22259211778&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710143231" created="20090511123206" tags="rep:json rep:html method:get rep:text httpapi" >
<pre>!Resource
A single revision of [[tiddler]] produced by the named [[recipe]].  The [[current user]] must pass the read [[constraint]] on the bag to see the tiddler.

!Representations
; {{{text/plain}}}
: A text representation of the tiddler. See [[text tiddler]].
; {{{text/html}}}
: An HTML representation of the tiddler. See [[HTML tiddler]]. 
; {{{application/json}}}
: [[JSON]] representation of the tiddler. See [[JSON tiddler]].

!Methods
!! {{{GET}}}
Get the tiddler revision.

!Notes
[[/bags/{bag_name}/tiddlers/{tiddler_title}/revisions/{revision}]] is preferred as it always leads to the same revision.

!Example
http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers/HTTP%20API/revisions/19</pre>
</div>
<div title="comment_1245253406786" server.title="comment_1245253406786" server.page.revision="1575" server.etag="&quot;comments/comment_1245253406786/1575:3cd02fc296df6277a957fa342cd830df8f5f8b0c&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090617153954" created="20090617153954" tags="comment" >
<pre>does this replace 'debug_level'?
</pre>
</div>
<div title="comment_1247812910714" server.title="comment_1247812910714" server.page.revision="1591" server.etag="&quot;comments/comment_1247812910714/1591:5bf9a21d03f711055b783a4af5f7806846362c86&quot;" modifier="TonyChing" creator="TonyChing" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090717064151" created="20090717064151" tags="comment" >
<pre>Take TiddlyWebwiki to the iPod Touch
    spawned from this thread: http://groups.google.com/group/tiddlyweb/t/8f07292b301a9713?hl=en

Jailbreak your device to gain root access and run development tools on the device
    download the torrent seed or zip from http://blog.iphone-dev.org/
    check the checksum, example: $openssl sha1 ~/Desktop/redsn0w-mac_0.7.2.zip
    get the torrent, I used Transmission as the app to get the redsn0w
    once you get redsn0w install it, I used some instructions: http://www.iclarified.com/entry/index.php?enid=4305 and on YouTube
    Cydia will be installed on your device: http://cydia.saurik.com/ where you can install packages via Debian APT

Install the packages: openssh, mobile terminal, iPhone/Python, SetupTools, SQLite 3.x, vim, Backgrounder, screen
    You may have to install additional sources/repositories like BigBoss or Telesphoreo Tangelo to get some of the packages or apps
    to be on the safe side you might want to install most of the stuff from the Development and Scripting sections

Install using easy_install: TiddlyWeb and Tiddlywebwiki, sqlalchemy (if you're using a SQLite store),setup tools 6c9
    get root with alpine and change the root and mobile passwords. there are some howtos here: http://www.hackthatphone.com

Create an instance on your desktop
    follow this thread:http://groups.google.com/group/tiddlyweb/browse_thread/thread/a8532a32d181e937?hl=en#
    and test that it runs starting the server

Transfer the instance to your iphone
    you can use scp -r or Fugu or cyberduck to transfer files from your instance into your iphone
    run the server in mobile terminal and if you hold the Home button, the Backgrounder app should kick in and you can launch mobile Safari and enjoy Tiddlywebwiki in your pocket!

Hopefully that should do it
    share experiences and issues here: http://groups.google.com/group/tiddlyweb?hl=en
</pre>
</div>
<div title="instance" server.title="instance" server.page.revision="2181" server.etag="&quot;docs/instance/2181:d6e7b506484ab65522da712d92fad0779429f8f7&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830220523" created="20090218145408" tags="" >
<pre>In [[TiddlyWeb]], an instance is a single collection of data, the [[store]], with a (potentially empty) configuration. There can be any number of instances on any machine.

In most cases an instance is manifest in the filesystem as a directory containing the [[store]], [[tiddlywebconfig.py]] and any [[plugins]] used in the instance.

Instances are created in two ways:
* You intentionally create a new instance with an instancer tool, such as [[twinstance]]. See [[Create an Instance]] for an example.
* TiddlyWeb automatically creates an instance for you because you have run a command requiring one:
** Calling {{{twanager server}}} will start a server on the default port of 8080. The curent directory becomes an instance if it is not already.
** Running any [[twanager]] command which uses the store (e.g. {{{adduser}}}, {{{bag}}}) will cause the current directory to become an instance if it is not already.
</pre>
</div>
<div title="comment_1246612479087" server.title="comment_1246612479087" server.page.revision="1578" server.etag="&quot;comments/comment_1246612479087/1578:719c52faea244e0f06edb43f8b138b7ce9765695&quot;" modifier="fnd" creator="fnd" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090703095609" created="20090703095609" tags="comment" >
<pre>[[cdent.tumblr.com]] wrote:
&gt; How deletes work on the server-side is controlled by the store. At the moment all the stores that I know about delete the content irrevocably, but it would be reasonable for a store to soft-delete content, making it available for administrative undelete through some mechanism. Being able to do an undelete through the REST API would be confusing, but presumably possible.</pre>
</div>
<div title="Glossary" server.title="Glossary" server.page.revision="438" server.etag="&quot;docs/Glossary/438:39e4fd8b46e179f7a40a2057d0a6f4132e5589f7&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090218162304" created="20090218162304" tags="" >
<pre>&lt;&lt;list filter [tag[glossary]]&gt;&gt;</pre>
</div>
<div title="How do I add a user?" server.title="How do I add a user?" server.page.revision="483" server.etag="&quot;docs/How%20do%20I%20add%20a%20user%3F/483:8b5db50342ae1333bc0d0d8d4109d9a0e5d51f00&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331152959" created="20090331151312" tags="faq" >
<pre>You may add a [[User]] to the TiddlyWeb [[datastore]] from the command line using the [[twanager]] [[adduser]] command. See [[User]] and [[Auth Model]] for information on why you may want to. To create the user {{{barney}}} with password {{{dinosaur}}} and no roles:
{{{
twanager adduser barney dinosaur
}}}

See also:
* [[How do I give a user a role?]]
* [[How do I create or update a User object in code?]]</pre>
</div>
<div title="Where is the TiddlyWeb code?" server.title="Where is the TiddlyWeb code?" server.page.revision="1060" server.etag="&quot;docs/Where%20is%20the%20TiddlyWeb%20code%3F/1060:e250935a6118f02060a96fe615f1c3a961355780&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090712095905" created="20090223133932" tags="faq" >
<pre>The TiddlyWeb code is in the [[source repository]]. If you are planning to do some [[TiddlyWeb development|Developing With TiddlyWeb]] you'll want to check that out. If you are only wanting to install TiddlyWeb, see [[Installing TiddlyWeb]].</pre>
</div>
<div title="pathinfohack" server.title="pathinfohack" server.page.revision="1277" server.etag="&quot;docs/pathinfohack/1277:e0a2611d6fa95a8d505698f8b538923c3b118869&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123121357" created="20090511120058" tags="plugin" >
<pre>pathinfohack is a [[plugin]] which modifies the [[WSGI]] environment so the {{{PATH_INFO}}} does not decode %2F in things like tiddler titles. Some servers, notably Apache, decode %2F making '/' in the names of TiddlyWeb entities impossible. pathinfohack gets around this.

It is available via PyPI as [[tiddlywebplugins.pathinfohack|http://pypi.python.org/pypi/tiddlywebplugins.pathinfohack]].</pre>
</div>
<div title="Lego Pieces Model" server.title="Lego Pieces Model" server.page.revision="704" server.etag="&quot;docs/Lego%20Pieces%20Model/704:d89687cbe169c4db02e7b790882192db78300f3c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831171626" created="20090619202836" tags="" >
<pre>It may be useful to think of TiddlyWeb as a collection of pieces of Lego. Like Lego, there are types of pieces, some skinny, some fat, some curved, some straight, with different numbers of holes. And they all come in different colors. Similarly, in TiddlyWeb there are a small number of types of things, each of which comes in somewhat different forms. For most of these types it is possible for the administrator of a TiddlyWeb [[instance]] to add additional forms through configuration or [[plugins|plugin]].

In TiddlyWeb the types are:
* [[store]]
* [[serializer]]
* [[handler]]
* [[challenger]]
* [[extractor|credentials extractor]]
* [[validator]]
* [[filter]]
* [[middleware]]
* [[renderer]]
* [[twanager]] commands

Each of these parts can be extended to modify TiddlyWeb in ways simple or complicated. The individual pieces have simple behaviors, simple inputs and simple (as in easily described) outputs, but they can combine for complex behaviors. Much like a big box of black and white 2x6 Lego blocks, in the right hands, becomes an artistic masterpiece.
</pre>
</div>
<div title="Login" server.title="Login" server.page.revision="706" server.etag="&quot;docs/Login/706:7569bee036d108ac32cbeb5eaa77be1d97be1f2c&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090217205431" created="20090217205158" tags="" >
<pre>
If you have been granted access to edit this wiki you can login using the link below. If you think you should have access to edit but don't, see [[Getting Help]].

[[LOGIN|http://tiddlyweb.peermore.com/wiki/challenge]]</pre>
</div>
<div title="recipe cascadeComment1258664960251" server.title="recipe cascadeComment1258664960251" server.page.revision="1599" server.etag="&quot;comments/recipe%20cascadeComment1258664960251/1599:e9210a05ff35777f4c3d1f03f3e693b6029940bd&quot;" modifier="bekeller.livejournal.com" creator="bekeller.livejournal.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091119210925" created="20091119210925" tags="comment" >
<pre>A recipe with bags system, common, beat, abel. I have read-permission in the recipe and all bags and create- and write-permissions in the bag "beat". If I want to save a newly created tiddler in this recipe, I get forbidden. Isn't this a PUT request that should find the bag "beat" to put the tiddler in?</pre>
</div>
<div title="mselect" server.title="mselect" server.page.revision="2261" server.etag="&quot;docs/mselect/2261:7e7995b3c35216c503130fa8fbac25bfbaa5334a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110223163249" created="20090508204313" tags="plugin" >
<pre>mselect is a plugin that extends the [[filter]] syntax to allow a union of two or more select type filters in one filter step. This allows for union or multiple type selections. The following example will select those tiddlers which have tag {{{blog}}} OR tag {{{published}}} and then sort by {{{modified}}} time:
{{{
    mselect=tag:blog,tag:published;sort=-modified
}}}

It is available from PyPI as [[tiddlywebplugins.mselect|http://pypi.python.org/pypi/tiddlywebplugins.mselect]].</pre>
</div>
<div title="ServerSideSavingPlugin" server.title="ServerSideSavingPlugin" server.page.revision="2168" server.etag="&quot;system/ServerSideSavingPlugin/2168:109c5be8ecb9a9c069beb604d8d4174dd5bebee9&quot;" modifier="FND" creator="FND" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="20100830213215" created="20090217160717" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|ServerSideSavingPlugin|
|''Description''|server-side saving|
|''Author''|FND|
|''Version''|0.6.3|
|''Status''|stable|
|''Source''|http://svn.tiddlywiki.org/Trunk/association/plugins/ServerSideSavingPlugin.js|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.5.3|
|''Keywords''|serverSide|
!Notes
This plugin relies on a dedicated adaptor to be present.
The specific nature of this plugin depends on the respective server.
!Revision History
!!v0.1 (2008-11-24)
* initial release
!!v0.2 (2008-12-01)
* added support for local saving
!!v0.3 (2008-12-03)
* added Save to Web macro for manual synchronization
!!v0.4 (2009-01-15)
* removed ServerConfig dependency by detecting server type from the respective tiddlers
!!v0.5 (2009-08-25)
* raised CoreVersion to 2.5.3 to take advantage of core fixes
!!v0.6 (2010-04-21)
* added notification about cross-domain restrictions to ImportTiddlers
!To Do
* conflict detection/resolution
* rename to ServerLinkPlugin?
* document deletion/renaming convention
!Code
***/
//{{{
(function($) {

readOnly = false; //# enable editing over HTTP

var plugin = config.extensions.ServerSideSavingPlugin = {};

plugin.locale = {
	saved: "%0 saved successfully",
	saveError: "Error saving %0: %1",
	saveConflict: "Error saving %0: edit conflict",
	deleted: "Removed %0",
	deleteError: "Error removing %0: %1",
	deleteLocalError: "Error removing %0 locally",
	removedNotice: "This tiddler has been deleted.",
	connectionError: "connection could not be established",
	hostError: "Unable to import from this location due to cross-domain restrictions."
};

plugin.sync = function(tiddlers) {
	tiddlers = tiddlers &amp;&amp; tiddlers[0] ? tiddlers : store.getTiddlers();
	$.each(tiddlers, function(i, tiddler) {
		var changecount = parseInt(tiddler.fields.changecount, 10);
		if(tiddler.fields.deleted === "true" &amp;&amp; changecount === 1) {
			plugin.removeTiddler(tiddler);
		} else if(tiddler.isTouched() &amp;&amp; !tiddler.doNotSave() &amp;&amp;
				tiddler.getServerType() &amp;&amp; tiddler.fields["server.host"]) {
			delete tiddler.fields.deleted;
			plugin.saveTiddler(tiddler);
		}
	});
};

plugin.saveTiddler = function(tiddler) {
	try {
		var adaptor = this.getTiddlerServerAdaptor(tiddler);
	} catch(ex) {
		return false;
	}
	var context = {
		tiddler: tiddler,
		changecount: tiddler.fields.changecount,
		workspace: tiddler.fields["server.workspace"]
	};
	var serverTitle = tiddler.fields["server.title"]; // indicates renames
	if(!serverTitle) {
		tiddler.fields["server.title"] = tiddler.title;
	} else if(tiddler.title != serverTitle) {
		return adaptor.moveTiddler({ title: serverTitle },
			{ title: tiddler.title }, context, null, this.saveTiddlerCallback);
	}
	var req = adaptor.putTiddler(tiddler, context, {}, this.saveTiddlerCallback);
	return req ? tiddler : false;
};

plugin.saveTiddlerCallback = function(context, userParams) {
	var tiddler = context.tiddler;
	if(context.status) {
		if(tiddler.fields.changecount == context.changecount) { //# check for changes since save was triggered
			tiddler.clearChangeCount();
		} else if(tiddler.fields.changecount &gt; 0) {
			tiddler.fields.changecount -= context.changecount;
		}
		plugin.reportSuccess("saved", tiddler);
		store.setDirty(false);
	} else {
		if(context.httpStatus == 412) {
			plugin.reportFailure("saveConflict", tiddler);
		} else {
			plugin.reportFailure("saveError", tiddler, context);
		}
	}
};

plugin.removeTiddler = function(tiddler) {
	try {
		var adaptor = this.getTiddlerServerAdaptor(tiddler);
	} catch(ex) {
		return false;
	}
	context = { tiddler: tiddler };
	context.workspace = tiddler.fields["server.workspace"];
	var req = adaptor.deleteTiddler(tiddler, context, {}, this.removeTiddlerCallback);
	return req ? tiddler : false;
};

plugin.removeTiddlerCallback = function(context, userParams) {
	var tiddler = context.tiddler;
	if(context.status) {
		if(tiddler.fields.deleted === "true") {
			store.deleteTiddler(tiddler.title);
		} else {
			plugin.reportFailure("deleteLocalError", tiddler);
		}
		plugin.reportSuccess("deleted", tiddler);
		store.setDirty(false);
	} else {
		plugin.reportFailure("deleteError", tiddler, context);
	}
};

plugin.getTiddlerServerAdaptor = function(tiddler) { // XXX: rename?
	var type = tiddler.fields["server.type"] || config.defaultCustomFields["server.type"];
	return new config.adaptors[type]();
};

plugin.reportSuccess = function(msg, tiddler) {
	displayMessage(plugin.locale[msg].format([tiddler.title]));
};

plugin.reportFailure = function(msg, tiddler, context) {
	context = context || {};
	var desc = context.httpStatus ? context.statusText : plugin.locale.connectionError;
	displayMessage(plugin.locale[msg].format([tiddler.title, desc]));
};

config.macros.saveToWeb = { // XXX: hijack existing sync macro?
	locale: { // TODO: merge with plugin.locale?
		btnLabel: "save to web",
		btnTooltip: "synchronize changes",
		btnAccessKey: null
	},

	handler: function(place, macroName, params, wikifier, paramString, tiddler) {
		createTiddlyButton(place, this.locale.btnLabel, this.locale.btnTooltip,
			plugin.sync, null, null, this.locale.btnAccessKey);
	}
};

// hijack saveChanges to trigger remote saving
var _saveChanges = saveChanges;
saveChanges = function(onlyIfDirty, tiddlers) {
	if(window.location.protocol == "file:") {
		_saveChanges.apply(this, arguments);
	} else {
		plugin.sync(tiddlers);
	}
};

// override removeTiddler to flag tiddler as deleted -- XXX: use hijack to preserve compatibility?
TiddlyWiki.prototype.removeTiddler = function(title) { // XXX: should override deleteTiddler instance method?
	var tiddler = this.fetchTiddler(title);
	if(tiddler) {
		tiddler.tags = ["excludeLists", "excludeSearch", "excludeMissing"];
		tiddler.text = plugin.locale.removedNotice;
		tiddler.fields.deleted = "true"; // XXX: rename to removed/tiddlerRemoved?
		tiddler.fields.changecount = "1";
		this.notify(title, true);
		this.setDirty(true);
	}
};

// hijack ImportTiddlers wizard to handle cross-domain restrictions
var _onOpen = config.macros.importTiddlers.onOpen;
config.macros.importTiddlers.onOpen = function(ev) {
	var btn = $(resolveTarget(ev));
	var url = btn.closest(".wizard").find("input[name=txtPath]").val();
	if(window.location.protocol != "file:" &amp;&amp; url.indexOf("://") != -1) {
		var host = url.split("/")[2];
		var macro = config.macros.importTiddlers;
		if(host != window.location.host) {
			btn.text(macro.cancelLabel).attr("title", macro.cancelPrompt);
			btn[0].onclick = macro.onCancel;
			$('&lt;span class="status" /&gt;').text(plugin.locale.hostError).insertAfter(btn);
			return false;
		}
	}
	return _onOpen.apply(this, arguments);
};

})(jQuery);
//}}}</pre>
</div>
<div title="binary tiddler" server.title="binary tiddler" server.page.revision="1104" server.etag="&quot;docs/binary%20tiddler/1104:14718166beabd380d18409bb3408f32a92b1847d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091207101000" created="20091207101000" tags="" >
<pre>A binary tiddler is a way to store non-textual content (such as an image, an office document, an mp3) in TiddlyWeb so that it is accessible as a [[tiddler]]. When the tiddler is retrieved, if no specific content-type is requested  then the content will be delivered with the content-type with which it was stored. Thus, if an image is stored to a tiddler as image/png it will be displayed in the browser as an image when requested. If the {{{text/plain}}} or {{{application/json}}} content-types are requested, then the {{{text}}} field of the resulting output will be a base64 encoded version of the data.

See [[How can I use curl to create stuff in TiddlyWeb?]] for an explanation of how to PUT a binary tiddler to a TiddlyWeb server.</pre>
</div>
<div title="ETag" server.title="ETag" server.page.revision="376" server.etag="&quot;docs/ETag/376:c4fa8dbca2697ff4d093a45cafaeec3c7cb2a83a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409090847" created="20090409090532" tags="" >
<pre>Of the [[Etag Header|http://en.wikipedia.org/wiki/HTTP_ETag]] Wikipedia says:
&gt; An ETag (entity tag) is an HTTP response header returned by an HTTP/1.1 compliant web server used to determine change in content at a given URL. When a new HTTP response contains the same ETag as an older HTTP response, the contents are considered to be the same without further downloading. The header is useful for intermediary devices that perform caching, as well as for client web browsers that cache results. One method of generating the ETag is based on the last modified time of the file and the size of the file, another is using a checksum.

In TiddlyWeb an ETag header is produced when retrieving one or a collection of [[tiddlers|tiddler]]. That ETag is then used to do cache-validation or edit conflict handling. More details of how this works can be found in the [[HTTP specification|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19]].</pre>
</div>
<div title="DiffFormatter" server.title="DiffFormatter" server.page.revision="2166" server.etag="&quot;system/DiffFormatter/2166:65f7099fc9dd6d4711a7039e7b4dc1951143c572&quot;" modifier="FND" creator="MartinBudden" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="20100830213215" created="200909110000" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|DiffFormatter|
|''Description''|highlighting of text comparisons|
|''Author''|FND|
|''Version''|0.9.0|
|''Status''|beta|
|''Source''|http://svn.tiddlywiki.org/Trunk/contributors/FND/formatters/DiffFormatter.js|
|''CodeRepository''|http://svn.tiddlywiki.org/Trunk/contributors/FND/|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''Keywords''|formatting|
!Description
Highlights changes in a unified [[diff|http://en.wikipedia.org/wiki/Diff#Unified_format]].
!Notes
Based on Martin Budden's [[DiffFormatterPlugin|http://svn.tiddlywiki.org/Trunk/contributors/MartinBudden/formatters/DiffFormatterPlugin.js]].
!Usage
The formatter is applied to blocks wrapped in &lt;html&gt;&lt;code&gt;{{{diff{..}}}&lt;/code&gt;&lt;/html&gt; within tiddlers tagged with "diff".
!Revision History
!!v0.9 (2010-04-07)
* initial release; fork of DiffFormatterPlugin
!StyleSheet
.diff { white-space: pre; font-family: monospace; }
.diff ins, .diff del { display: block; text-decoration: none; }
.diff ins { background-color: #dfd; }
.diff del { background-color: #fdd; }
.diff .highlight { background-color: [[ColorPalette::SecondaryPale]]; }
!Code
***/
//{{{
(function() {

config.shadowTiddlers.StyleSheetDiffFormatter = store.getTiddlerText(tiddler.title + "##StyleSheet");
store.addNotification("StyleSheetDiffFormatter", refreshStyles);

var formatters = [{
		name: "diffWrapper",
		match: "^\\{\\{diff\\{\n", // XXX: suboptimal
		termRegExp: /(.*\}\}\})$/mg,
		handler: function(w) {
			var el = createTiddlyElement(w.output, "div", null, "diff");
			w.subWikifyTerm(el, this.termRegExp);
		}
	}, {
		name: "diffRange",
		match: "^(?:@@|[+\\-]{3}) ",
		lookaheadRegExp: /^(?:@@|[+\-]{3}) .*\n/mg,
		handler: function(w) {
			createTiddlyElement(w.output, "div", null, "highlight").
				innerHTML = "&amp;#8230;";
			this.lookaheadRegExp.lastIndex = w.matchStart;
			var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
			if(lookaheadMatch &amp;&amp; lookaheadMatch.index == w.matchStart) {
				w.nextMatch = this.lookaheadRegExp.lastIndex;
			}
		}
	}, {
		name: "diffAdded",
		match: "^\\+",
		termRegExp: /(\n)/mg,
		handler: function(w) {
			var el = createTiddlyElement(w.output, "ins", null, "added");
			w.subWikifyTerm(el, this.termRegExp);
		}
	}, {
		name: "diffRemoved",
		match: "^-",
		termRegExp: /(\n)/mg,
		handler: function(w) {
			var el = createTiddlyElement(w.output, "del", null, "removed");
			w.subWikifyTerm(el, this.termRegExp);
		}
	}
];

config.parsers.diffFormatter = new Formatter(formatters);
config.parsers.diffFormatter.format = "diff";
config.parsers.diffFormatter.formatTag = "diff";

})();
//}}}</pre>
</div>
<div title="sqlstore" server.title="sqlstore" server.page.revision="1402" server.etag="&quot;docs/sqlstore/1402:3c9e43211482c89c0be0f768b7b3935a616fcc04&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090604184604" created="20090604184604" tags="plugin" >
<pre>sqlstore provides an RDBMS-based StorageInterface implementation for TiddlyWeb using SQLAlchemy. By using SQLAlchemy, the same code can be used to store data in many different systems. Tested so far are:

* sqlite3
* Mysql
* PostgreSQL

The [[store]] has not been extensively tested in production yet, so you should be careful when using it with delicate data. If you have existing TiddlyWeb content that you would like to migrate to the sql store, you might investigate the [[migrate]] plugin.

The code, with instructions, can be [[found on github|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/sqlstore]].</pre>
</div>
<div title="TiddlyWeb DocumentationComment1262882638905" server.title="TiddlyWeb DocumentationComment1262882638905" server.page.revision="1526" server.etag="&quot;comments/TiddlyWeb%20DocumentationComment1262882638905/1526:e10a28f343f755262e1a43adedd7ab6fbc00a335&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100107164359" created="20100107164359" tags="comment" >
<pre>Can you explain what /diff returns and what are the querystring parameters please?</pre>
</div>
<div title="How do I use a serializer from plugin code?" server.title="How do I use a serializer from plugin code?" server.page.revision="2196" server.etag="&quot;docs/How%20do%20I%20use%20a%20serializer%20from%20plugin%20code%3F/2196:f40eb0e6c323104ba74c81f7ccd29a5aea8284e8&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830234447" created="20090331164248" tags="codeSnippets howto dev" >
<pre>@@merge with [[Serializing and Deserializing]]?@@

The following examples may be instructive. These examples assume the correct modules have been imported.

If you want to serialize a Tiddler object to [[JSON]] the code will look something like this, assuming {{{tiddler}}} is a fully populated [[tiddler]] object:
{{{
serializer = Serializer('json')
serializer.object = tiddler
json_string = serializer.to_string()
}}}

If you want to use a JSON string to populate a Tiddler object, you must first create an empty object and then fill it via the serializer:
{{{
serializer = Serializer('json')
tiddler = Tiddler(title)
serializer.object = tiddler
serializer.from_string(json_string)
}}}

The situation is similar for other entities.

Note that the string argument that is passed to the {{{Serializer}}} class identifies a Python module. First the {{{tiddlyweb.serializations}}} package is searched for a matching module, and then {{{sys.path}}}. For non-core serializations, this means that the input to {{{Serializer}}} may be a dotted module identifier, such as {{{tiddlywebwiki.serialization}}}.

See also:
* [[serializer]]
* [[SerializationInterface]]</pre>
</div>
<div title="My server has an internal IP, how can I reach my TiddlyWeb from outside?" server.title="My server has an internal IP, how can I reach my TiddlyWeb from outside?" server.page.revision="729" server.etag="&quot;docs/My%20server%20has%20an%20internal%20IP%2C%20how%20can%20I%20reach%20my%20TiddlyWeb%20from%20outside%3F/729:0c013c47fa11ef06be13068f2318c411ef3882bf&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090513144839" created="20090513144819" tags="faq" >
<pre>When using servers that are on an intranet or set up "in the cloud", such as on EC2, it is often the case that the hostname and IP number of the machine, internal to itself, is different from the hostname and IP number used to reach services on the machine from outside.

TiddlyWeb uses hostname and port number information to handle the creation of ~URLs in redirects and information used in the dynamically generated TiddlyWiki files for enabling save back to the server. To set these things adjust the [[server_host]] [[config]] setting in [[tiddlywebconfig.py]].

When you do this on a machine with different internal and external hostnames, you need to use the external hostname, however you may see errors such as
{{{
    socket.error: (99, 'Cannot assign requested address')
}}}
because the external hostname or IP number is not valid for the local interface. To get around this you need to add the external hostname as an alias for the local host. On Unix-like machines this means adding to {{{/etc/hosts}}}.</pre>
</div>
<div title="How do I make sure TiddlyWebAdaptor is up to date?" server.title="How do I make sure TiddlyWebAdaptor is up to date?" server.page.revision="510" server.etag="&quot;docs/How%20do%20I%20make%20sure%20TiddlyWebAdaptor%20is%20up%20to%20date%3F/510:25db6bd5f0d4d0d3967545e4f677bc0611953228&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091113072036" created="20090319150544" tags="faq" >
<pre>If you are using the TiddlyWebWiki configuration of TiddlyWeb, you can keep the required TiddlyWiki plugins up to date by using [[twanager]]'s {{{update}}} command.

This will request ServerSideSavingPlugin, TiddlyWebAdaptor and TiddlyWebConfig from the latest install of tiddlywebwiki and install them in the system bag (as determined by [[instance_tiddlers]]).</pre>
</div>
<div title="recipe cascade" server.title="recipe cascade" server.page.revision="2262" server.etag="&quot;docs/recipe%20cascade/2262:ed83b21016eca0fbcc4ad8f5c1b50cabdd4615f7&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110223163504" created="20090223204216" tags="glossary" >
<pre>A term used to describe the process by which a recipe is processed to result in one of the following:

* On a {{{GET}}} request: A list of tiddlers from one or more [[filtered|filter]] bags, wherein a [[tiddler]] with the same name found later in the processing will replace the earlier with the same name.
* On a {{{PUT}}} request: A bag to which this tiddler can be saved after processing the recipe in reverse, choosing the first bag+filter combination that will allow the tiddler into the bag.

This cascade process is similar to CSS inheritance or the way in which shadow tiddlers can be overridden in TiddlyWiki.</pre>
</div>
<div title="server_store" server.title="server_store" server.page.revision="1396" server.etag="&quot;docs/server_store/1396:37312030f19c7be4d4e43d518b4f686059bd6c51&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409093137" created="20090409093137" tags="config" >
<pre>{{{server_store}}} is a configuration item that controls which [[store]] this TiddlyWeb [[instance]] uses. The setting is a two item list.

The first element of the list is a string representing the name of a module which implements the [[StorageInterface]]. The module is first looked up in the {{{tiddlyweb.stores}}} package space and if not found there, {{{sys.path}}} is followed.

The second element of the list is a {{{dict}}} containing configuration needed by the store, for example paths or database names. The dict may be empty. It is also possible to use other, arbitrary, configuration elements.

The default setting for {{{server_store}}} is:
{{{
        'server_store': ['text', {'store_root': 'store'}],
}}}</pre>
</div>
<div title="recipeComment1321421625590" server.title="recipeComment1321421625590" server.page.revision="2281" server.etag="&quot;comments/recipeComment1321421625590/2281:9d85a74efbe07234cbf3476f53c8b3250455f96f&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20111116053345" created="20111116053345" tags="comment" daddy="recipe" root="recipe">
<pre>This makes no fucking sense whatsoever. What the fuck is wrong with you idiots?</pre>
</div>
<div title="recipe" server.title="recipe" server.page.revision="1330" server.etag="&quot;docs/recipe/1330:25b5685b0b5e9591b4f9effa900831b5b88fde5f&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314165435" created="20090218154142" tags="glossary" >
<pre>A recipe is an ordered list of [[bags|bag]] and [[filters|filter]] that generates a list of tiddlers.

They are used to create collections of [[tiddlers|tiddler]] with a set of data and content customized for a particular use case.

If processing a recipe finds more than one instance of a tiddler with the same name, the tiddler from the most recently processed [[bag]] is the recipe list is the one used. This process is called the [[recipe cascade]].

The exact storage or serialization format of a recipe is dependent on the [[store]] or [[serialization]] being used. Tools working with recipes that wish to be flexible should not rely on any format, but instead, where possible, work with recipe objects.

[[twanager]] provides a command line tool for creating recipes. As a special case, this tool uses the text serialization of a recipe as the input. That format looks like this:
{{{
    /bags/system/tiddlers?select=tag:systemConfig;sort=-modified
    /bags/common/tiddlers
}}}
That is: one line per bag/filter pair, with the optional filter represented as a URL query string. There is no upper limit on the number of bags that may be present in a recipe, but at some point a long list of bags will likely cause processing to be slow.

As a special case, recipe lists can act as templates. In the example below {{{ {{ user }} }}} is replaced by the name of the [[current user]].
{{{
    /bags/system/tiddlers
    /bags/{{ user }}/tiddlers
}}}
(This handling can be manipulated from [[plugin]] code. See the {{{_recipe_template}}} method in {{{tiddlyweb.control}}}.)


Recipes may be created and updated over the [[HTTP API]] at [[/recipes/{recipe_name}]].
</pre>
</div>
<div title="Getting Help" server.title="Getting Help" server.page.revision="437" server.etag="&quot;docs/Getting%20Help/437:91ad96c20ddb0f396775ba40529f2cc5e41e2423&quot;" modifier="fnd.lewcid.org" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100521060650" created="200902171034" tags="" >
<pre>If you are working with TiddlyWeb and have questions or suggestions you can post in the [[TiddlyWeb|http://groups.google.com/group/tiddlyweb]] [[mailing list]] or visit the [[#tiddlyweb|irc://irc.freenode.net/tiddlyweb]] IRC channel.

Please also search this wiki for help. If you can't find what you are looking for, or some information is incomplete, please leave a comment so we can improve the content.</pre>
</div>
<div title="recipe cascadeComment1258711426404" server.title="recipe cascadeComment1258711426404" server.page.revision="2201" server.etag="&quot;comments/recipe%20cascadeComment1258711426404/2201:0abee2e7415b14abc01129bb427fecc46ed27b21&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100830235947" created="20091120100346" tags="comment" >
<pre>I'm going to need more information from you to figure this one out. Can you post to the [[mailing list]] with a few more details. It's easier to hash things out there. I'll need to see the contents of the recipe, and relevant stuff from tiddlyweb.log surrounding the request that's not performing as you like. If you set 'log_level': 'DEBUG' in [[tiddlywebconfig.py]] that will provide more info. Thanks.</pre>
</div>
<div title="wikklytext" server.title="wikklytext" server.page.revision="1507" server.etag="&quot;docs/wikklytext/1507:6e4bd70c4577b009b3b0c90ab18fc417cc4bc590&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511175417" created="20090511131008" tags="" >
<pre>wikklytext is a Python library that provides a variety of tools for dealing with TiddlyWiki content. It is able to render wikitext to XML and HTML and run a serverside wiki which can store content in a TiddlyWiki file.

http://wikklytext.com/</pre>
</div>
<div title="comment_1247396922796" server.title="comment_1247396922796" server.page.revision="1588" server.etag="&quot;comments/comment_1247396922796/1588:4e92b25124279b97d34454d0fcb758364ef4d62a&quot;" modifier="fnd" creator="fnd" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090712110927" created="20090712110843" tags="comment" >
<pre>There's a [[thread|http://groups.google.com/group/tiddlyweb/t/b7c559c25b1390e4]] discussing how plugins can extend {{{urls.map}}} using [[selectors|selector]].</pre>
</div>
<div title="Resources" server.title="Resources" server.page.revision="797" server.etag="&quot;docs/Resources/797:04896f5c2a532bdfc84d04d79a9af9bbaf91704a&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314154220" created="20090722200151" tags="terminology" >
<pre>There are four basic types of //entities// in TiddlyWeb:
* [[tiddlers|tiddler]]
* [[bags|bag]]
* [[recipes|recipe]]
* [[users|user]]
Note: Since both bags and recipes represent collections of tiddlers, they are sometimes referred to as //containers//.

Each of these is a [[resource]] made available by the system through a variety of [[representations|representation]].

See also:
* [[Tidders, Bags and Recipes]]
</pre>
</div>
<div title="comment_1242371896349" server.title="comment_1242371896349" server.page.revision="1554" server.etag="&quot;comments/comment_1242371896349/1554:26bb8923576b0dc3a5be6426d87f550d7e79993a&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090515071817" created="20090515071817" tags="comment" >
<pre>If I have a bag1 in recipe1, how are the contraints in the policies of bag1 and recipe1 combined? Does a reader need read permission in both policies to see the tiddlers of bag1 in .../recipes/recipe1/tiddlers.wiki? Same for writer, creator, deleter, manager?</pre>
</div>
<div title="tiddler" server.title="tiddler" server.page.revision="1412" server.etag="&quot;docs/tiddler/1412:fa0a36836a45481b4cc51b505a94805c15c55808&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314154339" created="20090218153706" tags="glossary" >
<pre>A Tiddler is the fundamental piece of content in a TiddlyWiki. You are reading a Tiddler right now. A Tiddler can contain human readable content, data, or javascript code that makes up a plugin, macro or command.

In basic TiddlyWiki Tiddlers are limited to living in the one HTML file that makes up the TiddlyWiki. With TiddlyWeb Tiddlers have broader scope:
* They have their own unique URL on the web, which gives them option of travelling around the internet to be used by multiple people in different [[TiddlyWikis|TiddlyWiki]].
* They can contain any content at all. If you can represent it with a MIME type and a byte stream, you can put it in a tiddler in TiddlyWeb.
* They can be (re-)used in many contexts.
</pre>
</div>
<div title="TiddlySpace" server.title="TiddlySpace" server.page.revision="2156" server.etag="&quot;docs/TiddlySpace/2156:4ca6cfae0bc97014d285493a7af2c554b74a947c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830213153" created="20100830213133" tags="" >
<pre>TiddlySpace is a shared hosting system for people and teams wanting to create, modify and share content in [[TiddlyWikis|TiddlyWiki]].

See http://tiddlyspace.com/ for a free public TiddlySpace service.

See http://github.com/tiddlyspace/tiddlyspace for the code.</pre>
</div>
<div title="server_host" server.title="server_host" server.page.revision="1388" server.etag="&quot;docs/server_host/1388:e85c5945c889f28dab4a83e11ad80e637158ce7f&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091207102945" created="20090218180706" tags="" >
<pre>A configuration item that can be in [[tiddlywebconfig.py]]. It serves two purposes:
* It is used to start up the included server, if used, on a chosen host and port.
* It is used to properly create fully qualified ~URLs even when operating behind a proxy or on a private IP.

It is a {{{dict}}} with the following structure:

{{{
    'server_host': {
        'scheme': 'http', # or https
        'host': 'tiddlyweb.peermore.com', # or an IP number
        'port': '80', # or some other port. You must put port even if 80 or 443. This needs to be a string.
    }
}}}

The defaults are {{{http}}}, {{{'0.0.0.0'}}} and {{{'8080'}}}. If you are planning to access your TiddlyWeb server from machines other than the one the server is running on, you will need to update the host portion so it refers to an externally addressable hostname of IP.
</pre>
</div>
<div title="mailing list" server.title="mailing list" server.page.revision="1263" server.etag="&quot;docs/mailing%20list/1263:54b9fa2463f79c7b5e54061d9d002e6b4d674d3f&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="201005210607" created="20091120100419" tags="" >
<pre>We use Google Groups for discussions about all things TiddlyWeb:
http://groups.google.com/group/tiddlyweb</pre>
</div>
<div title="TiddlyWeb Documentation" server.title="TiddlyWeb Documentation" server.page.revision="2176" server.etag="&quot;docs/TiddlyWeb%20Documentation/2176:a76848f092783e26268de89df9c93e67456764ae&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830214814" created="20090218213212" tags="portal" >
<pre>[[TiddlyWeb]] is an [[open source|Open Source]] web-based storage system for [[tiddlers|tiddler]]. It provides a robust [[HTTP API]], making each record a directly addressable unit of micro-content. It operates, amongst other things, as a [[server side]] for TiddlyWiki.

Collections of tiddlers can be grouped in [[bags|bag]] which provide [[authorization]] and naming domains. Bags and [[filters|filter]] can be composed in [[recipes|recipe]] to create useful combinations of data, content and code.

TiddlyWeb is useful on its own as a data and content storage system, can be combined with TiddlyWebWiki to make a [[server side]] for TiddlyWiki, or can be used as a library for creating complex web applications such as TiddlySpace, TiddlyHoster or WikiData.

[[A lightning talk|http://europython09.blip.tv/file/2351416]] from ~EuroPython 2009 explains the basic proposition in five minutes.

If you are eager to try things out, see [[TiddlyWeb for the Impatient]].

&lt;&lt;tiddler [[Navigation]]&gt;&gt;

TiddlyWeb has a [[philosophy|Philosophy]] and opinions about how it does stuff. 
</pre>
</div>
<div title="How do I use only some tiddlers from a bag when making a recipe?" server.title="How do I use only some tiddlers from a bag when making a recipe?" server.page.revision="531" server.etag="&quot;docs/How%20do%20I%20use%20only%20some%20tiddlers%20from%20a%20bag%20when%20making%20a%20recipe%3F/531:c50f5acbc0741dca0aeb6e32129b4fbfc3b6c503&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090508200507" created="20090324124808" tags="v0.9.31 faq" >
<pre>A [[recipe]] is made up of a list of [[bags|bag]] and [[filters|filter]]. If no filter is used, all the tiddlers in the bag are included when processing the recipe. If a filter is used, only those tiddlers which match the filter are included from the bag.

Therefore, the way to use only some tiddlers from a bag is to provide a filter with the bag in the recipe definition.

!Examples
''Note'': These examples only work with the new syntax provided in TiddlyWeb v0.9.31 and beyond.

All the tiddlers with tag {{{blog}}} and tag {{{published}}} from bag {{{foo}}}:
{{{
    /bags/foo/tiddlers?select=tag:blog;select=tag:published
}}}

The ten most recently modified tiddlers from bag {{{bar}}}:
{{{
    /bags/bar/tiddlers?sort=-modified;limit=10
}}}</pre>
</div>
<div title="Mount a Server" server.title="Mount a Server" server.page.revision="727" server.etag="&quot;docs/Mount%20a%20Server/727:a3c9e36224d47fce7a46067f71d9ccfe2cdf2b1c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100325111411" created="20090318162128" tags="" >
<pre>A Tiddlyweb [[instance]] needs to be [[mounted|mount]] somewhere accessible over the web in order to be useful as a service. This means that some HTTP server needs to be configured to provide the bridge between incoming HTTP requests and TiddlyWeb code. There are a variety of ways to do this:

* [[Using CherryPy]]
* [[TiddlyWeb and Apache]]
* [[Using spawning]]
* [[Using gunicorn]]
* Other WSGI servers

If you have mounted TiddlyWeb in some way not documented here, please provide the information so others can benefit from what you've learned.
</pre>
</div>
<div title="UnaMesa" server.title="UnaMesa" server.page.revision="961" server.etag="&quot;docs/UnaMesa/961:96133699799ed9753979cafc6cadc3405da3b311&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314145755" created="20100314145755" tags="" >
<pre>http://unamesa.org/
</pre>
</div>
<div title="TiddlyWebComment1292242125996" server.title="TiddlyWebComment1292242125996" server.page.revision="2248" server.etag="&quot;comments/TiddlyWebComment1292242125996/2248:3220a967603b8c48726f9a9a43b2cec0c3bd6794&quot;" modifier="cdent.tumblr.com" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20101215120200" created="20101213120845" tags="excludeLists excludeSearch excludeMissing" daddy="TiddlyWeb" root="TiddlyWeb">
<pre>This tiddler has been deleted.</pre>
</div>
<div title="CommentsPlugin" server.title="CommentsPlugin" server.page.revision="2008" server.etag="&quot;tpc/CommentsPlugin/2008:4832ca8925dcb6b5fe4a3e57b46cc66558ca3f45&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20091214112914" created="20090826141638" tags="excludeLists systemConfig" >
<pre>/*
  TiddlyWiki Comments Plugin - Online demo at http://tiddlyguv.org/CommentsPlugin.html

  TODO:
  - Support Cascade comment delete when the top-level tiddler is deleted
  - Support more than one &lt; &lt;comments&gt; &gt; per tiddler. This will probably entail creating an invisible root tiddler to
    hold all the comments for a macro together. The user will need to provide an ID for this tiddler.
  - Don't use global "macro" var (use "macro" param a la jquery)

*/

/***
|Name|CommentsPlugin|
|Description|Macro for nested comments, where each comment is a separate tiddler.|
|Source|http://tiddlyguv.org/CommentsPlugin.html#CommentsPlugin|
|Documentation|http://tiddlyguv.org/CommentsPlugin.html#CommentsPluginInfo|
|Version|0.1|
|Author|Michael Mahemoff, Osmosoft|
|''License:''|[[BSD open source license]]|
|~CoreVersion|2.2|
***/

/*{{{*/
if(!version.extensions.CommentsPlugin) {

  version.extensions.CommentsPlugin = {installed:true};

  (function(plugin) {

  var cmacro = config.macros.comments = {

//##############################################################################
//# CONFIG
//##############################################################################

//################################################################################
//# MACRO INITIALISATION
//################################################################################

init: function() {
  var stylesheet = store.getTiddlerText(tiddler.title + "##StyleSheet");
  if (stylesheet) { // check necessary because it happens more than once for some reason
    config.shadowTiddlers["StyleSheetCommentsPlugin"] = stylesheet;
    store.addNotification("StyleSheetCommentsPlugin", refreshStyles);
  }
  if (!version.extensions.CommentsPlugin.retainViewTemplate) cmacro.enhanceViewTemplate();
},

enhanceViewTemplate: function() {
  var template = config.shadowTiddlers.ViewTemplate;
  if ((/commentBreadcrumb/g).test(template)) return; // already enhanced
  var TITLE_DIV = "&lt;div class='title' macro='view title'&gt;&lt;/div&gt;";
  var commentsDiv = "&lt;div class='commentBreadcrumb' macro='commentBreadcrumb'&gt;&lt;/div&gt;";
  config.shadowTiddlers.ViewTemplate = template.replace(TITLE_DIV,commentsDiv+"\n"+TITLE_DIV);
},

handler: function(place,macroName,params,wikifier,paramString,tiddler) {
  var macroParams = paramString.parseParams();
  var tiddlerParam = getParam(macroParams, "tiddler");
  tiddler = tiddlerParam ? store.getTiddler(tiddlerParam) : tiddler;
  if (!tiddler || !store.getTiddler(tiddler.title)) return;
  cmacro.buildCommentsArea(tiddler, place, macroParams);
  // cmacro.refreshCommentsFromRoot(story.getTiddler(tiddler.title).commentsEl, tiddler, macroParams);
  cmacro.refreshCommentsFromRoot(place.commentsEl, tiddler, macroParams);
},

//################################################################################
//# MACRO VIEW - RENDERING COMMENTS
//################################################################################

buildCommentsArea: function(rootTiddler, place, macroParams) {
  var commentsArea = createTiddlyElement(place, "div", null, "comments");
  var heading = getParam(macroParams, "heading");
  if (heading) createTiddlyElement(commentsArea, "h1", null, null, heading);
  var comments = createTiddlyElement(commentsArea, "div", null, "");
  place.commentsEl = comments;

  if (cmacro.editable(macroParams)) {
    var newCommentArea = createTiddlyElement(commentsArea, "div", null, "newCommentArea", "New comment:");
    cmacro.forceLoginIfRequired(params, newCommentArea, function() {
      var newCommentEl = cmacro.makeTextArea(newCommentArea, macroParams);
      // var addComment = createTiddlyElement(newCommentArea, "button", null, "addComment button", "Add Comment");
      var addComment = createTiddlyButton(newCommentArea, "Add Comment", null, function() {
        var comment = cmacro.createComment(newCommentEl.value, rootTiddler, macroParams); 
        newCommentEl.value = "";
        cmacro.refreshCommentsFromRoot(comments, rootTiddler, macroParams);
      }, "addComment button");
    });
  }

},


makeTextArea: function(container, macroParams) {
  var textArea = createTiddlyElement(container, "textarea");
  textArea.rows = getParam(macroParams, "textRows") || 4;
  textArea.cols = getParam(macroParams, "textCols") || 20;
  textArea.value = getParam(macroParams, "text") || "";
  return textArea;
},

refreshCommentsFromRoot: function(rootCommentsEl, rootTiddler, macroParams) {
  cmacro.treeifyComments(rootTiddler);
  cmacro.refreshComments(rootCommentsEl, rootTiddler, macroParams);
},

refreshComments: function(daddyCommentsEl, tiddler, macroParams) {
  // cmacro.log("refreshComments - root", rootCommentsEl, "daddy", daddyCommentsEl,
    // "tiddler ", tiddler, "macroParams ", macroParams);
  // cmacro.log("refreshComments", arguments);

  var commentsEl;
  if (tiddler.fields.daddy) {
    var commentEl = cmacro.buildCommentEl(daddyCommentsEl, tiddler, macroParams);
    daddyCommentsEl.appendChild(commentEl);
    commentsEl = commentEl.commentsEl;
  } else { // root element
    removeChildren(daddyCommentsEl);
    // refreshedEl = story.getTiddler(tiddler.title);
    commentsEl = daddyCommentsEl;
  }

  for (var child = tiddler.firstChild; child; child = child.next) {
     cmacro.refreshComments(commentsEl, child, macroParams);
  }

},

treeifyComments: function(rootTiddler) {

  var comments = cmacro.findCommentsFromRoot(rootTiddler);

  cmacro.forEach(comments, function(comment) {
    var prev = comment.fields.prev;
    var daddy = comment.fields.daddy;
    if (prev) {
      store.getTiddler(prev).next = comment;
    } else {
      store.getTiddler(daddy).firstChild = comment;
    }
  });

},

logComments: function(comments) {
  for (var i=0; i&lt;comments.length; i++) {
    var comment = comments[i];
  }
},

findCommentsFromRoot: function(rootTiddler) {
  var comments = [];
  store.forEachTiddler(function(title,tiddler) {
    if (tiddler.fields.root==rootTiddler.title) comments.push(tiddler);
  });
  return comments;
},

findChildren: function(daddyTiddler) {
  var comments = [];
  store.forEachTiddler(function(title,tiddler) {
    if (tiddler.fields.daddy==daddyTiddler.title) comments.push(tiddler);
  });
  return comments;
},

buildCommentEl: function(daddyCommentsEl, comment, macroParams) {

  // COMMENT ELEMENT
  var commentEl = document.createElement("div");
  commentEl.className = "comment";

  // HEADING &lt;- METAINFO AND DELETE
  var headingEl = createTiddlyElement(commentEl, "div", null, "heading");

  var metaInfoEl = createTiddlyElement(headingEl, "div", null, "commentTitle",  comment.modifier + '@' + comment.modified.formatString(getParam(macroParams,"dateFormat") || "DDD, MMM DDth, YYYY hh12:0mm:0ss am"));
  metaInfoEl.onclick = function() { 
    // story.closeAllTiddlers();
    story.displayTiddler("top", comment.title, null, true);
    // document.location.hash = "#" + comment.title;
  };

  var deleteEl = createTiddlyElement(headingEl, "div", null, "deleteComment", "X");
  deleteEl.onclick = function() {
    if (true || confirm("Delete this comment and all of its replies?")) {
      cmacro.deleteTiddlerAndDescendents(comment);
      commentEl.parentNode.removeChild(commentEl);
    }
  };

  // TEXT
  commentEl.text = createTiddlyElement(commentEl, "div", null, "commentText");
  wikify(comment.text, commentEl.text);

  // REPLY LINK
  if (cmacro.editable(macroParams)) {
    var replyLinkZone = createTiddlyElement(commentEl, "div", null, "replyLinkZone");
    var replyLink = createTiddlyElement(replyLinkZone, "span", null, "replyLink", "reply to this comment");
    replyLink.onclick = function() { cmacro.openReplyLink(comment, commentEl, replyLink, macroParams); };
  }

  // var clearance = createTiddlyElement(commentEl, "clearance", null, "clearance");
  // clearance.innerHTML = "&amp;nbsp;";

  // COMMENTS AREA
  commentEl.commentsEl = createTiddlyElement(commentEl, "div", null, "comments");

  // RETURN
  return commentEl;

},

openReplyLink: function(commentTiddler, commentEl, replyLink, macroParams) {
  if (commentEl.replyEl) {
    commentEl.replyEl.style.display = "block";
    return;
  }

  commentEl.replyEl = document.createElement("div");
  commentEl.replyEl.className = "reply";

  replyLink.style.display = "none";
  var newReplyHeading = createTiddlyElement(commentEl.replyEl, "div", null, "newReply");
  createTiddlyElement(newReplyHeading, "div", null, "newReplyLabel", "New Reply:");
  var closeNewReply = createTiddlyElement(newReplyHeading, "div", null, "closeNewReply", "close");
  closeNewReply.onclick = function() {
    commentEl.replyEl.style.display = "none";
    replyLink.style.display = "block";
  };

  cmacro.forceLoginIfRequired(params, commentEl.replyEl, function() {
    var replyText =  cmacro.makeTextArea(commentEl.replyEl, macroParams);
      var submitReply = createTiddlyButton(commentEl.replyEl, "Reply", null, function() {
        var newComment = cmacro.createComment(replyText.value, commentTiddler, macroParams);
        replyText.value = "";
        closeNewReply.onclick();
        cmacro.refreshComments(commentEl.commentsEl, newComment, macroParams);
      });
  });

  commentEl.insertBefore(commentEl.replyEl, commentEl.commentsEl);
},

//################################################################################
//# RELATIONSHIP MANAGEMENT
//#
//# Children are held in a singly linked list structure.
//#
//# The root tiddler (containing comments macro) and all of its comments have
//# one or more of the following custom fields:
//#   - daddy: title of parent tiddler ("parent" is already used in DOM, hence "daddy")
//#   - firstchild: title of first child
//#   - nextchild: title of next child in the list (ie its sibling). New comments are always
//#     appended to the list of siblings at the end, if it exists.
//#
//# Iff daddy is undefined, this is the root in the hierarchy (ie it's the thing that the 
//# comments are about)
//# Iff firstchild is undefined, this tiddler has no children
//# Iff nextchild is undefined, this tiddler is the most 
//#
//# Incidentally, the only redundancy with this structure is with "daddy" field. This field exists only
//# to give the comment some context in isolation. It's redundant as it could be derived
//# from inspecting all tiddlers' firstchild and nextchild properties. However, 
//# that would be exceedingly slow, especially where the tiddlers live on a server.
//#
//################################################################################

createComment: function(text, daddy, macroParams) {

  var rootTitle = daddy.fields.root ? daddy.fields.root : daddy.title;
    // second case is the situation where daddy *is* root
  var newComment = cmacro.createCommentTiddler(macroParams, rootTitle);
  var fieldsParam = getParam(macroParams, "fields") || "";
  var fields = fieldsParam.decodeHashMap();
  var inheritedFields = (getParam(macroParams, "inheritedFields") || "").split(",");
  cmacro.forEach(inheritedFields, function(field) {
    if (field!="") fields[field] = daddy.fields[field];
  });
  var tagsParam = getParam(macroParams, "tags") || "comment";
  var now = new Date();
  newComment.set(null, text, config.options.txtUserName, now, tagsParam.split(","), now, fields);

  var youngestSibling = cmacro.findYoungestChild(daddy)
  if (youngestSibling) newComment.fields.prev = youngestSibling.title;
  newComment.fields.daddy = daddy.title;
  newComment.fields.root = rootTitle;

  cmacro.saveTiddler(newComment.title);
  autoSaveChanges(false);
  return newComment;
},

findYoungestChild: function(daddy) {

  var siblingCount = 0;
  var elderSiblings = cmacro.mapize(cmacro.selectTiddlers(function(tiddler) {
    isChild = (tiddler.fields.daddy==daddy.title);
    if (isChild) siblingCount++;
    return isChild;
  }));
  if (!siblingCount) return null;

  // Find the only sibling that doesn't have a prev pointing at it
  var youngestSiblings = cmacro.clone(elderSiblings) // as a starting point
  cmacro.forEachMap(elderSiblings, function(tiddler) {
    delete youngestSiblings[tiddler.fields.prev];
  });

  for (title in youngestSiblings) { return youngestSiblings[title]; }

},

// The recursive delete is run by a separate function (nested inside
// this one, for encapsulation purposes).
deleteTiddlerAndDescendents: function(tiddler) {

  function deleteRecursively(tiddler) {
    for (var child = tiddler.firstChild; child; child = child.next) {
      deleteRecursively(child);
    }
    store.removeTiddler(tiddler.title);
  }

  cmacro.treeifyComments(store.getTiddler(tiddler.fields.root));

  // save some info prior to deleting
  var prev = tiddler.fields.prev;
  var next = tiddler.next;

  deleteRecursively(tiddler);

  // used saved info
  if (next) {
    next.fields.prev = prev;
    cmacro.saveTiddler(next.title);
  }

  autoSaveChanges(false);

},

//##############################################################################
//# COLLECTION CLOSURES
//##############################################################################

forEach: function(list, visitor) { for (var i=0; i&lt;list.length; i++) visitor(list[i]); },
forEachMap: function(map, visitor) { for (var key in map) visitor(map[key]); },
select: function(list, selector) { 
  var selection = [];
  cmacro.forEach(list, function(currentItem) {
    if (selector(currentItem)) { selection.push(currentItem); }
  });
  return selection;
},
selectTiddlers: function(selector) { 
  var tiddlers = [];
  store.forEachTiddler(function(title, tiddler) {
    var wanted = selector(tiddler);
    if (wanted) tiddlers.push(tiddler);
  });
  return tiddlers;
},
map: function(list, mapper) { 
  var mapped = [];
  cmacro.forEach(list, function(currentItem) { mapped.push(mapper(currentItem)); });
  return mapped;
},
remove: function(list, unwantedItem) {
  return cmacro.select(list,
        function(currentItem) { return currentItem!=unwantedItem; });
},
mapize: function(tiddlerList) {
  var map = {};
  cmacro.forEach(tiddlerList, function(tiddler) { map[tiddler.title] = tiddler; });
  return map;
},
clone: function(map) { return merge({}, map); },

//##############################################################################
//# PARAMS
//##############################################################################

editable: function(params) {
  var editable = getParam(params, "editable");
  return (!editable || editable!="false");
},

needsLogin: function(params) {
  var loginCheck = getParam(params, "loginCheck");
  return loginCheck &amp;&amp; !window[loginCheck]();
},

forceLoginIfRequired: function(params, loginPromptContainer, authenticatedBlock) {
  if (cmacro.needsLogin(params)) wikify("&lt;&lt;"+getParam(macroParams, "loginPrompt")+"&gt;&gt;", loginPromptContainer);
  else authenticatedBlock();
},

//##############################################################################
//# GENERAL UTILS
//##############################################################################

mergeReadOnly: function(first, second) {
  var merged = {};
  for (var field in first) { merged[field] = first[field]; }
  for (var field in second) { merged[field] = second[field]; }
  return merged;
},

// callers may replace this with their own ID generation algorithm
createCommentTiddler: function(macroParams, rootTitle) {
  // var titleFormat = getParam(macroParams, "titleFormat") || "%root%Comment"; 
  var prefix = rootTitle+"Comment"; // was "_comment"
  if (!store.createGuidTiddler) return store.createTiddler(prefix+((new Date()).getTime()));
  return store.createGuidTiddler(prefix);
},
saveTiddler: function(tiddler) {
  var tiddler = (typeof(tiddler)=="string") ? store.getTiddler(tiddler) : tiddler; 
  store.saveTiddler(tiddler.title, tiddler.title, tiddler.text, tiddler.modifier, tiddler.modified, tiddler.tags, cmacro.mergeReadOnly(config.defaultCustomFields, tiddler.fields), false, tiddler.created)
},
log: function() { if (console &amp;&amp; console.firebug) console.log.apply(console, arguments); },
assert: function() { if (console &amp;&amp; console.firebug) console.assert.apply(console, arguments); },

//##############################################################################
//# TIDDLYWIKI UTILS
//##############################################################################

copyFields: function(fromTiddler, toTiddler, field1, field2, fieldN) {
  for (var i=2; i&lt;arguments.length; i++) {
    fieldKey = arguments[i];
    if (fromTiddler.fields[fieldKey]) toTiddler.fields[fieldKey] = fromTiddler.fields[fieldKey];
  }
}
}

config.macros.commentsCount = {
  handler: function(place,macroName,params,wikifier,paramString,tiddler) {
    var rootTiddler = paramString.length ? paramString : tiddler.title;
    var count = config.macros.comments.findCommentsFromRoot(store.getTiddler(rootTiddler)).length;
    createTiddlyText( place, count);
//    createTiddlyElement(place, "span", null, "commentCount", count);
  }
},

config.macros.commentBreadcrumb = {
  handler: function(place,macroName,params,wikifier,paramString,tiddler) {
    if (!tiddler.fields.root) return;
    var rootLink = createTiddlyElement(place, "span", null, null);
    createTiddlyLink(rootLink, tiddler.fields.root, true);

    var rootIsParent = tiddler.fields.daddy==tiddler.fields.root;
    var rootIsGrandparent = (store.getTiddler(tiddler.fields.daddy)).fields.daddy==tiddler.fields.root;

    if (!rootIsParent) {
      if (!rootIsGrandparent) createTiddlyElement(place, "span", null, null, " &gt; ... ");
      createTiddlyElement(place, "span", null, null, " &gt; ");
      var daddyLink = createTiddlyElement(place, "span", null, null);
      createTiddlyLink(daddyLink, tiddler.fields.daddy, true);
    }

    createTiddlyElement(place, "span", null, null, " &gt; ");

    // place.appendChild(createTiddlyLink(tiddler.fields.root));
  }
}

config.macros.tiddlyWebComments = {};
config.macros.tiddlyWebComments.handler =
  function(place,macroName,params,wikifier,paramString,tiddler) {
    paramString = "fields:'server.workspace:bags/comments' inheritedFields:'server.host,server.type'";
    config.macros.comments.handler(place,macroName,params,wikifier, paramString,tiddler);
  };

function log() { if (console &amp;&amp; console.firebug) console.log.apply(console, arguments); }

})(version.extensions.CommentsPlugin);

//################################################################################
//# CUSTOM STYLESHEET
//################################################################################

/***
!StyleSheet

.comments h1 { margin-bottom: 0; padding-bottom: 0; }
.comments { padding: 0; }
.comment .comments { margin-left: 1em; }

.comment { padding: 0; margin: 1em 0 0; }
.comment .comment { margin 0; }
.comment .toolbar .button { border: 0; color: #9a4; }
.comment .heading { background: [[ColorPalette::PrimaryPale]]; color: [[ColorPalette::PrimaryDark]]; border-bottom: 1px solid [[ColorPalette::PrimaryLight]]; border-right: 1px solid [[ColorPalette::PrimaryLight]]; padding: 0.5em; height: 1.3em; }
.commentTitle { float: left; }
.commentTitle:hover { text-decoration: underline; cursor: pointer; }
.commentText { clear: both; padding: 1em 1em; }
.deleteComment { float: right; cursor: pointer; text-decoration:underline; color:[[ColorPalette::SecondaryDark]]; padding-right: 0.3em; }
.comment .reply { margin-left: 1em; }
.comment .replyLink { color:[[ColorPalette::SecondaryDark]]; font-style: italic; 
                     cursor: pointer; text-decoration: underline; margin: 0 1em; }
.comment .created { }
.comment .newReply { color:[[ColorPalette::SecondaryDark]]; margin-top: 1em; }
.newReplyLabel { float: left; }
.closeNewReply { cursor: pointer; float: right; text-decoration: underline; }
.comments textarea { width: 100%; padding: 0.3em; margin-bottom: 0.6em; }
.newCommentArea { margin-top: 0.5em; }

.clearance { clear: both; }


!(end of StyleSheet)

***/

  config.macros.comments.init();

} // end of 'install only once'
/*}}}*/

// function log() { if (console &amp;&amp; console.firebug) console.log.apply(console, arguments); }</pre>
</div>
<div title="wsgi_intercept" server.title="wsgi_intercept" server.page.revision="1511" server.etag="&quot;docs/wsgi_intercept/1511:2eaa6ddb7144bd90ca4e878be9e2871f0994b91f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="200907131552" created="20090408214243" tags="" >
<pre>[[wsgi_intercept|http://pypi.python.org/pypi/wsgi_intercept]] is a Python library that makes it possible to test WSGI applications without actually running a web server. This makes testing much simpler. Since TiddlyWeb's primary purpose is to provide an [[HTTP API]] it's useful to have simple HTTP tests.</pre>
</div>
<div title="HTTP API" server.title="HTTP API" server.page.revision="2183" server.etag="&quot;docs/HTTP%20API/2183:0fbace3cca2322ac9543e2a6b2ede403c2dda828&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830221413" created="20090315212313" tags="" >
<pre>The TiddlyWeb HTTP API provides access to resources hosted by the TiddlyWeb [[store]]. The API strives to adhere to the principles of [[REST]] where possible and pragmatic: using reasonable caching headers; only using the default HTTP verbs; providing multiple representations through pseudo-[[content negotiation]]; presenting resources as nouns, not verbs.

The HTTP API works through a collection of default ~URLs defined by a [[urls.map]]. The map can be modified or extended with [[plugins]] or entirely replaced via [[tiddlywebconfig.py]]. The HTTP API is found at a ~URL base defined by [[server_prefix]], which defaults to the empty string; therefore, for {{{root}}} below the full URL would be {{{/}}}. If server_prefix were set to {{{/wiki}}} then {{{bags}}} would be {{{/wiki/bags}}}.

''Note that in TiddlyWeb there are no resources that end with "/"'' (except for / itself).

The HTTP API provides access to resources hosted by TiddlyWeb. The [[resources|resource]] are listed below, follow the links for descriptions, ~URLs, available [[representations|representation]] and other information:

* [[root|/]]
* [[bags|/bags]]
* [[recipes|/recipes]]
* [[bag|/bags/{bag_name}]]
* [[recipe|/recipes/{recipe_name}]]
* [[tiddlers in bag|/bags/{bag_name}/tiddlers]]
* [[tiddlers in recipe|/recipes/{recipe_name}/tiddlers]]
* [[tiddler in bag|/bags/{bag_name}/tiddlers/{tiddler_title}]]
* [[tiddler in recipe|/recipes/{recipe_name}/tiddlers/{tiddler_title}]]
* [[tiddler revisions|/bags/{bag_name}/tiddlers/{tiddler_title}/revisions]]
* [[tiddler revision|/bags/{bag_name}/tiddlers/{tiddler_title}/revisions/{revision}]]
* [[search|/search]]

* [[HTTP API by method]]
* [[HTTP API by representation]]

There are also ~URLs associated with the [[challenger]] system, but these are not directly a part of the HTTP API (nor are they standard).

Each resource supports set of default representations, plus any additional representations provided by [[serializers|serializer]] installed via [[plugins]].
</pre>
</div>
<div title="comment_1246730332628" server.title="comment_1246730332628" server.page.revision="1580" server.etag="&quot;comments/comment_1246730332628/1580:2b8aafd8fcec5717d276cbfc514d64c80502aa2e&quot;" modifier="cdent.tumblr.com" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100131124423" created="20090704175854" tags="comment" creator="GUEST">
<pre>Note for non-programmers; Not all distributions (e.g., pclinuxos) include libpython-devel in their main python installs (the package that contains some of the needed directories and files for easy_install to work).  If you get a message that easy_install didn't find something, check your repositories for this package and install it if it wasn't previously installed.

''Do not use easy_install if you intend to use tiddywebplugins. Use [[pip]] instead.''</pre>
</div>
<div title="resource" server.title="resource" server.page.revision="1349" server.etag="&quot;docs/resource/1349:9e140077fff8c1cff51ceb89c050e4b58e66f32e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314155212" created="20100314153751" tags="glossary" >
<pre>In [[REST]] a resource is an entity which is made available by the system, perhaps in a variety of [[representations|representation]]. In HTTP, resources are identified by URIs and accessed via URLs. In TiddlyWeb there are four single entity [[resources|Resources]] and several resources which represent collections of those entities.
</pre>
</div>
<div title="Overview" server.title="Overview" server.page.revision="752" server.etag="&quot;docs/Overview/752:1c48495cda3225f1962dad8889c20da461d6ce13&quot;" modifier="cdent.tumblr.com" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314175718" created="200902171025" tags="" >
<pre>When used as a TiddlyWiki [[server side]], TiddlyWeb lets you:
# Store your [[tiddlers|tiddler]] and similar chunks of content on the web.
# Display and edit your tiddlers in more than one TiddlyWiki.
# Have more than one person working on the same TiddlyWiki at the same time.
# Create dynamic [[TiddlyWiki]]s based on rules you define.
# Create new and interesting server-based TiddlyWiki applications.

TiddlyWeb can also be used as simple framework for storing and presenting tiddler-like chunks of content.

TiddlyWeb is made up of a few things:
# A web server. See [[Mount a Server]].
# A data [[store]].
# A configuration. See [[tiddlywebconfig.py]].
# A command line tool. See [[twanager]].

Together these things are your [[lego|Lego Pieces Model]] to make lots of great stuff.

!! Or to Put it another Way

TiddlyWeb is a collection of [[Python]] code providing several services:
# It acts as a [[server side]] for TiddlyWiki, providing (optionally) [[authenticated|authentication]] storage of any content, including TiddlyWiki content and dynamic generation of custom wikis.
# It presents a robust [[HTTP API]] for manipulating [[resources|resource]] in the store and an extensible system for presenting those resources in multiple [[representations|representation]].
# It provides a [[library of routines|Python API]] and a framework for creating web-based applications based on TiddlyWeb and (optionally) TiddlyWiki.
# It can act as a database for any content you wish to store on the web.
# It is extensible, pluggable, customizable on many dimensions.
# It is a reference [[HTTP API]] for other servers that wish to interact efficiently with the TiddlyWiki Adaptor mechanism.
</pre>
</div>
<div title="comment_1238402957717" server.title="comment_1238402957717" server.page.revision="1541" server.etag="&quot;comments/comment_1238402957717/1541:102394451510c18e1c51f01624f89d148ee62f61&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090330084924" created="20090330084924" tags="comment" >
<pre>The HTTP API documentation covers getting a list of bags and recipes, but not creation. How can the API be used to create bags and recipes?</pre>
</div>
<div title="ChrisDent" server.title="ChrisDent" server.page.revision="301" server.etag="&quot;docs/ChrisDent/301:6befbb373e2d14c2d2b733cb5f6d862d37752ff3&quot;" modifier="cdent.tumblr.com" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100313145305" created="200902171000" tags="people" >
<pre>[[Chris Dent]] is the original author of TiddlyWeb. See [[Credits]] for more about that.

* [[blog|http://cdent.tumblr.com/]]
* [[personal website|http://www.burningchrome.com/]]
* [[company website|http://peermore.com/]]
</pre>
</div>
<div title="Troubleshooting easy_install" server.title="Troubleshooting easy_install" server.page.revision="2180" server.etag="&quot;docs/Troubleshooting%20easy_install/2180:9725f1a893a76b955d9f4f6207b19d95f548ab49&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830220244" created="20090218145040" tags="" creator="cdent.livejournal.com">
<pre>
''Do not use easy_install. If you intend to keep on with TiddlyWeb use [[pip]] instead.''

If you are unable to resolve installation issues, try [[Getting Help]]

</pre>
</div>
<div title="gzipper" server.title="gzipper" server.page.revision="1236" server.etag="&quot;docs/gzipper/1236:b4dc20e6cbc8b135393c0c7f3418777505aa6a66&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090520121246" created="20090520121246" tags="plugin" >
<pre>gzipper is TiddlyWeb plugin providing [[WSGI]] middleware for compressing web responses with gzip if the requesting user-agent supports it. In some situations this can speed up the apparent responsiveness of the system at the cost of some CPU use on both sides of the transaction. When sending text based content like a TiddlyWiki, the level of compression can be significant.

If compression is desired for a TiddlyWeb instance, using compression support from the hosting web server (e.g. Apache) is probably better than using gzipper. However if you are using the built in server, gzipper will do the job. Use it by adding {{{gzipper}}} to [[system_plugins]] in [[tiddlywebconfig.py]].

The plugin code can be found at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/gzipper]].</pre>
</div>
<div title="Storing a Bag" server.title="Storing a Bag" server.page.revision="850" server.etag="&quot;docs/Storing%20a%20Bag/850:a4d6fd2e6359c3ced62e6fbf889ba0da389f27cd&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X PUT -H 'Content-Type: application/json' \
	-d '{ "desc": "lorem ipsum", "policy": { "read": [], "write": ["ANY"], "create": ["ANY"], "delete": ["NONE"], "manage": ["R:ADMIN"], "accept": ["R:ADMIN"], "owner": "administrator" } }' \
	http://localhost:8080/bags/Alpha
}}}</pre>
</div>
<div title="comment_1247725546994" server.title="comment_1247725546994" server.page.revision="1589" server.etag="&quot;comments/comment_1247725546994/1589:71025e15f7b4f9b0af439b6d1a5f099168df9b02&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090716062547" created="20090716062547" tags="comment" >
<pre></pre>
</div>
<div title="serializers" server.title="serializers" server.page.revision="1380" server.etag="&quot;docs/serializers/1380:0cffc108f931603bd747105c30b2b49c5afe6c42&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710104405" created="20090323202224" tags="component" >
<pre>Moved to [[serializer]].</pre>
</div>
<div title="recipeComment1322859526437" server.title="recipeComment1322859526437" server.page.revision="2282" server.etag="&quot;comments/recipeComment1322859526437/2282:0335f1507d0bac037cf5f80b56f27ee938ae285e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20111202205847" created="20111202205847" tags="comment" daddy="recipeComment1321421625590" root="recipe">
<pre>Thanks for your help!</pre>
</div>
<div title="CustomTracker" server.title="CustomTracker" server.page.revision="2274" server.etag="&quot;tpc/CustomTracker/2274:5ed7d0c4df3a7727290230cabe00a53b11d9ead7&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20110708173533" created="20090615120649" tags="excludeLists systemConfig" >
<pre>{{{
try {
var pageTracker = _gat._getTracker("UA-5027473-6");
pageTracker._trackPageview();
} catch(err) {}

// CustomTracker as a namespace for tracking related functions
var CustomTracker = {
// store a reference to the original displayTiddler function
displayTiddler: story.displayTiddler
};

CustomTracker.track = function() {
if (readOnly) {
try {
    pageTracker._trackPageview(arguments);
} catch(err) {}
}
};

CustomTracker.trackAndDisplayTiddler = function(srcElement, titles) {
// log with the tracker
CustomTracker.track('/wiki/' + titles);
// call the original displayTiddler function
return CustomTracker.displayTiddler.apply(this,arguments);
};

// replace the default displayTiddler function with a tracking version
story.displayTiddler = CustomTracker.trackAndDisplayTiddler;

// Call once for the initial page load
CustomTracker.track();
}}}</pre>
</div>
<div title="DevWishes" server.title="DevWishes" server.page.revision="350" server.etag="&quot;docs/DevWishes/350:25eceaf003d8c4fc6201ed0f5ecd1431ed950b6a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100323104319" created="20091208100919" tags="" >
<pre>These are notes about things it would be nice to do to the code to make it easier for developers to either understand or work with. It's also a place to put things worth remembering related to development, but otherwise difficult to categorize. See also: [[Known Issues]] and [[Warts]].

!!!HTMLPresenter

Despite my ([[cdent]]) [[hopes|http://cdent.tumblr.com/post/47954625/wsgi-down-your-pipe]], HTMLPresenter is just kind of messy and awkward. Not necessarily in concept but in implementation. The code is hard to test and fiddly to extend. However since it is middleware, it should be easy to fix.

!!!tiddlyweb.web.handler.tiddler

Is too long and has methods that are too long.

!!!tiddlyweb.web.handler

The root page is too static and too lame.

!!!duplication in recipe and bag handling

A lot of the code for handling web requests for recipes and bags (themselves, not the tiddlers) is very similar. Some of this has been corrected in [[1.1.x]].

!!!tiddlyweb.config

It //might// make sense for config to be a class, not a dict.

!!!wsgiref.validate

TiddlyWeb does not pass wsgiref.validate, because it prefers for applications to return an iterator that has a close() method on it. Generators have these, but lists do not. TiddlyWeb currently returns lists. Switching to generators as much as possible would be wise but may not be wise prior to 1.0
</pre>
</div>
<div title="methodhack" server.title="methodhack" server.page.revision="1266" server.etag="&quot;docs/methodhack/1266:f05f66f2ae240ffb0c3a159e95ed1940a765c768&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090930140552" created="20090511120953" tags="troubleshooting plugin" >
<pre>A plugin which enables support for handling "tunneled" HTTP methods.

Some browsers are unable to perform PUT or DELETE. In these situations it is necessary to send a POST request and tunnel the desired method through a HTTP header ({{{X-HTTP-Method}}}) or URL query ({{{http_method}}}) parameter. Client side changes are required to do this.

{{{methodhack}}} provides serverside [[WSGI]] middleware to process the tunneling.

Find it at: http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/methodhack</pre>
</div>
<div title="twanager bag" server.title="twanager bag" server.page.revision="1457" server.etag="&quot;docs/twanager%20bag/1457:c460f3a1664713aa3950e69148bc751f56e5e3d2&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090713160701" created="20090713160648" tags="twanager" >
<pre>{{{bag}}} is a [[twanager]] command that is used to create a [[bag]] from the command line. See [[How do I set or edit a bag policy?]].

If you want to create a bag with the default policy, and you are a POSIX platform, you can:
{{{
    twanager bag &lt;bagname&gt; &lt;/dev/null
}}}
Replacing {{{&lt;bagname&gt;}}} with the name of the bag.</pre>
</div>
<div title="Known Issues" server.title="Known Issues" server.page.revision="690" server.etag="&quot;docs/Known%20Issues/690:5536468e91e5255b804718c6cc6add2c9ab7adab&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100323103458" created="20090328183036" tags="" >
<pre>
An incomplete list of known problems present in TiddlyWeb. These may be bugs, misfeatures, missing features, or designed in behaviors that are unexpected.

* When using some web servers you may not use '/' in the name of a [[tiddler]]. It works with some. For those where it does not work the [[pathinfohack]] may help.
* When using '/' at the start of a tiddler title, links in the [[HTML representation|HTML tiddler]] may not work.
* Policy management is just too hard. There need to be tools to get people over the hump. At the moment, for novices understanding how to adjust a policy for  desired result is too complex, and then once understanding of what's desired is achieved, implementing it is additionally complex.

See also [[Warts]] and DevWishes.
</pre>
</div>
<div title="Creating Entities In the Store" server.title="Creating Entities In the Store" server.page.revision="2195" server.etag="&quot;docs/Creating%20Entities%20In%20the%20Store/2195:5e50c4bd6808e557bb3ab8f9712338ac8d959b05&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830234155" created="20091125132723" tags="codeSnippets howto dev" >
<pre>{{{
from tiddlyweb.model.tiddler import Tiddler
from tiddlyweb.model.bag import Bag
from tiddlyweb.store import Store


environ = {}
store = Store("text", {"store_root": "data"}, environ)

bag = Bag("Foo")
bag.desc = "lorem ipsum"
bag.policy.read = ['ANY']
bag.policy.write = ['R:ADMIN']
store.put(bag)

tiddler = Tiddler("Bar", bag="Foo")
tiddler.modifier = "FND"
tiddler.text = "dolor sit amet"
store.put(tiddler)
}}}
''N.B.:'' Store creation can be simplified via the {{{get_store}}} function in [[tiddlywebplugins.utils]].</pre>
</div>
<div title="vertical" server.title="vertical" server.page.revision="1503" server.etag="&quot;docs/vertical/1503:acc2d33da13c16474fd8c19ef3405f74fc6bbe5b&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323203703" created="20090323203644" tags="" >
<pre>A vertical (sometimes called "adaptation") is a variant of [[TiddlyWeb]] created for a specific purpose.

Verticals usually consist of a certain configuration, set of plugins and/or client-side functionality.</pre>
</div>
<div title="cdent" server.title="cdent" server.page.revision="1116" server.etag="&quot;docs/cdent/1116:7db3c83d50d3b196a33682db259a73ef088b8118&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331125241" created="20090331125157" tags="" >
<pre>[[Chris Dent's|ChrisDent]] usual handle for email, irc, etc.</pre>
</div>
<div title="serialization" server.title="serialization" server.page.revision="1364" server.etag="&quot;docs/serialization/1364:028751acc865369df69c6096656c2eec833387b8&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314154537" created="20090323201543" tags="component" >
<pre>A serialization is the [[representation]] of a data structure in a particular format.

In the context of [[TiddlyWeb]], this means exposing [[tiddlers|tiddler]] in a variety of ways using [[serializers|serializer]].
</pre>
</div>
<div title="Distinguishing Server and Twanager Plugins" server.title="Distinguishing Server and Twanager Plugins" server.page.revision="371" server.etag="&quot;docs/Distinguishing%20Server%20and%20Twanager%20Plugins/371:a3181bfff7aa6a19e5c8632cee50a339d85176cc&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100205031654" created="20090915194706" tags="codeSnippets howto dev" creator="fnd.lewcid.org">
<pre>Some plugins are meant to be both server and twanager extensions.

If the plugin initialization needs to distinguish between these cases, the following check can be used:
{{{
def init(config):
    if 'selector' in config:
        # server
    else:
        # twanager
}}}</pre>
</div>
<div title="OpenID" server.title="OpenID" server.page.revision="2255" server.etag="&quot;docs/OpenID/2255:c0f1ea50433ed5d14a3ed10d2ee96bc47fa09263&quot;" modifier="cdent.tumblr.com" creator="burningchrome.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110222162125" created="20090331121401" tags="" >
<pre>Wikipedia [[says|http://en.wikipedia.org/wiki/Openid]]:
&gt; OpenID is an open, decentralized standard for user authentication and access control, allowing users to log onto many services with the same digital identity.

In TiddlyWeb, OpenID is available as a plugin: [[tiddlywebplugins.openid2|http://pypi.python.org/pypi/tiddlywebplugins.openid2]]. There used to be OpenID support built in, but it was so basic and so frequently broken that it has been removed in favor of the more correct plugin.
</pre>
</div>
<div title="plugin" server.title="plugin" server.page.revision="1281" server.etag="&quot;docs/plugin/1281:4615ffb538b6ccbf86a7c3679ddacd89830185d2&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090223203613" created="20090223203516" tags="" >
<pre>An extension to TiddlyWeb that is not part of the core distribution. Useful for customizing or adding behavior.

See: [[Plugin List]] and [[Customizing TiddlyWeb]]</pre>
</div>
<div title="Retrieving Tiddlers From Store" server.title="Retrieving Tiddlers From Store" server.page.revision="2197" server.etag="&quot;docs/Retrieving%20Tiddlers%20From%20Store/2197:6dea9d347d29ad7ba348d3d9bfd746a27bc6a2a4&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830234845" created="20090422091136" tags="codeSnippets howto dev" >
<pre>In code that is called via web request you can use code like the below to retrieve a [[tiddler]] from the [[store]]. The [[Server Request Model]] establishes a store reference named {{{tiddlyweb.store}}} in the [[environ]].
{{{
from tiddlyweb.model.tiddler import Tiddler

store = environ['tiddlyweb.store']

tiddler = Tiddler(title, bag)
tiddler.revision = revision # N.B.: revision 0 is HEAD
tiddler = store.get(tiddler)
}}}

When the code is not initiated by a web request, the caller must establish the store.
{{{
from tiddlyweb.store import Store
from tiddlyweb.config import config

store = Store(config['server_store'][0], config['server_store'][1], environ={})
}}}

!Retrieving Tiddlers From Bag or Recipe
{{{
from tiddlyweb.model.bag import Bag
from tiddlyweb.model.recipe import Recipe
from tiddlyweb.store import Store
from tiddlyweb import control
from tiddlyweb.config import config


# set up environment
env = { 'tiddlyweb.config': config }
store = Store(config['server_store'][0], env)

# retrieve tiddlers from bag
bag_name = 'foo'
bag = Bag(bag_name)
bag = store.get(bag)
tiddlers = store.list_bag_tiddlers(bag)

# retrieve tiddlers from recipe
recipe_name = 'bar'
recipe = Recipe(recipe_name)
recipe = store.get(recipe)
tiddlers = control.get_tiddlers_from_recipe(recipe, env)

# In both the above cases the tiddlers returns have not been populated with data
# from the store. To do that do this:
for tiddler in tiddlers:
    tiddler = store.get(tiddler)
    # do something with the tiddler
}}}</pre>
</div>
<div title="SideBarOptions" server.title="SideBarOptions" server.page.revision="2018" server.etag="&quot;tpc/SideBarOptions/2018:555eed117544322f79ced9bc12da211dd9d45708&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090420152129" created="20090420152129" tags="" >
<pre>&lt;&lt;closeAll&gt;&gt;&lt;&lt;permaview&gt;&gt;&lt;&lt;newTiddler&gt;&gt;&lt;&lt;newJournal "DD MMM YYYY" "journal"&gt;&gt;&lt;&lt;saveChanges&gt;&gt;[[options|OptionsPanel]]</pre>
</div>
<div title="YAML" server.title="YAML" server.page.revision="1063" server.etag="&quot;docs/YAML/1063:6f895fab779ed25426e1280bbc54b99deb1cc599&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409094007" created="20090408213347" tags="" >
<pre>[[YAML|http://yaml.org/]]
&gt; YAML: YAML Ain't Markup Language
&gt; What It Is: YAML is a human friendly data serialization standard for all programming languages.

YAML is used by at least one of the test files ({{{test_web_http_api.py}}}) in TiddlyWeb because it was a convenient way to serialize the tests themselves.

The Python package that is needed is called [[PyYAML|http://pypi.python.org/pypi/PyYAML]].</pre>
</div>
<div title="twstatic" server.title="twstatic" server.page.revision="1472" server.etag="&quot;docs/twstatic/1472:d1ab987a17db90a8ddb3dcc8610841dee9450b90&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123121601" created="20090223104615" tags="plugin" >
<pre>!Description
{{{twstatic}}} is a plugin that adds support for delivering static files through TiddlyWeb, such as static HTML files, images, CSS files.

It is incomplete at this time, but does the job. The major issue is that there is no support for caching related headers such as last-modified and etag.

The twstatic plugin is most useful when using the built in webserver. When [[using Apache|TiddlyWeb and Apache]] it makes more sense to have Apache host the static content.

The plugin is available from PyPI as [[tiddlywebplugins.static|http://pypi.python.org/pypi/tiddlywebplugins.static]].</pre>
</div>
<div title="bagComment1260204561262" server.title="bagComment1260204561262" server.page.revision="1530" server.etag="&quot;comments/bagComment1260204561262/1530:33eaa3d987f9baefe5b98a64014b6c96ffdf7f03&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091207164922" created="20091207164922" tags="comment" >
<pre>Assume one creates a new tiddler through a Tiddlywiki interface - which bag does it land on?</pre>
</div>
<div title="Getting HelpComment1283927538740" server.title="Getting HelpComment1283927538740" server.page.revision="2209" server.etag="&quot;comments/Getting%20HelpComment1283927538740/2209:de103b503f60aa7021db6b5f5a9b9f729e572041&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100908063125" created="20100908063125" tags="comment" daddy="Getting Help" root="Getting Help">
<pre>How to login my own tiddlyweb app? when I acess the challenge page,it shows "Cookie Based Login",and i can't login with my own username. 
ps:I create the username  by this.
"python twanager adduser zhaoxh 123123 ADMIN"</pre>
</div>
<div title="credentials extractor" server.title="credentials extractor" server.page.revision="1157" server.etag="&quot;docs/credentials%20extractor/1157:1e3c0da8a5b5cb6cdc3a9524de313d73bfdbc5cf&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314163441" created="20090331131403" tags="glossary" >
<pre>A credentials extractor is a system in TiddlyWeb, part of the [[Auth Model]] that looks at an incoming web request and //extracts//, where possible, user information from the request and validates it. If the information is valid it is put into [[tiddlyweb.usersign]] for later use. If no information is found, the user is determined to be {{{GUEST}}}.

Multiple extractors are managed by [[UserExtract]] and configured by the [[extractors]] configuration item.

TiddlyWeb comes pre-packaged with two extractors:
* ''http_basic'': Checks the request for HTTP Basic Authorization credentials and verifies them against the TiddlyWeb [[User]] datastore. //Note//: there is no [[challenger]] for HTTP Basic. It is assumed that if someone wants to use HTTP Basic they will just put the necessary information in the headers of their request.
* ''simple_cookie'': Checks the request for a cookie named {{{tiddlyweb_user}}} with a hashed value. Both the {{{openid}}} and {{{cookie_form}}} [[challengers|challenger]] will set this cookie to the provided username if the challenger passes.

While there is no requirement that an extractor do so, both of these mentioned above will query the [[User]] datastore with the discovered username to look for [[roles|role]]. If any are found they are added to [[tiddlyweb.usersign]].

Additional extractors can be added to the system by adding module names to the {{{extractors}}} list in [[tiddlywebconfig.py]]. The modules should contain a class called {{{Extractor}}} that implements the [[ExtractorInterface]].
</pre>
</div>
<div title="control.filter_tiddlers" server.title="control.filter_tiddlers" server.page.revision="2152" server.etag="&quot;docs/control.filter_tiddlers/2152:780c43d6f438efbec3eb05840e10a65975b562e8&quot;" modifier="None" creator="None" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830212402" created="20100830212402" tags="pyapi" >
<pre>!!Description
Yield the [[tiddlers|tiddler]] which result from filtering the provided iterator of tiddlers the provided [[filters|filter]].

!!Parameters
* iterator of [[tiddlers|tiddler]]
* filters, either as filter string or a list of [[filter]] methods

!!Returns
* Python generator yielding empty [[tiddler]] objects.

!!Example
{{{
    # get those tiddlers in somebag which are tagged systemConfig
    bag = Bag('somebag')
    bag = store.get(bag)
    for tiddler in control.filter_tiddlers(store.list_bag_tiddlers(bag), 'select=tag:systemConfig')
        print tiddler.title
}}}

!!Notes
The tiddlers provided to filter_tiddlers do not need to fully instantiated from the store. If they are not, the filter will read them in for you. This helps to save memory at the expense of sometimes make more calls to get single tiddlers from the store.</pre>
</div>
<div title="rep:text" server.title="rep:text" server.page.revision="1339" server.etag="&quot;docs/rep%3Atext/1339:157b64885882dee4cbf0f4c54c5784ff4d15ec02&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511131458" created="20090511131458" tags="" >
<pre>Those [[HTTP API]] ~URLs which are capable for working with a text/plain [[representation]].</pre>
</div>
<div title="auth_systems" server.title="auth_systems" server.page.revision="1078" server.etag="&quot;docs/auth_systems/1078:25000a36e7be87e1afcf1a65daddaa104e26fe07&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409093712" created="20090409093712" tags="config" >
<pre>{{{auth_systems}}} is a configuration setting that controls which [[challengers|challenger]] are available to this TiddlyWeb [[instance]]. It is a list of strings with each string representing the name of a module that implements the [[ChallengerInterface]]. The name is first looked up in the {{{tiddlyweb.web.challengers}}} package space. If not found there, {{{sys.path}}} is searched.

If there is only one [[challenger]] configured a request that redirects to the challenger system will go directly to that challenger. If there are multiple challengers configured the user will be presented with a list of choices.</pre>
</div>
<div title="chrjs" server.title="chrjs" server.page.revision="1126" server.etag="&quot;docs/chrjs/1126:4f594f676bc921010df05fa9992cee5a024d19e6&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319192321" created="20100319192321" tags="tools API JavaScript" >
<pre>[[chrjs|http://github.com/tiddlyweb/chrjs]] is a generic JavaScript library for making HTTP requests to a TiddlyWeb server.

[[demo|http://tiddlyweb.peermore.com/chrjs/demo.html]]</pre>
</div>
<div title="Auth Model" server.title="Auth Model" server.page.revision="2192" server.etag="&quot;docs/Auth%20Model/2192:12d1eaa182cb535b7c901172b8ce992de43adafb&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830233156" created="20090325235452" tags="" >
<pre>In TiddlyWeb, [[authentication]] and [[authorization]] is modeled around [[users|user]], [[bags|bag]], [[policies|policy]], [[challengers|challenger]] and [[credentials extractors|credentials extractor]].

At this point, managing users is done with server side code. Users, passwords, challengers and credentials extractors and configuration are managed either from the command line using [[twanager]] or in [[plugin]] code.

There is no core [[HTTP API]] exposure of the [[User]] datastore entities in the core code. There is an experimental plugins called {{{tidldywebplugins.socialusers}}} which provides one, but it has some limitations. It can be acquired from [[PyPI]] at http://pypi.python.org/pypi/tiddlywebplugins.socialusers

Here are a list of facts about [[users|user]]:
* If a request is [[authenticated|authentication]] using [[OpenID]] or some other external service, there is no requirement for a user to exist in the [[store]], the OpenID will be placed in [[tiddlyweb.usersign]].
* If you want to create a user in the store from the command line, setting a password, roles, or both, you can use the [[twanager]] command [[adduser]]. See also [[addrole]] and [[userpass]].
* In TiddlyWeb [[plugin]] code it is possible to create a user by instantiating a new [[User]] object. See [[How do I create or update a User object in code?]]
* [[Users|User]] can have [[roles|role]]. If you want a user to have a role you can set it when creating a user using [[adduser]] or use [[addrole]] on an existing user. If you are using [[OpenID]], and want to use roles, you can create a user in the store with an id corresponding to the OpenID and an empty password.
* Access to content is controlled by [[policies|policy]]: there are policies on both [[bags|bag]] and [[recipes|recipe]].
* If a policy does not allow an action, and the requested action involves a {{{GET}}} request, the request will be redirected to the [[challenger]] system. If the requested action is a write operation they will get an HTTP 403 (the current user can't do that) or 401 (we have no user and need one). This is to allow an interactive user to have a reasonable experience (when loading a page they need to be authenticated for, they will get the chance to authenticate).
* Once a request successfully passes through a challenger it is redirected back to the original page requested. When the page is requested again (in fact when any request is made) the [[credentials extractor]] system looks at the incoming request. This determines the current user and then carries on with the request.
* When we get back to the previous point where the policy constraint was not met, we now have a user and assuming there is a match, the code carries on.

TiddlyWeb tries to make it so challenges happen before a user enters into the TiddlyWiki space. That is, if we know there is going to be a need for a user, they get challenged outside of TiddlyWiki. However this is not at all required. A TiddlyWiki plugin could use XHR to make posts to the existing challenger forms and deal with the results (i.e. accept the cookie or other magic the challenger provides). Figuring out how to use the forms is as simple as looking at them.

Challengers are by design triggered only when unauthorized content is accessed but can be explicitly triggered by going to the {{{/challenge}}} URL on your installation.

TiddlyWeb goes to great lengths to make very few assumptions about who or what is talking to it. If you want to auth with javascript, curl, python, a browser, carrier pigeons, as long as you are sending HTTP to the server, you've got a chance of getting it right.
</pre>
</div>
<div title="PyPI" server.title="PyPI" server.page.revision="777" server.etag="&quot;docs/PyPI/777:f536101e7e04745a81f57859286ad48f4cee9957&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091018122341" created="20091018122341" tags="" >
<pre>PyPI is the Python Package Index: An index of Python packages assembled for easy discovery and installation.

&gt; http://pypi.python.org/</pre>
</div>
<div title="JSON" server.title="JSON" server.page.revision="664" server.etag="&quot;docs/JSON/664:381a9becc0080b37565ff3a7343d92da7383a80a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331122925" created="20090318161512" tags="" >
<pre>From http://json.org/

&gt; JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ~ECMA-262 3rd Edition - December 1999. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language.</pre>
</div>
<div title="Plugin Tutorial" server.title="Plugin Tutorial" server.page.revision="2191" server.etag="&quot;docs/Plugin%20Tutorial/2191:c3de59a514e8266526ad9dd645ce4f1026f3147e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830232625" created="20100405153520" tags="" >
<pre>
This is a revised version of a tutorial that originally appeared on [[cdent's|cdent]] [[blog|http://cdent.tumblr.com/post/76922695/1-tiddlyweb-tutorial]]. This information only covers part 1 of that tutorial.

TiddlyWeb [[plugins|plugin]] are, at their most basic, [[Python]] modules which are imported into the TiddlyWeb process when it starts up. They are imported when the web server starts or the [[twanager]] command line tool is used. A TiddlyWeb [[instance]] is made (explicitly) aware of available plugins by having their names added to the [[tiddlywebconfig.py]] in the root of the instance. [[system_plugins]] are used by the web server, [[twanager_plugins]] by (as you might have guessed) {{{twanager}}}.

We're going to create a plugin called jinx.py that starts out as a simple hello world, and incrementally adds support for a variety of features.

Please follow along at home if you are inclined.

!!Install TiddlyWeb

The first thing you need to do is [[install TiddlyWeb|Installing TiddlyWeb]] or make sure you have the latest version (at the time of this writing the latest version is 1.2.0). Make sure you have Python 2.4, 2.5 or 2.6. Get [[pip]] from [[PyPI]] at http://pypi.python.org/pypi/pip and then:
{{{
    sudo pip install -U tiddlywebwiki
}}}

This will install TiddlyWeb, TiddlyWebWiki and all the extra modules that are needed. If you are on a legacy operating system, you may not have sudo, in which case you need to be able to write to your disk in whatever way is required for that. If you do not want to install TiddlyWeb in its default location, you have several options which you can explore for yourself. Tools like Python's [[virtualenv]] may be useful.

!!Create an Instance

TiddlyWeb comes packaged with its own web server, so you can run it without needing to configure Apache or something similar. It will work with other servers, but it doesn't //have to//. Any single TiddlyWeb data store and server combination is called an [[instance]]. Find a suitable location on your filesystem for an instance and create it with the [[twinstance]] tool:
{{{
    twinstance jinx
}}}
This creates a directory named {{{jinx}}}, and puts within it a basic [[tiddlywebconfig.py]] file and a [[store]] directory. Change into the jinx directory, we'll do the rest of our work from there:
{{{
    cd jinx
}}}

!!Confirm the Server

Let's confirm the server is working:
{{{
    twanager server
}}}
This should start up a server running at http://0.0.0.0:8080/ . If there are errors it may be that using 0.0.0.0 does not work on your system or port 8080 is in use. Try instead:
{{{
    twanager server 127.0.0.1 8888
}}}
which will start a server at http://127.0.0.1:8888/

Go to the URL using your browser, and see links to [[recipes|recipe]] and [[bags|bag]]. Click around, explore. When you are convinced that things are working, type {{{Ctrl-C}}} in your terminal window to kill the server. Because the web server is multi-threaded it may take some time and multiple taps of {{{Ctrl-C}}} to get things to shut down. If you find this annoying you may wish to use [[spawning]] or [[gunicorn]].

!!Hello World

When a plugin is imported by TiddlyWeb the controlling code will call a function called {{{init(config)}}} in the plugin module. [[config]] is the current value of {{{tiddlyweb.config}}}, which has a bunch of useful information in it that your plugin may need or want. A plugin does not have to pay attention to {{{config}}} but it does need to define the {{{init}}} method.

Let's create a file called jinx.py in the current directory (the TiddlyWeb instance directory). In that file put:
{{{
def init(config):
    pass
}}}

Edit tiddlywebconfig.py so that it looks something like this:
{{{
config = {
    'secret': 'bf88b86XXXXXXXXXX01952a1c6639140912f28b6',
    'system_plugins': ['tiddlywebwiki', 'jinx'],
    'debug_level': 'DEBUG',
}
}}}

Setting {{{debug_level}}} to {{{DEBUG}}} will cause some verbose logging to {{{tiddlyweb.log}}}, which will help us know if we are doing things correctly. Start the server, stop the server, and look in {{{tiddlyweb.log}}}:
{{{
twanager server
Ctrl-C
cat tiddlyweb.log
}}}
Somewhere in there you should see:
{{{
DEBUG    attempt to import system plugin jinx
}}}
Huzzah! You've created your first plugin! Hmmm, it seems to do nothing, let's fix that.

A common plugin need is to add a new URL to the TiddlyWeb [[HTTP interface|HTTP API]]. We're going to add one at {{{/jinx}}}. Add to jinx.py so it now looks like this:
{{{
def jinx(environ, start_response):
    start_response('200', [])
    return ['hello world']


def init(config):
    config['selector'].add('/jinx', GET=jinx)
}}}
If you start the server ({{{twanager server}}}) and go to http://0.0.0.0:8080/jinx you should see {{{hello world}}} as plain text. If not, review the steps up to here.

There's a lot going on in this small amount of code, so we'll pause here to cover what's happening.

TiddlyWeb is a [[WSGI]] application, or more correctly a collection of WSGI applications. WSGI is a specification for making portable and interoperable web tools. It defines a simple contract for how the tools get and return information that makes it possible to [[stack them up|http://cdent.tumblr.com/post/55167654/tiddlyweb-plugins]] and achieve a great deal of flexibility while keeping code separated and concise.

[[Selector|selector]] is a WSGI application used by TiddlyWeb to dispatch urls patterns to code. The line
{{{
    config['selector'].add('/jinx', GET=jinx)
}}}
adds the {{{/jinx}}} URL to the existing dispatch rules, pointing to the method {{{jinx}}} when there is a GET request. Selector expects the things it dispatches to also be WSGI applications. A WSGI application is a callable (a function or class that can be called) with a specific signature. We see that signature in the definition of the {{{jinx}}} method:
{{{
def jinx(environ, start_response):
}}}
{{{environ}}} is a dictionary containing HTTP request headers, other request information and anything upstream WSGI applications have chosen to inject into the dictionary. {{{start_response}}} is how we set response codes and headers:&lt;/p&gt;
{{{
    start_response('200', [])
}}}
A WSGI application must return a list or generator of strings:&lt;/p&gt;
{{{
    return ['hello world']
}}}

So what we've done is pass the HTTP environ into the {{{jinx}}} function, done nothing with it, set a {{{200}}} response code but no headers, and returned {{{hello world}}}. Let's make it so we are sending HTML instead. Change two lines:
{{{
    start_response('200', [('Content-Type', 'text/html; charset=UTF-8')])
    return ['&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;']
}}}

Start the server back up and have a look at http://0.0.0.0:8080/jinx .
</pre>
</div>
<div title="tiddlywebplugins.status" server.title="tiddlywebplugins.status" server.page.revision="1431" server.etag="&quot;docs/tiddlywebplugins.status/1431:aad3d1d6369f14cc9a8900fcfe062d46e69e13be&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="200910181301" created="20090316113813" tags="plugin" >
<pre>!Description
{{{tiddlywebplugins.status}}} is a plugin that adds a {{{/status}}} URL that returns a JSON hash of the current status of the server. At the moment this includes:
* {{{username}}}
** The name of the current active user.
* {{{version}}}
** The version of the running TiddlyWeb.
* {{{challengers}}}
** The available [[authentication]] [[challengers]] on the system.

It is available as a [[distribution|http://pypi.python.org/pypi/tiddlywebplugins.status]] on PyPI.</pre>
</div>
<div title="Using CGI" server.title="Using CGI" server.page.revision="979" server.etag="&quot;docs/Using%20CGI/979:60e8dcbefa9a0b5111f2ddf6953d33ec5ebc508e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314183218" created="20090409091223" tags="howto" >
<pre>[[Ben Gillies]] has written some information on [[installing and running TiddlyWeb on a shared server|http://bengillies.net/.a/recipes/sitecontent/tiddlers/CGI%20Install%20Update]] using CGI. This does not require root privileges.

While using CGI will work just fine, it is unlikely to be particularly performant as the entire TiddlyWeb codebase needs to be compiled for each request.

If you are on DreamHost or a similar hosting service see the information at [[TiddlyWeb DreamHost Experiments|http://cdent.tumblr.com/post/266789592/tiddlyweb-dreamhost-experiments]] for an installation guide.
</pre>
</div>
<div title="comment_1238579776267" server.title="comment_1238579776267" server.page.revision="1548" server.etag="&quot;comments/comment_1238579776267/1548:0dca084c55530e0d187ae802bcef52c956ddc5d8&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090401095623" created="20090401095623" tags="comment" >
<pre>Some instructions or assistance in deploying TiddlyWeb under Fast CGI would be appreciated. This would be helpful for deployment where apache/cherrpy is not an option.</pre>
</div>
<div title="How do I create or update a recipe over HTTP?" server.title="How do I create or update a recipe over HTTP?" server.page.revision="490" server.etag="&quot;docs/How%20do%20I%20create%20or%20update%20a%20recipe%20over%20HTTP%3F/490:859f92085ff9e8dd1316d83b608d3452650b3fbc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511134638" created="20090511134638" tags="faq" >
<pre>Recipes can be created or updated over HTTP by using the [[HTTP API]] to access [[/recipes/{recipe_name}]] to send a {{{PUT}}} request containing a [[JSON recipe]]. The content-type header must be set to {{{application/json}}}.

For a recipe that already exists in the store, to make edits the [[current user]] must pass the manage [[constraint]] on the recipe. To create a new recipe, the current user must pass the [[recipe_create_policy]].

See [[How can I use curl to create stuff in TiddlyWeb?]] for a simple example.</pre>
</div>
<div title="Using TiddlyWebComment1258609496130" server.title="Using TiddlyWebComment1258609496130" server.page.revision="1528" server.etag="&quot;comments/Using%20TiddlyWebComment1258609496130/1528:597ab6d6549be21662e8db1740696270dc28d0e5&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091119054457" created="20091119054457" tags="comment" >
<pre></pre>
</div>
<div title="Retrieving a Tiddler" server.title="Retrieving a Tiddler" server.page.revision="816" server.etag="&quot;docs/Retrieving%20a%20Tiddler/816:317620255114442ff3362a4151892ccea1adabac&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X GET -H 'Accept: application/json' \
	http://localhost:8080/recipes/default/tiddlers/TiddlyWebConfig
}}}</pre>
</div>
<div title="comment_1243789712694" server.title="comment_1243789712694" server.page.revision="1569" server.etag="&quot;comments/comment_1243789712694/1569:a94f7b030bc044035f27870a48f41cc5450ffdef&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090531170833" created="20090531170833" tags="comment" >
<pre>Yeah, the lack of socks proxy handling also causes problem with the [[from_svn]] [[twanager]] command. Should be a solution in the next release.</pre>
</div>
<div title="comment_1237490529047" server.title="comment_1237490529047" server.page.revision="1532" server.etag="&quot;comments/comment_1237490529047/1532:5cdfe273939b2f798acd8e990861aa5038537aab&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090319192209" created="20090319192209" tags="comment" >
<pre>These days apache 2.x is probably best, although 1.3 should work.</pre>
</div>
<div title="SiteSubtitle" server.title="SiteSubtitle" server.page.revision="2021" server.etag="&quot;tpc/SiteSubtitle/2021:3de93178e2cff4410e7fe155d12196ae6cd99f30&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20091214112947" created="20090721202938" tags="excludeLists" >
<pre></pre>
</div>
<div title="mount" server.title="mount" server.page.revision="1272" server.etag="&quot;docs/mount/1272:0d752e760324b6d94d9a3f138336b132ce4e5835&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314153130" created="20090218172855" tags="glossary mounting" >
<pre>
In [[WSGI]] an application is "mounted" by a web server at specific location in the url space of the web server. This means that requests to that url and anything within or below it will be handled by the mounted WSGI application.
</pre>
</div>
<div title="Retrieving URL Parameters" server.title="Retrieving URL Parameters" server.page.revision="813" server.etag="&quot;docs/Retrieving%20URL%20Parameters/813:339e21f4228c88862d2f2bba13a7e8e6295aa309&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090821094328" created="20090821094328" tags="codeSnippets howto dev" >
<pre>{{{
query = environ["tiddlyweb.query"]
param = query.get("foo", [None])[0]
}}}</pre>
</div>
<div title="JSON tiddler" server.title="JSON tiddler" server.page.revision="2276" server.etag="&quot;docs/JSON%20tiddler/2276:3852f2348a8706c2c85d49d5eb3055e4f01cc22b&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20110909194249" created="20090511114813" tags="" daddy="TiddlyWeb Documentation" root="TiddlyWeb Documentation">
<pre>The JSON form of a [[tiddler]] when a tiddler is {{{GET}}} or {{{PUT}}}. When getting a list of tiddlers a list of dictionaries is returned. When getting just one, a single dictionary is returned.

The form of the dictionary is quite variable, as a tiddler is really just a dictionary of key/value pairs, available at a known URL. The JSON serialization is that dictionary serialized.

When getting a tiddler as JSON you can expect at least the following form:
{{{
{
    "text": "the text of the tiddler",
    "created": "YYYYMMDDHHMMSS",
    "modified": "YYYYMMDDHHMMSS",
    "modifier": "name of most recent editor",
    "tags": ["list","of","tags"],
    "fields": {
        "customfield": "arbitrary string",
        "lowercase": "..."
    },
    "uri": "the absolute uri of the tiddler in its bag"
}
}}}

When putting a tiddler as JSON, all fields are optional.

!See Also
* [[How can I use curl to create stuff in TiddlyWeb?]]
</pre>
</div>
<div title="urls.map" server.title="urls.map" server.page.revision="1478" server.etag="&quot;docs/urls.map/1478:ddc3beb2f281afae008ebe5cef1d96c74118828f&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090421110343" created="20090318165516" tags="" >
<pre>{{{urls.map}}} is a collection of patterns against which incoming HTTP requests are matched to dispatch those requests to the correct code. If you are familiar with Ruby on Rails it is similar to the routes file.

TiddlyWeb includes a default urls.map that has extensive comments explaining each mapping. You can see [[that file|http://github.com/tiddlyweb/tiddlyweb/raw/master/tiddlyweb/urls.map]].

You may replace the entire urls.map with a different one by setting [[urls_map]] in [[tiddlywebconfig.py]].

You may add to the urls.map or change how an existing mapping is handled with [[plugins]].</pre>
</div>
<div title="Theory of OperationComment1323255982697" server.title="Theory of OperationComment1323255982697" server.page.revision="2283" server.etag="&quot;comments/Theory%20of%20OperationComment1323255982697/2283:269475c8cf7597989d84a89f30a0d5404e3b8458&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20111207110623" created="20111207110623" tags="comment" daddy="Theory of Operation" root="Theory of Operation">
<pre>111
</pre>
</div>
<div title="SiteTitle" server.title="SiteTitle" server.page.revision="2022" server.etag="&quot;tpc/SiteTitle/2022:a938d53ec47b9eb75a5daaaee63d97be6ca51738&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090217204752" created="20090217204752" tags="" >
<pre>TiddlyWeb</pre>
</div>
<div title="pyapitool" server.title="pyapitool" server.page.revision="1320" server.etag="&quot;docs/pyapitool/1320:d9802672ca4ca6fd6b198f470aabb77e87b09a39&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091008105952" created="20091001103001" tags="excludeLists" >
<pre>&lt;&lt;newTiddler
	label:"New PyApi"
	text:{{store.getTiddlerText("pyapitemplate")}}
	tag:"pyapi"
&gt;&gt;
left to do (at top level):
* manage
* serializations
* serializer
* store
* stores
* web
* model (for the entities)</pre>
</div>
<div title="CherryPy" server.title="CherryPy" server.page.revision="282" server.etag="&quot;docs/CherryPy/282:5618c7fc1be3cd3b3dd173635fa7ad10b6ddcd57&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090408140434" created="20090408140434" tags="" >
<pre>http://www.cherrypy.org/:
&gt; CherryPy is a pythonic, object-oriented HTTP framework.</pre>
</div>
<div title="base_tiddlywiki" server.title="base_tiddlywiki" server.page.revision="1103" server.etag="&quot;docs/base_tiddlywiki/1103:c525f67339d1e24ce4934a03d485c0f6075d72b3&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331150714" created="20090223203236" tags="config" >
<pre>The location of the empty TiddlyWiki that is used as the starting point for generating a wiki from TiddlyWeb.

See: [[How do I use a different empty.html?]]</pre>
</div>
<div title="server_request_filters" server.title="server_request_filters" server.page.revision="1394" server.etag="&quot;docs/server_request_filters/1394:ca0e854686c8da556f3a4299c2f2f06fd5bd276c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620123646" created="20090323173823" tags="glossary config" >
<pre>{{{server_request_filters}}} is a configuration item that controls which [[WSGI]] applications a request is processed //through// before being handled by the core of the TiddlyWeb code. The {{{server_request_filters}}} are used to either establish information that will be needed later in the request process or extract information from the request required later in the process.

Any [[instance]] may add or remove filters, but in practice this has proven rare. [[methodhack]] and [[pathinfohack]] are two plugins that add request filters.

The default request filters, in chronological order of use, are:
# [[Query]]
# [[StoreSet]]
# [[UserExtract]]
# [[Negotiate]]

Also included in the server request stack are two required WSGI applications:
* [[Configurator]]
* [[Environator]]</pre>
</div>
<div title="comment_1238519681045" server.title="comment_1238519681045" server.page.revision="1547" server.etag="&quot;comments/comment_1238519681045/1547:74defd024debe6c3a04c63f2b18294c9616582f8&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090511140255" created="20090331171441" tags="comment" >
<pre>* [[How do I change which extractors are used?]]</pre>
</div>
<div title="Installing from a Bundle" server.title="Installing from a Bundle" server.page.revision="596" server.etag="&quot;docs/Installing%20from%20a%20Bundle/596:446caa3ecadb93687fd91c5517e10d1f30621e8c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091117131549" created="20091117131549" tags="" >
<pre>A bundle is a zipped archive of Python packages that can be created and installed using [[pip]]. The bundle includes the desired package plus all its dependent packages. Having a bundle makes it possible to install [[tiddlyweb]] and [[tiddlywebwiki]] on a host that does not have access to PyPI.

Starting in November of 2009, TiddlyWeb and TiddlyWebWiki bundles are being made available from http://tiddlyweb.peermore.com/dist/

See [[the google groups announcement|http://groups.google.com/group/tiddlyweb/browse_frm/thread/89d869a6dfb2b233]].</pre>
</div>
<div title="datastore" server.title="datastore" server.page.revision="1162" server.etag="&quot;docs/datastore/1162:92519f4ef7574630c1ff6f917bbccb14a4598b42&quot;" modifier="fnd" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409132337" created="20090331163632" tags="glossary" >
<pre>The term //datastore// is used here to generically refer to where TiddlyWeb keeps its data and the data itself. //How// it keeps that data is handled by the [[store]].</pre>
</div>
<div title="Installing on CentOS Behind a Corporate Firewall" server.title="Installing on CentOS Behind a Corporate Firewall" server.page.revision="2240" server.etag="&quot;docs/Installing%20on%20CentOS%20Behind%20a%20Corporate%20Firewall/2240:bd95842573c5fa92b274674252a0c4638f134a91&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20101209085935" created="20090519195805" tags="" >
<pre>This guide explains how to set up [[TiddlyWeb]] using [[Apache|TiddlyWeb and Apache]] on a fresh [[CentOS|http://www.centos.org]] 5 install behind a corporate firewall.
!System Setup
(this assumes root access; commands might have to be wrapped in {{{su -c '...'}}})
* set up HTTP proxy: {{{export http_proxy="http://proxy.mycorp.com:8080"}}}
* [[install EPEL repository|http://fedoraproject.org/wiki/EPEL/FAQ#Using_EPEL]] using proxy:
** {{{wget http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-3.noarch.rpm}}}
** {{{rpm -Uvh epel-release-5-3.noarch.rpm}}}
** {{{rm epel-release-5-3.noarch.rpm}}}
* install [[mod_wsgi|Using Mod WSGI]]: {{{yum install mod_wsgi}}}
* install and upgrade Python setup tools:
** {{{yum install python-setuptools python-devel}}}
** {{{easy_install -U setuptools pip}}}
!TiddlyWeb Setup
* install TiddlyWeb: {{{pip install -U tiddlywebwiki}}}
* create instances directory: {{{mkdir /srv/tiddlyweb &amp;&amp; cd /srv/tiddlyweb}}}
* create instance "sandbox": {{{twinstance sandbox &amp;&amp; cd sandbox}}}
* download TiddlyWeb's Apache module: {{{wget http://github.com/tiddlyweb/tiddlyweb/raw/master/apache.py}}}
* configure TiddlyWeb and Apache by editing {{{/srv/tiddlyweb/sandbox/tiddlywebconfig.py}}} and {{{/etc/httpd/conf/httpd.conf}}}, respectively (see //Sample Configuration// below)
* set correct permissions on Apache's logs directory: {{{chmod 755 /var/log/httpd}}}
* restart Apache: {{{httpd -k restart}}}
!Sample Configuration
(using instance "sandbox" at http://0.0.0.0:80/wiki/ under UNIX user //tiddlyweb//; if available, a hostname should be used instead of the IP)
* {{{/srv/tiddlyweb/sandbox/tiddlywebconfig.py}}}
{{{
config = {
    'secret': '&lt;hash&gt;',
    'server_host': {
        'scheme': 'http',
        'host': '0.0.0.0',
        'port': '80'
    },
    'server_prefix': '/wiki'
}
}}}
* {{{/etc/httpd/conf/httpd.conf}}}
{{{
&lt;VirtualHost *:80&gt;
    DocumentRoot /srv/tiddlyweb/sandbox/public
    ServerName 0.0.0.0
    RedirectMatch ^/$ /wiki/
    WSGIDaemonProcess sandbox_wiki user=tiddlyweb processes=2 threads=15
    WSGIProcessGroup sandbox_wiki
    WSGIScriptAlias /wiki /srv/tiddlyweb/sandbox/apache.py
&lt;/VirtualHost&gt;
}}}
</pre>
</div>
<div title="Installing on WindowsComment1274194807069" server.title="Installing on WindowsComment1274194807069" server.page.revision="1523" server.etag="&quot;comments/Installing%20on%20WindowsComment1274194807069/1523:aa5ab436f9d62fd0cdac68432c1eab1f99a2eaa5&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100518150007" created="20100518150007" tags="comment" daddy="Installing on Windows" prev="Installing on WindowsComment1273875837151" root="Installing on Windows">
<pre>To take advantage of the TiddlyWeb features you need to be able to run a server of some sort. It is possible to build things so the server is running off a shared disk. If you just want a TiddlyWiki itself, it can be loaded from a shared drive, as an HTML file, but there are issues with locking for edits. There are plugins that can deal with that. See http://tiddlywiki.org/</pre>
</div>
<div title="Python" server.title="Python" server.page.revision="779" server.etag="&quot;docs/Python/779:fb9d929c8a086aff7b45fb0c80b9105ea7b524f3&quot;" modifier="cdent.livejournal.com" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090217204751" created="200902171029" tags="" >
<pre>[[Python|http://www.python.org/]] is the programming language used to develop TiddlyWeb. It was chosen because it has a clean and clear syntax, has an excellent module system, a relatively good standard library, the [[WSGI|http://www.python.org/dev/peps/pep-0333/]] specification for web applications and is available on most modern platforms.

The features, combined, make Python an excellent choice for an application and library that is to be used as for reference and development.</pre>
</div>
<div title="TiddlyWeb" server.title="TiddlyWeb" server.page.revision="885" server.etag="&quot;docs/TiddlyWeb/885:b9c6c0247ab69518cc45ef8e6143b8875365440d&quot;" modifier="cdent.tumblr.com" creator="ChrisDent" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314145522" created="20090217164320" tags="" >
<pre>
TiddlyWeb, the name, was chosen by ChrisDent. Originally the concept that became TiddlyWeb was named "möass": Mother of All Server Sides. That didn't seem like it fit in the Tiddly* universe all that well. Because TiddlyWeb tries to be very good about how it follows web standards and practices, TiddlyWeb seemed like a good name.

http://tiddlyweb.com/ provides a starting page for all things TiddlyWeb.


</pre>
</div>
<div title="authentication" server.title="authentication" server.page.revision="1080" server.etag="&quot;docs/authentication/1080:86af7f26caec1d7f1920a4a685955bb8387c61d3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090620121944" created="20090331123945" tags="glossary" >
<pre>Authentication is the process whereby we confirm that someone or something is who or what they claim to be, or more specifically some entity should be treated as being allowed to act as the someone or something.

To put it another way, authentication is a process in which we make sure someone is who they claim to be. In web services, this is usually done by something claiming they are a particular entity and then providing some piece of information to confirm (make authentic) their claim.

In TiddlyWeb authentication is done through a combination of a [[challenger]] and a [[credentials extractor]]. The challenger provides an initial interface through which a [[user]] can make and confirm their claim. A credentials extractor is then used to verify that claim in subsequent requests.</pre>
</div>
<div title="comment_1237450430000" server.title="comment_1237450430000" server.page.revision="1531" server.etag="&quot;comments/comment_1237450430000/1531:9af77cfb9ec4b5be7bd12d18149bee8b1b27498c&quot;" modifier="YourName" creator="YourName" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090319081352" created="20090319081352" tags="comment" >
<pre>which version of apache is recommended to use with tiddlyweb?</pre>
</div>
<div title="I'am a test tiddler w/slash" server.title="I'am a test tiddler w/slash" server.page.revision="555" server.etag="&quot;docs/I'am%20a%20test%20tiddler%20w%2Fslash/555:8e367874d850e4029d8f6453dde1aa793286bfd8&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090508171334" created="20090508171334" tags="" >
<pre>
Oh hi. I have a slash!</pre>
</div>
<div title="Customizing TiddlyWeb" server.title="Customizing TiddlyWeb" server.page.revision="2189" server.etag="&quot;docs/Customizing%20TiddlyWeb/2189:3aeb50049cf754a3a27461680b11d02ed04dfcc4&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830223158" created="20090223205815" tags="" >
<pre>From the start TiddlyWeb has been designed to be lightweight and fairly low on features, but still flexible enough to do cool stuff. To make cool stuff possible, TiddlyWeb is highly extensible on a variety of dimensions:

* There are [[plugins|Plugin List]] that can add new ~URLs, new [[twanager]] commands and generally any new functionality you can think of.
* You can add additional [[serializations|serialization]] or use a different [[store]].
* You can add add more or replace the existing wikitext [[renderer]] (e.g. adding support for Markdown or Wikicreole).
* You can extend the [[filter]] syntax.
* You can build and use different [[challengers|challenger]] or [[credentials extractors|credentials extractor]].
* You can modify, remove or extend the [[WSGI]] [[middleware]] applications used to transform the web requests and responses.
* You can add [[validators|validator]] to dynamically adjusting incoming [[tiddlers|tiddler]].
* You can hook actions on the store (get, put or delete of any single [[entity]]) with additional actions to do things like update indexes, clear caches, call web hooks or otherwise handle the events associated with data in the store changing.

[[Plugin Tutorial]]
</pre>
</div>
<div title="Using CherryPy" server.title="Using CherryPy" server.page.revision="986" server.etag="&quot;docs/Using%20CherryPy/986:465b694202cefdc737da9cccf7434a6c21091712&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314183040" created="20090408134143" tags="" >
<pre>TiddlyWeb is distributed with a copy of a multi-threaded, pure-Python, WSGI compliant web server from the [[CherryPy]] project. It is small, light, and generally fast enough for up to medium use. It requires no additional installation and configuration beyond [[Installing TiddlyWeb]].

Once an [[instance]] has been [[created|Create an Instance]], you can mount that instance in cherrypy quite simply:
* cd to the instance directory
* run {{{twanager server}}}

By default this will start a server running at http://0.0.0.0:8080/. If you need to use a different host or port (//if you want to access the server remotely you will//) you need to set [[server_host]] in [[tiddlywebconfig.py]].

On some operating systems, such as Windows when using Cygwin, 0.0.0.0 will not work and you will need to use 127.0.0.1 instead, which you can achieve by running {{{twanager server 127.0.0.1 8080}}}.

The cherrypy server is part of what enables [[TiddlyWeb for the Impatient]].
</pre>
</div>
<div title="cachinghoster" server.title="cachinghoster" server.page.revision="1113" server.etag="&quot;docs/cachinghoster/1113:6690e14830fd246caab2ab140fba3c3e06200951&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123112723" created="20090223224551" tags="plugin" >
<pre>The cachinghoster plugin replaces the default '/' URL handler with one that presents two different [[TiddlyWikis|TiddlyWiki]] depending on the status of the current user. If the user has a defined role, they get an editable wiki. Otherwise they get one that is read-only.

It is called //caching// hoster because the plugin maintains an on disk cache of the generated wiki so that it can serve the wiki as a static file or if the browser has seen the wiki before (and it has not changed) just send an {{{HTTP 304}}} response.

Find it at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins]].

This is a fairly complex plugin which requires good understanding of TiddlyWeb, HTTP and Unix file handling concepts.</pre>
</div>
<div title="/bags/{bag_name}/tiddlers/{tiddler_title}" server.title="/bags/{bag_name}/tiddlers/{tiddler_title}" server.page.revision="187" server.etag="&quot;docs/%2Fbags%2F%7Bbag_name%7D%2Ftiddlers%2F%7Btiddler_title%7D/187:764e617e37e4fd2763e09d86080370481df361dc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710143059" created="20090511115557" tags="rep:json method:put method:delete rep:html rep:text httpapi method:get" >
<pre>!Resource
A single of [[tiddler]] contained by the named [[bag]].  The [[current user]] must pass the read [[constraint]] on the bag to see the tiddler, edit to edit, create to create and delete to delete.

!Representations
; {{{text/plain}}}
: A text representation of the tiddler. See [[text tiddler]].
; {{{text/html}}}
: An HTML representation of the tiddler. See [[HTML tiddler]]. 
; {{{application/json}}}
: [[JSON]] representation of the tiddler. See [[JSON tiddler]].

!Methods
!! {{{GET}}}
Get the tiddler.
!! {{{PUT}}}
Create or edit the named tiddler use the [[text|text tiddler]] or [[JSON|JSON tiddler]] representations. The tiddler will be stored in the named bag.
!! {{{DELETE}}}
Delete the tiddler.

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/bags/docs/tiddlers/HTTP%20API</pre>
</div>
<div title="tiddlywebplugins.whoosher" server.title="tiddlywebplugins.whoosher" server.page.revision="1440" server.etag="&quot;docs/tiddlywebplugins.whoosher/1440:374ac40edae68b570c9f178519024582bf8c7721&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091104171327" created="20091029104520" tags="plugin" >
<pre>This plugin uses [[Whoosh|http://whoosh.ca]], a Python indexing system, to provide search results and potentially accelerated filtering of TiddlyWeb content.

It is [[available|http://pypi.python.org/pypi/tiddlywebplugins.whoosher]] on PyPI.</pre>
</div>
<div title="user" server.title="user" server.page.revision="1486" server.etag="&quot;docs/user/1486:510b558d75e3da7ca79ab19f812aeaf32a13724c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314162958" created="20090331124504" tags="glossary" >
<pre>Uppercase user refers a {{{tiddlyweb.model.user.User}}} object.

These are optional members of the TiddlyWeb datastore serving two independent functions:
* An [[authentication]] database for named users and their passwords.
* A database used in [[authorization]] for named users and their [[roles|role]]

See also:
* [[How do I add a user?]]
* [[How do I give a user a role?]]</pre>
</div>
<div title="/bags/{bag_name}/tiddlers/{tiddler_title}/revisions/{revision}" server.title="/bags/{bag_name}/tiddlers/{tiddler_title}/revisions/{revision}" server.page.revision="203" server.etag="&quot;docs/%2Fbags%2F%7Bbag_name%7D%2Ftiddlers%2F%7Btiddler_title%7D%2Frevisions%2F%7Brevision%7D/203:1a331590c9874070cd0c8cf7c57ea113d75878d9&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710143131" created="20090511122834" tags="rep:json rep:html method:get rep:text httpapi" >
<pre>!Resource
A single revision of [[tiddler]] contained by the named [[bag]].  The [[current user]] must pass the read [[constraint]] on the bag to see the tiddler.

!Representations
; {{{text/plain}}}
: A text representation of the tiddler. See [[text tiddler]].
; {{{text/html}}}
: An HTML representation of the tiddler. See [[HTML tiddler]]. 
; {{{application/json}}}
: [[JSON]] representation of the tiddler. See [[JSON tiddler]].

!Methods
!! {{{GET}}}
Get the tiddler revision.

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/bags/docs/tiddlers/HTTP%20API/revisions/19</pre>
</div>
<div title="burningchrome.com" server.title="burningchrome.com" server.page.revision="1106" server.etag="&quot;docs/burningchrome.com/1106:932166a1fd3b493cba600545fa0155a42eee5a54&quot;" modifier="burningchrome.com" creator="burningchrome.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331121145" created="20090331091817" tags="" >
<pre>Yet another [[OpenID]] for [[cdent]], who likes to experiment with open id delegation.

It also happens to be his [[personal homepage|http://burningchrome.com/]].</pre>
</div>
<div title="WSGI Middleware Illustration" server.title="WSGI Middleware Illustration" server.page.revision="1034" server.etag="&quot;docs/WSGI%20Middleware%20Illustration/1034:27907e0e3813aee5db3e16ae027e6bd6cecbffd0&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323171400" created="20090323171206" tags="" >
<pre>
This image (below) describes the default structure of TiddlyWeb's [[WSGI]] middleware. See [[Server Startup Model]] and [[Server Request Model]] for a bit more information. This illustration was taking from a [[blog posting on TiddlyWeb plugins|http://cdent.tumblr.com/post/55167654/tiddlyweb-plugins]].

[img[http://burningchrome.com/~cdent/images/tiddlywebstructure.png]]</pre>
</div>
<div title="TiddlyRecon" server.title="TiddlyRecon" server.page.revision="866" server.etag="&quot;docs/TiddlyRecon/866:08f2586537eaf55a6a1e97ee6016e0ce2f4b5ebc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090928095142" created="20090928095142" tags="systemConfig" >
<pre>/***
|''Name''|TiddlyReconMacro|
|''Description''|TiddlyWeb data explorer|
|''Author''|FND|
|''Source''|http://tiddlyweb.com|
|''CodeRepository''|http://github.com/FND/tiddlyrecon|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.5|
!Usage
{{{
&lt;&lt;TiddlyRecon [host]&gt;&gt;
}}}
!Code
***/
//{{{
/*
 * TiddlyWeb adaptor
 *
 * TODO:
 * * error handling in callbacks
 */

var tiddlyweb = {
	host: "" // defaults to current domain -- XXX: lacks server_prefix -- TODO: document; expects no trailing slash
};

(function($) {

$.extend(tiddlyweb, {
	/*
	 * container has members type ("bag" or "recipe") and name
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadTiddlers: function(container, callback) {
		var uri = "/" + container.type + "s/" +
			encodeURIComponent(container.name) + "/tiddlers"
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadTiddler: function(title, container, callback) {
		var uri = "/" + container.type + "s/" +
			encodeURIComponent(container.name) + "/tiddlers/" +
			encodeURIComponent(title)
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadBags: function(callback) {
		var uri = "/bags";
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadBag: function(name, callback) {
		var uri = "/bags/" + encodeURIComponent(name);
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadRecipes: function(callback) {
		var uri = "/recipes";
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * callback is passed data, status and error (if applicable)
	 * see jQuery.ajax for details
	 */
	loadRecipe: function(name, callback) {
		var uri = "/recipes/" + encodeURIComponent(name);
		callback = callback || console.log; // XXX: DEBUG
		this.loadData(uri, callback);
	},

	/*
	 * policy is an object with members write, create, delete, manage and accept,
	 * each an array of users/roles
	 */
	saveBag: function(name, policy) {
		var uri = "/bags/" + encodeURIComponent(name);
		var data = {
			policy: policy
		};
		this.saveData(uri, data, console.log);
	},

	/*
	 * bags is an array of bag names
	 * filters currently unsupported
	 */
	saveRecipe: function(name, bags) {
		var uri = "/recipes/" + encodeURIComponent(name);
		var data = {};
		this.saveData(uri, data, console.log);
	},

	// generic utility methods

	loadData: function(uri, callback) {
		localAjax({
			url: this.host + uri,
			type: "GET",
			dataType: "json",
			success: callback,
			error: callback
		});
	},

	saveData: function(uri, data, callback) {
		localAjax({
			url: this.host + uri,
			type: "PUT",
			dataType: "json",
			data: $.toJSON(data),
			complete: callback
		});
	}
});

/*
 * enable AJAX calls from a local file
 * triggers regular jQuery.ajax call after requesting enhanced privileges
 */
var localAjax = function(args) { // XXX: not required!?
	if(document.location.protocol.indexOf("file") == 0 &amp;&amp; window.Components &amp;&amp;
		window.netscape &amp;&amp; window.netscape.security) {
		window.netscape.security.PrivilegeManager.
			enablePrivilege("UniversalBrowserRead");
	}
	return jQuery.ajax(args);
};

})(jQuery);
(function() {

var $ = jQuery;
var tw = tiddlyweb; // TODO: chrjs should provide an instance

$.TiddlyRecon = function(root, host) {
	tw.host = host;
	$.TiddlyRecon.root = $(root).empty(); // XXX: singleton, bad
	notify("loading status");
	loadStatus();
	notify("loading recipes");
	tw.loadRecipes(populateRecipes);
};

// display status
var loadStatus = function() {
	var container = $('&lt;dl id="status" /&gt;').hide().appendTo($.TiddlyRecon.root);
	var populateStatus = function(data, status, error) {
		container.
			append("&lt;dt&gt;user&lt;/dt&gt;\n").
			create("&lt;dd /&gt;\n").text(data.username).end().
			append("&lt;dt&gt;server&lt;/dt&gt;\n").
			create("&lt;dd /&gt;\n").
				create("&lt;a /&gt;").attr("href", tw.host).text(tw.host).end().
				end().
			show();
	};
	tw.loadData("/status", populateStatus);
};

// list recipes
var populateRecipes = function(data, status, error) {
	notify("populating recipes");

	$('&lt;div id="recipes" class="collection container" /&gt;').
		append("&lt;h2&gt;Recipes&lt;/h2&gt;").
		create('&lt;ul class="listing" /&gt;').
			create("&lt;li&gt;&lt;i&gt;(none)&lt;/i&gt;&lt;/li&gt;").click(loadRecipe).end().
			append($.map(data, function(item, i) {
				return $("&lt;li /&gt;").text(item).click(loadRecipe)[0];
			})).
			end().
		appendTo($.TiddlyRecon.root);
};

// display recipe
var loadRecipe = function(ev) {
	var recipe_node = $(this);
	setActive(recipe_node);
	var recipe_name = recipe_node.text(); // TODO: special handling for "(none)";
	notify("loading recipe", recipe_name);

	var recipe_container = recipe_node.parent().parent(). // XXX: simpler way to do this?
		find("#recipe").remove().end(). // clear existing selection -- TODO: allow for multiple recipes?
		create('&lt;div id="recipe" class="entity" /&gt;').
			create("&lt;h3 /&gt;").text(recipe_name).end();

	var callback = function(data, status, error) {
		populateBags(recipe_container, data, status, error);
	};
	tw.loadRecipe(recipe_name, callback);
};

// list bags
var populateBags = function(container, data, status, error) {
	notify("populating bags");

	$('&lt;div id="bags" class="collection container" /&gt;').
		append("&lt;h2&gt;Bags&lt;/h2&gt;").
		create('&lt;ul class="listing" /&gt;').
			create("&lt;li&gt;&lt;i&gt;(all)&lt;/i&gt;&lt;/li&gt;").click(loadBag).end().
			append($.map(data.recipe, function(item, i) {
				var bag_name = item[0];
				var filter = item[1] || "(none)"; // XXX: bad default
				return $("&lt;li /&gt;").text(bag_name).attr("title", filter).click(loadBag)[0]; // XXX: using title to retain filter is hacky
			})).
			end().
		appendTo(container);
};

// display bag
var loadBag = function(ev) {
	var bag_node = $(this);
	setActive(bag_node);
	var bag_name = bag_node.text(); // TODO: special handling for "(all)";
	notify("loading bag", bag_name);

	var bag_container = bag_node.parent().parent(). // XXX: simpler way to do this?
		find("#bag").remove().end(). // clear existing selection -- TODO: allow for multiple bags?
		create('&lt;div id="bag" class="entity" /&gt;').
			create("&lt;h3 /&gt;").text(bag_name).end();

	var callback = function(data, status, error) {
		populateTiddlers(bag_container, data, status, error);
	};
	var container = {
		type: "bag",
		name: bag_name
	};
	tw.loadTiddlers(container, callback);
};

var populateTiddlers = function(container, data, status, error) {
	notify("populating tiddlers");

	$('&lt;div id="tiddlers" class="collection" /&gt;').
		append("&lt;h2&gt;Tiddlers&lt;/h2&gt;").
		create('&lt;ul class="listing" /&gt;').
			append($.map(data, function(item, i) {
				return $("&lt;li /&gt;").text(item.title).attr("title", item.bag).click(loadTiddler)[0]; // XXX: using title to retain bag is hacky
			})).
			end().
		appendTo(container);
};

var loadTiddler = function(ev) {
	var tiddler_node = $(this);
	setActive(tiddler_node);
	var title = tiddler_node.text();
	var bag = tiddler_node.attr("title");
	notify("loading tiddler", title, bag);

	var tiddler_container = tiddler_node.parent().parent(). // XXX: simpler way to do this?
		find("#tiddler").remove().end(). // clear existing selection -- TODO: allow for multiple bags?
		create('&lt;div id="tiddler" class="entity" /&gt;').
			create("&lt;h3 /&gt;").text(title).end();

	var callback = function(data, status, error) {
		populateTiddler(tiddler_container, data, status, error);
	};
	var container = {
		type: "bag",
		name: bag
	};
	tw.loadTiddler(title, container, callback);
};

var populateTiddler = function(container, data, status, error) {
	notify("populating tiddler");

	$('&lt;div class="content" /&gt;').text(data.text).appendTo(container); // XXX: request wikified text!?
};

var setActive = function(node) {
	node.siblings().removeClass("active");
	node.addClass("active");
};

// utility functions -- TODO: move into separate module

var notify = function(msg) { // TODO: use jQuery.notify
	// XXX: DEBUG
	if(window.console &amp;&amp; console.log) {
		console.log("notify:", msg);
	}
};

// utility method to create and then select elements
// in combination with jQuery's end method, this is generally useful for
// dynamically generating nested elements within a chain of operations
$.fn.create = function(html) {
	return this.append(html).children(":last");
};

})();
tiddlyweb.host = "http://tiddlyweb.peermore.com/wiki";
/*
 * TiddlyWiki macro wrapper and backstage integration
 */

config.macros.TiddlyRecon = {
	handler: function(place, macroName, params, wikifier, paramString, tiddler) {
		var host = params[0] || config.defaultCustomFields["server.host"];
		jQuery.TiddlyRecon(place, host);
	}
};

config.tasks.server = {
	text: "server",
	tooltip: "TiddlyWeb",
	content: "&lt;&lt;TiddlyRecon&gt;&gt;"
};
config.backstageTasks.push("server");
//}}}
</pre>
</div>
<div title="text tiddlerComment1264956266675" server.title="text tiddlerComment1264956266675" server.page.revision="1608" server.etag="&quot;comments/text%20tiddlerComment1264956266675/1608:3c25253ff6621b1ecc3b3345262412b6f7d60f31&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100131164427" created="20100131164427" tags="comment" daddy="text tiddlerComment1264803411261" root="text tiddler">
<pre>That's an interesting idea but would set up a mismatch between the text representation and other representations. In most representations, for example JSON, we want to be able to process just the body of the response to get the "meaning" of the representation. If we have that pattern established for JSON and other data-based representations, having a different one for text would be confusing and conflicting.

Also, putting the key-value stuff in the headers would require a lot intelligence about naming the keys and processing the values before sticking them in the headers so that they are HTTP compliant.</pre>
</div>
<div title="util.write_lock" server.title="util.write_lock" server.page.revision="1493" server.etag="&quot;docs/util.write_lock/1493:75e0fb7acc14c6ebde429f6fdac12f7100b8f9a7&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001120121" created="20091001120121" tags="pyapi" >
<pre>!!Description
Create an advisory lock file, containing the pid of the current process. The lock file's name will be the name of the file being locked with a '.' prepended.

!!Parameters
* filename (of the file being locked)

!!Returns
* None

!!Example
See the TiddlyWeb text [[store]] for details.

!!Notes
This is used by the text store to prevent concurrent writes to the same tiddler (to preserve revision handling).</pre>
</div>
<div title="from_svn" server.title="from_svn" server.page.revision="1229" server.etag="&quot;docs/from_svn/1229:1e51d80a40eb01506c24e42594c2872e29e8c8d7&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831172010" created="20090327151757" tags="twanager" >
<pre>{{{from_svn}}} is [[twanager]] command that can retrieve content from an http or file URL and put that content into a bag named in the arguments. The name of the command comes from the type of content it handles: it retrieves {{{.tiddler}}}, {{{.js}}} and {{{.recipe}}} files in the format used in the TiddlyWiki [[subversion repository]]. However, the content does not need to be located in the TiddlyWiki repo, it can be anywhere an http, https, or file url can reach.

If a recipe file is retrieved, it will traverse the recipe and retrieve the tiddlers and javascript named therein.

{{{from_svn}}} is a very useful way to populate a TiddlyWeb installation with existing TiddlyWiki content.</pre>
</div>
<div title="client" server.title="client" server.page.revision="1128" server.etag="&quot;docs/client/1128:5b42e808f6603e66ce43eb8f0cbbd5cb0ecaf4e8&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831171907" created="20090323203107" tags="" >
<pre>Due to [[TiddlyWeb]]'s [[REST]]ful nature, there is not One True Client; any application which supports [[HTTP]] could potentially become a TiddlyWeb client. The most common client of TiddlyWeb is TiddlyWiki.
</pre>
</div>
<div title="Create an Instance" server.title="Create an Instance" server.page.revision="324" server.etag="&quot;docs/Create%20an%20Instance/324:6ee4aa7365c486d8e2e241a8c7c54adb14c9989f&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314182614" created="20090218190627" tags="howto" >
<pre>You need to choose a location for your [[instance]]. If you are using the default text [[store]] that comes with TiddlyWeb this will be a directory on the filesystem. This location is entirely up to you. 

If you have installed [[tiddlywebwiki]] then you have a command called [[twinstance]] which is used to create a new instance. Select a directory where you want the instance to exist and then run the following command:
{{{
$ twinstance myInstanceDirectory
}}}
replacing "myInstanceDirectory" with the name of the directory to be created.
</pre>
</div>
<div title="Using Twanager" server.title="Using Twanager" server.page.revision="1018" server.etag="&quot;docs/Using%20Twanager/1018:4992a08f82d34710c93d97435b054852f4163b20&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090223205130" created="20090223204555" tags="" >
<pre>&lt;&lt;tiddler twanager&gt;&gt;</pre>
</div>
<div title="httplib2" server.title="httplib2" server.page.revision="1242" server.etag="&quot;docs/httplib2/1242:698bdb31eaaad48e68563fed4d6352f4992b83f2&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091008104309" created="20090408215052" tags="" >
<pre>[[httplib2|http://pypi.python.org/pypi/httplib2]] is a Python library for making HTTP requests and dealing with HTTP responses. It is //far// superior to urllib, urllib2 and httplib in that it provides a sensible API that is more comprehensive than any of the other http libraries.

It is used in the TiddlyWeb tests that test the [[HTTP API]] because we need to be able to easy called {{{PUT}}} and {{{DELETE}}} in addition to {{{GET}}} and {{{POST}}}, do correct redirect handling, and properly manage caches with [[ETags|ETag]].</pre>
</div>
<div title="Configuring HTTP Proxy on Windows" server.title="Configuring HTTP Proxy on Windows" server.page.revision="316" server.etag="&quot;docs/Configuring%20HTTP%20Proxy%20on%20Windows/316:54ba0524d3b5fc2d47a8df64ef850c02df874db9&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100703115635" created="20100703115635" tags="config" >
<pre>Control Panel &gt; System &gt; Advanced &gt; Environment variables &gt; New:
{{{
HTTP_PROXY : http://proxy.intra.bt.com:8080
}}}
(opened command prompts might need to be closed and reopened)</pre>
</div>
<div title="Tidders, Bags and Recipes" server.title="Tidders, Bags and Recipes" server.page.revision="865" server.etag="&quot;docs/Tidders%2C%20Bags%20and%20Recipes/865:300b2f2f1cd18d8fac41224db93c51619ef5d1f7&quot;" modifier="fnd" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090722112523" created="20090719155840" tags="" >
<pre>[[Recipes|recipe]] combine [[bags|bag]], which in turn are collections of [[tiddlers|tiddler]].
!Examples 
http://fnd.lewcid.org/tmp/osnet.png
{{{
    Bags                Recipes

    \'''''/
    /     \
   /       \            +---------+
  ( public  ) -+        |         |
   \       /    \       |         |
    ```````      +----&gt; | website |
                  \     |         |
    \'''''/        +    |         |
    /     \        |    +---------+
   /       \       |
  ( editors ) --+  |    +---------+
   \       /     \ |    |         |
    ```````       \|    |         |
                   +--&gt; |   CMS   |
    \'''''/       /     |         |
    /     \      /      |         |
   /       \    /       +---------+
  ( system  ) -+
   \       /    \       +---------+
    ```````      \      |         |
                  \     |         |
    \'''''/        +--&gt; |  wiki   |
    /     \       /     |         |
   /       \     /      |         |
  ( private ) --+       +---------+
   \       /
    ```````
}}}</pre>
</div>
<div title="Developing Client Plugins" server.title="Developing Client Plugins" server.page.revision="355" server.etag="&quot;docs/Developing%20Client%20Plugins/355:f5c62747aeb88cd2916377b04b76d378918b3c68&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100127194047" created="20100127115321" tags="howto dev" creator="fnd.lewcid.org">
<pre>The following instructions assume the use of TiddlyWebWiki.
!Setting Up an Instance with the ~DevStore
* install the [[devstore]] plugin
* use the included //twinstance_dev// script to create a preconfigured dev instance
** alternatively, download {{{tiddlywebconfig.py}}} from [[this repository|http://gist.github.com/280191]] (via the //raw// link) to a temporary directory and, from the same directory, run //twinstance// to create a new [[instance]]
* in the new instance directory, modify or extend {{{tiddlywebconfig.py}}}'s {{{local_instance_tiddlers}}} entry to point to the desired tiddlers on the local hard drive
* changes to the specified tiddlers will be reflected on a simple page reload in the browser
!Modifying an Existing Plugin
TiddlyWebWiki uses [[Cook-style recipes|http://svn.tiddlywiki.org/Trunk/verticals/TiddlyWebWiki/index.recipe]] to indicate the default set of tiddlers in the //system// bag.

If the path in the instance's {{{local_instance_tiddlers}}} is set up properly, the local plugin files can be modified directly.
!Adding a New Plugin
* create a {{{.js}}} file along with a {{{.meta}}} file ([[example|http://svn.tiddlywiki.org/Trunk/association/plugins/TiddlyWebConfig.js.meta]])
* extend {{{local_instance_tiddlers}}} with the path to the {{{.js}}} file:
{{{
'local_instance_tiddlers': {
    'system': [
        '../../../TiddlyWiki/svn.tiddlywiki.org/Trunk/verticals/TiddlyWebWiki/index.recipe',
        '/path/to/foo.js'
    ]
}
}}}
</pre>
</div>
<div title="server side" server.title="server side" server.page.revision="1381" server.etag="&quot;docs/server%20side/1381:5bb4da0900fdeb223fa9832971a718c6455fd5ff&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831150320" created="20090831150320" tags="" >
<pre>In TiddlyWiki parlance, a server side is a web-based service that provided storage of TiddlyWiki data on a web server so that it can be access from multiple client machines and potentially multiple users.

There are several different server sides for TiddlyWiki. Some store entire TiddlyWikis as the addressable unit, others store [[tiddlers|tiddler]] as the addressable unit. TiddlyWeb is the latter type.</pre>
</div>
<div title="Credits" server.title="Credits" server.page.revision="331" server.etag="&quot;docs/Credits/331:e72b4c1f93b9bb4157aceeec8164a3c3a14f21e2&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710153725" created="20090218155450" tags="" >
<pre>TiddlyWeb is very much a standing-on-the-shoulders-of-giants kind of project. It wouldn't exist without the help and input of many people.

ChrisDent wrote a [[CREDITS|http://cdent.tumblr.com/post/59706028/tiddlyweb-credits]] document a while back.</pre>
</div>
<div title="util.write_unlock" server.title="util.write_unlock" server.page.revision="1494" server.etag="&quot;docs/util.write_unlock/1494:3efc7041ad77a70a7e4f50ba789ffab9dc4ed8c9&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001120223" created="20091001120223" tags="pyapi" >
<pre>!!Description
Unlock, without consideration, the lock created [[util.write_lock]] on the same filename.

!!Parameters
* filename

!!Returns
* None

!!Example
See the TiddlyWeb text [[store]] for details.
</pre>
</div>
<div title="TiddlyWebAdaptor" server.title="TiddlyWebAdaptor" server.page.revision="2169" server.etag="&quot;system/TiddlyWebAdaptor/2169:c0b03f3948de16716e6353b5ddedc57c3ef5449a&quot;" modifier="FND" creator="FND" server.workspace="bags/system" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="system" server.permissions="read" server.content-type="text/javascript" modified="200811260000" created="200811260000" tags="excludeLists excludeSearch systemConfig" >
<pre>/***
|''Name''|TiddlyWebAdaptor|
|''Description''|adaptor for interacting with TiddlyWeb|
|''Author:''|FND|
|''Contributors''|Chris Dent, Martin Budden|
|''Version''|1.3.1|
|''Status''|stable|
|''Source''|http://svn.tiddlywiki.org/Trunk/association/adaptors/TiddlyWebAdaptor.js|
|''CodeRepository''|http://svn.tiddlywiki.org/Trunk/association/|
|''License''|[[BSD|http://www.opensource.org/licenses/bsd-license.php]]|
|''CoreVersion''|2.5|
|''Keywords''|serverSide TiddlyWeb|
!Notes
This plugin includes [[jQuery JSON|http://code.google.com/p/jquery-json/]].
!To Do
* createWorkspace
* document custom/optional context attributes (e.g. filters, query, revision) and tiddler fields (e.g. server.title, origin)
!Code
***/
//{{{
(function($) {

var adaptor = config.adaptors.tiddlyweb = function() {};

adaptor.prototype = new AdaptorBase();
adaptor.serverType = "tiddlyweb";
adaptor.serverLabel = "TiddlyWeb";
adaptor.mimeType = "application/json";

adaptor.parsingErrorMessage = "Error parsing result from server";
adaptor.locationIDErrorMessage = "no bag or recipe specified for tiddler"; // TODO: rename

// retrieve current status (requires TiddlyWeb status plugin)
adaptor.prototype.getStatus = function(context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	var uriTemplate = "%0/status";
	var uri = uriTemplate.format([context.host]);
	var req = httpReq("GET", uri, adaptor.getStatusCallback, context,
		null, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getStatusCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		context.serverStatus = $.evalJSON(responseText); // XXX: error handling!?
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// retrieve a list of workspaces
adaptor.prototype.getWorkspaceList = function(context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.workspaces = [];
	var uriTemplate = "%0/recipes"; // XXX: bags?
	var uri = uriTemplate.format([context.host]);
	var req = httpReq("GET", uri, adaptor.getWorkspaceListCallback,
		context, { accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getWorkspaceListCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		try {
			var workspaces = $.evalJSON(responseText);
		} catch(ex) {
			context.status = false; // XXX: correct?
			context.statusText = exceptionText(ex, adaptor.parsingErrorMessage);
			if(context.callback) {
				context.callback(context, context.userParams);
			}
			return;
		}
		context.workspaces = workspaces.map(function(itm) { return { title: itm }; });
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// retrieve a list of tiddlers
adaptor.prototype.getTiddlerList = function(context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	var uriTemplate = "%0/%1/%2/tiddlers%3";
	var params = context.filters ? "?" + context.filters : "";
	if(context.format) {
		params = context.format + params;
	}
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([context.host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name), params]);
	var req = httpReq("GET", uri, adaptor.getTiddlerListCallback,
		context, { accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getTiddlerListCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		context.tiddlers = [];
		try {
			var tiddlers = $.evalJSON(responseText); //# NB: not actual tiddler instances
		} catch(ex) {
			context.status = false; // XXX: correct?
			context.statusText = exceptionText(ex, adaptor.parsingErrorMessage);
			if(context.callback) {
				context.callback(context, context.userParams);
			}
			return;
		}
		for(var i = 0; i &lt; tiddlers.length; i++) {
			var t = tiddlers[i];
			var tiddler = new Tiddler(t.title);
			t.created = Date.convertFromYYYYMMDDHHMM(t.created);
			t.modified = Date.convertFromYYYYMMDDHHMM(t.modified);
			tiddler.assign(t.title, t.text, t.modifier, t.modified, t.tags, t.created, t.fields);
			tiddler.fields["server.type"] = adaptor.serverType;
			tiddler.fields["server.host"] = AdaptorBase.minHostName(context.host);
			tiddler.fields["server.workspace"] = context.workspace;
			tiddler.fields["server.page.revision"] = t.revision;
			context.tiddlers.push(tiddler);
		}
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// perform global search
adaptor.prototype.getSearchResults = function(context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	var uriTemplate = "%0/search?q=%1%2";
	var filterString = context.filters ? ";" + context.filters : "";
	var uri = uriTemplate.format([context.host, context.query, filterString]); // XXX: parameters need escaping?
	var req = httpReq("GET", uri, adaptor.getSearchResultsCallback,
		context, { accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getSearchResultsCallback = function(status, context, responseText, uri, xhr) {
	adaptor.getTiddlerListCallback(status, context, responseText, uri, xhr); // XXX: use apply?
};

// retrieve a particular tiddler's revisions
adaptor.prototype.getTiddlerRevisionList = function(title, limit, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	var uriTemplate = "%0/%1/%2/tiddlers/%3/revisions";
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([context.host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name), adaptor.normalizeTitle(title)]);
	var req = httpReq("GET", uri, adaptor.getTiddlerRevisionListCallback,
		context, { accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getTiddlerRevisionListCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		context.revisions = [];
		try {
			var tiddlers = $.evalJSON(responseText); //# NB: not actual tiddler instances
		} catch(ex) {
			context.status = false; // XXX: correct?
			context.statusText = exceptionText(ex, adaptor.parsingErrorMessage);
			if(context.callback) {
				context.callback(context, context.userParams);
			}
			return;
		}
		for(var i = 0; i &lt; tiddlers.length; i++) {
			var t = tiddlers[i];
			var tiddler = new Tiddler(t.title);
			tiddler.assign(t.title, null, t.modifier, Date.convertFromYYYYMMDDHHMM(t.modified),
				t.tags, Date.convertFromYYYYMMDDHHMM(t.created), t.fields);
			tiddler.fields["server.type"] = adaptor.serverType;
			tiddler.fields["server.host"] = AdaptorBase.minHostName(context.host);
			tiddler.fields["server.page.revision"] = t.revision;
			tiddler.fields["server.workspace"] = "bags/" + t.bag;
			context.revisions.push(tiddler);
		}
		var sortField = "server.page.revision";
		context.revisions.sort(function(a, b) {
			return a.fields[sortField] &lt; b.fields[sortField] ? 1 :
				(a.fields[sortField] == b.fields[sortField] ? 0 : -1);
		});
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// retrieve an individual tiddler revision -- XXX: breaks with standard arguments list -- XXX: convenience function; simply use getTiddler?
adaptor.prototype.getTiddlerRevision = function(title, revision, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.revision = revision;
	return this.getTiddler(title, context, userParams, callback);
};

// retrieve an individual tiddler
//# context is an object with members host and workspace
//# callback is passed the new context and userParams
adaptor.prototype.getTiddler = function(title, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = title;
	if(context.revision) {
		var uriTemplate = "%0/%1/%2/tiddlers/%3/revisions/%4";
	} else {
		uriTemplate = "%0/%1/%2/tiddlers/%3";
	}
	if(!context.tiddler) {
		context.tiddler = new Tiddler(title);
	}
	context.tiddler.fields["server.type"] = adaptor.serverType;
	context.tiddler.fields["server.host"] = AdaptorBase.minHostName(context.host);
	context.tiddler.fields["server.title"] = title; //# required for detecting renames
	context.tiddler.fields["server.workspace"] = context.workspace;
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([context.host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name), adaptor.normalizeTitle(title),
		context.revision]);
	var req = httpReq("GET", uri, adaptor.getTiddlerCallback, context,
		{ accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getTiddlerCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		try {
			var t = $.evalJSON(responseText); //# NB: not an actual tiddler instance
		} catch(ex) {
			context.status = false;
			context.statusText = exceptionText(ex, adaptor.parsingErrorMessage);
			if(context.callback) {
				context.callback(context, context.userParams);
			}
			return;
		}
		context.tiddler.assign(context.tiddler.title, t.text, t.modifier,
			Date.convertFromYYYYMMDDHHMM(t.modified), t.tags || [],
			Date.convertFromYYYYMMDDHHMM(t.created), context.tiddler.fields,
			t.creator); // XXX: merge extended fields!?
		context.tiddler.fields["server.bag"] = t.bag;
		if(t.recipe) {
			context.tiddler.fields["server.recipe"] = t.recipe;
		}
		context.tiddler.fields["server.workspace"] = "bags/" + t.bag;
		context.tiddler.fields["server.page.revision"] = t.revision;
		context.tiddler.fields["server.permissions"] = t.permissions.join(", ");
		if(t.type &amp;&amp; t.type != "None") {
			context.tiddler.fields["server.content-type"] = t.type;
		}
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// retrieve tiddler chronicle (all revisions)
adaptor.prototype.getTiddlerChronicle = function(title, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = title;
	var uriTemplate = "%0/%1/%2/tiddlers/%3/revisions?fat=1";
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([context.host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name), adaptor.normalizeTitle(title)]);
	var req = httpReq("GET", uri, adaptor.getTiddlerChronicleCallback,
		context, { accept: adaptor.mimeType }, null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.getTiddlerChronicleCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(status) {
		context.responseText = responseText;
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// store an individual tiddler
adaptor.prototype.putTiddler = function(tiddler, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = tiddler.title;
	context.tiddler = tiddler;
	context.host = context.host || this.fullHostName(tiddler.fields["server.host"]);
	var uriTemplate = "%0/%1/%2/tiddlers/%3";
	try {
		context.workspace = context.workspace || tiddler.fields["server.workspace"];
		var workspace = adaptor.resolveWorkspace(context.workspace);
	} catch(ex) {
		return adaptor.locationIDErrorMessage;
	}
	var uri = uriTemplate.format([context.host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name),
		adaptor.normalizeTitle(tiddler.title)]);
	var etag = adaptor.generateETag(workspace, tiddler);
	var headers = etag ? { "If-Match": '"' + etag + '"' } : null;
	var payload = {
		title: tiddler.title,
		type: tiddler.fields["server.content-type"] || null,
		text: tiddler.text,
		modifier: tiddler.modifier,
		tags: tiddler.tags,
		fields: $.extend({}, tiddler.fields)
	};
	delete payload.fields.changecount;
	payload = $.toJSON(payload);
	var req = httpReq("PUT", uri, adaptor.putTiddlerCallback,
		context, headers, payload, adaptor.mimeType, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.putTiddlerCallback = function(status, context, responseText, uri, xhr) {
	context.status = [204, 1223].contains(xhr.status);
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(context.status) {
		context.adaptor.getTiddler(context.tiddler.title, context,
			context.userParams, context.callback);
	} else if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// store a tiddler chronicle
adaptor.prototype.putTiddlerChronicle = function(revisions, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = revisions[0].title;
	var headers = null;
	var uriTemplate = "%0/%1/%2/tiddlers/%3/revisions";
	var host = context.host || this.fullHostName(tiddler.fields["server.host"]);
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name),
		adaptor.normalizeTitle(context.title)]);
	if(workspace.type == "bag") { // generate ETag
		var etag = [adaptor.normalizeTitle(workspace.name),
			adaptor.normalizeTitle(context.title), 0].join("/"); //# zero-revision prevents overwriting existing contents
		headers = { "If-Match": '"' + etag + '"' };
	}
	var payload = $.toJSON(revisions);
	var req = httpReq("POST", uri, adaptor.putTiddlerChronicleCallback,
		context, headers, payload, adaptor.mimeType, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.putTiddlerChronicleCallback = function(status, context, responseText, uri, xhr) {
	context.status = [204, 1223].contains(xhr.status);
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// store a collection of tiddlers (import TiddlyWiki HTML store)
adaptor.prototype.putTiddlerStore = function(store, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	var uriTemplate = "%0/%1/%2/tiddlers";
	var host = context.host;
	var workspace = adaptor.resolveWorkspace(context.workspace);
	var uri = uriTemplate.format([host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name)]);
	var req = httpReq("POST", uri, adaptor.putTiddlerStoreCallback,
		context, null, store, "text/x-tiddlywiki", null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.putTiddlerStoreCallback = function(status, context, responseText, uri, xhr) {
	context.status = [204, 1223].contains(xhr.status);
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// rename an individual tiddler or move it to a different workspace -- TODO: make {from|to}.title optional
//# from and to are objects with members title and workspace (bag; optional),
//# representing source and target tiddler, respectively
adaptor.prototype.moveTiddler = function(from, to, context, userParams, callback) { // XXX: rename parameters (old/new)?
	var self = this;
	var newTiddler = store.getTiddler(from.title) || store.getTiddler(to.title); //# local rename might already have occurred
	var oldTiddler = $.extend(true, {}, newTiddler); //# required for eventual deletion
	oldTiddler.title = from.title; //# required for original tiddler's ETag
	var _getTiddlerChronicle = function(title, context, userParams, callback) {
		return self.getTiddlerChronicle(title, context, userParams, callback);
	};
	var _putTiddlerChronicle = function(context, userParams) {
		if(!context.status) {
			return callback(context, userParams);
		}
		var revisions = $.evalJSON(context.responseText); // XXX: error handling?
		// change current title while retaining previous location
		for(var i = 0; i &lt; revisions.length; i++) {
			if(!revisions[i].fields.origin) { // NB: origin = "&lt;workspace&gt;/&lt;title&gt;"
				revisions[i].fields.origin = ["bags", revisions[i].bag, revisions[i].title].join("/");
			}
			revisions[i].title = to.title;
		}
		// add new revision
		var rev = $.extend({}, revisions[0]);
		rev.title = to.title;
		$.each(newTiddler, function(i, item) {
			if(!$.isFunction(item)) {
				rev[i] = item;
			}
		});
		rev.revision++;
		rev.created = rev.created.convertToYYYYMMDDHHMM();
		rev.modified = new Date().convertToYYYYMMDDHHMM();
		delete rev.fields.changecount;
		revisions.unshift(rev);
		if(to.workspace) {
			context.workspace = to.workspace;
		} else if(context.workspace.substring(0, 4) != "bags") { // NB: target workspace must be a bag
			context.workspace = "bags/" + rev.bag;
		}
		var subCallback = function(context, userparams) {
			var rev = "server.page.revision";
			newTiddler.fields[rev] = parseInt(newTiddler.fields[rev], 10) + 1; // XXX: extended fields' values should be strings!?
			newTiddler.fields["server.title"] = to.title;
			_deleteTiddler(context, userparams);
		};
		return self.putTiddlerChronicle(revisions, context, context.userParams, subCallback);
	};
	var _deleteTiddler = function(context, userParams) {
		if(!context.status) {
			return callback(context, userParams);
		}
		context.callback = null;
		return self.deleteTiddler(oldTiddler, context, context.userParams, callback);
	};
	callback = callback || function() {};
	context = this.setContext(context, userParams);
	context.host = context.host || oldTiddler.fields["server.host"];
	context.workspace = from.workspace || oldTiddler.fields["server.workspace"];
	return _getTiddlerChronicle(from.title, context, userParams, _putTiddlerChronicle);
};

// delete an individual tiddler
adaptor.prototype.deleteTiddler = function(tiddler, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = tiddler.title; // XXX: not required!?
	var uriTemplate = "%0/%1/%2/tiddlers/%3";
	var host = context.host || this.fullHostName(tiddler.fields["server.host"]);
	try {
		var workspace = adaptor.resolveWorkspace(tiddler.fields["server.workspace"]);
	} catch(ex) {
		return adaptor.locationIDErrorMessage;
	}
	var uri = uriTemplate.format([host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name),
		adaptor.normalizeTitle(tiddler.title)]);
	var etag = adaptor.generateETag(workspace, tiddler);
	var headers = etag ? { "If-Match": '"' + etag + '"' } : null;
	var req = httpReq("DELETE", uri, adaptor.deleteTiddlerCallback, context, headers,
		null, null, null, null, true);
	return typeof req == "string" ? req : true;
};

adaptor.deleteTiddlerCallback = function(status, context, responseText, uri, xhr) {
	context.status = [204, 1223].contains(xhr.status);
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// compare two revisions of a tiddler (requires TiddlyWeb differ plugin)
//# if context.rev1 is not specified, the latest revision will be used for comparison
//# if context.rev2 is not specified, the local revision will be sent for comparison
//# context.format is a string as determined by the TiddlyWeb differ plugin
adaptor.prototype.getTiddlerDiff = function(title, context, userParams, callback) {
	context = this.setContext(context, userParams, callback);
	context.title = title;

	var tiddler = store.getTiddler(title);
	try {
		var workspace = adaptor.resolveWorkspace(tiddler.fields["server.workspace"]);
	} catch(ex) {
		return adaptor.locationIDErrorMessage;
	}
	var tiddlerRef = [workspace.type + "s", workspace.name, tiddler.title].join("/");

	var rev1 = context.rev1 ? [tiddlerRef, context.rev1].join("/") : tiddlerRef;
	var rev2 = context.rev2 ? [tiddlerRef, context.rev2].join("/") : null;

	var uriTemplate = "%0/diff?rev1=%1";
	if(rev2) {
		uriTemplate += "&amp;rev2=%2";
	}
	if(context.format) {
		uriTemplate += "&amp;format=%3";
	}
	var host = context.host || this.fullHostName(tiddler.fields["server.host"]);
	var uri = uriTemplate.format([host, adaptor.normalizeTitle(rev1),
		adaptor.normalizeTitle(rev2), context.format]);

	if(rev2) {
		var req = httpReq("GET", uri, adaptor.getTiddlerDiffCallback, context, null,
			null, null, null, null, true);
	} else {
		var payload = {
			title: tiddler.title,
			text: tiddler.text,
			modifier: tiddler.modifier,
			tags: tiddler.tags,
			fields: $.extend({}, tiddler.fields)
		}; // XXX: missing attributes!?
		payload = $.toJSON(payload);
		req = httpReq("POST", uri, adaptor.getTiddlerDiffCallback, context,
			null, payload, adaptor.mimeType, null, null, true);
	}
	return typeof req == "string" ? req : true;
};

adaptor.getTiddlerDiffCallback = function(status, context, responseText, uri, xhr) {
	context.status = status;
	context.statusText = xhr.statusText;
	context.httpStatus = xhr.status;
	context.uri = uri;
	if(status) {
		context.diff = responseText;
	}
	if(context.callback) {
		context.callback(context, context.userParams);
	}
};

// generate tiddler information
adaptor.prototype.generateTiddlerInfo = function(tiddler) {
	var info = {};
	var uriTemplate = "%0/%1/%2/tiddlers/%3";
	var host = this.host || tiddler.fields["server.host"]; // XXX: this.host obsolete?
	host = this.fullHostName(host);
	var workspace = adaptor.resolveWorkspace(tiddler.fields["server.workspace"]);
	info.uri = uriTemplate.format([host, workspace.type + "s",
		adaptor.normalizeTitle(workspace.name),
		adaptor.normalizeTitle(tiddler.title)]);
	return info;
};

adaptor.resolveWorkspace = function(workspace) {
	var components = workspace.split("/");
	return {
		type: components[0] == "bags" ? "bag" : "recipe",
		name: components[1] || components[0]
	};
};

adaptor.generateETag = function(workspace, tiddler) {
	var etag = null;
	if(workspace.type == "bag") {
		var revision = tiddler.fields["server.page.revision"];
		if(typeof revision == "undefined") {
			revision = "0";
		} else if(revision == "false") {
			return null;
		}
		etag = [adaptor.normalizeTitle(workspace.name),
			adaptor.normalizeTitle(tiddler.title), revision].join("/");
	}
	return etag;
};

adaptor.normalizeTitle = function(title) {
	return encodeURIComponent(title);
};

})(jQuery);


/*
 * jQuery JSON Plugin
 * version: 1.3
 * source: http://code.google.com/p/jquery-json/
 * license: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function($){function toIntegersAtLease(n)
{return n&lt;10?'0'+n:n;}
Date.prototype.toJSON=function(date)
{return this.getUTCFullYear()+'-'+
toIntegersAtLease(this.getUTCMonth())+'-'+
toIntegersAtLease(this.getUTCDate());};var escapeable=/["\\\x00-\x1f\x7f-\x9f]/g;var meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'};$.quoteString=function(string)
{if(escapeable.test(string))
{return'"'+string.replace(escapeable,function(a)
{var c=meta[a];if(typeof c==='string'){return c;}
c=a.charCodeAt();return'\\u00'+Math.floor(c/16).toString(16)+(c%16).toString(16);})+'"';}
return'"'+string+'"';};$.toJSON=function(o,compact)
{var type=typeof(o);if(type=="undefined")
return"undefined";else if(type=="number"||type=="boolean")
return o+"";else if(o===null)
return"null";if(type=="string")
{return $.quoteString(o);}
if(type=="object"&amp;&amp;typeof o.toJSON=="function")
return o.toJSON(compact);if(type!="function"&amp;&amp;typeof(o.length)=="number")
{var ret=[];for(var i=0;i&lt;o.length;i++){ret.push($.toJSON(o[i],compact));}
if(compact)
return"["+ret.join(",")+"]";else
return"["+ret.join(", ")+"]";}
if(type=="function"){throw new TypeError("Unable to convert object of type 'function' to json.");}
var ret=[];for(var k in o){var name;type=typeof(k);if(type=="number")
name='"'+k+'"';else if(type=="string")
name=$.quoteString(k);else
continue;var val=$.toJSON(o[k],compact);if(typeof(val)!="string"){continue;}
if(compact)
ret.push(name+":"+val);else
ret.push(name+": "+val);}
return"{"+ret.join(", ")+"}";};$.compactJSON=function(o)
{return $.toJSON(o,true);};$.evalJSON=function(src)
{return eval("("+src+")");};$.secureEvalJSON=function(src)
{var filtered=src;filtered=filtered.replace(/\\["\\\/bfnrtu]/g,'@');filtered=filtered.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']');filtered=filtered.replace(/(?:^|:|,)(?:\s*\[)+/g,'');if(/^[\],:{}\s]*$/.test(filtered))
return eval("("+src+")");else
throw new SyntaxError("Error parsing JSON, source is not valid.");};})(jQuery);
//}}}</pre>
</div>
<div title="comment_1239055224718" server.title="comment_1239055224718" server.page.revision="1549" server.etag="&quot;comments/comment_1239055224718/1549:703b10db83ed62746938c86e69116b235c6eb130&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090406220027" created="20090406220027" tags="comment" >
<pre>Potentially useful additions, before the server line:
{{{
twanager adduser $1 $2
twanager formform registrationex
}}}

Then if you run the script with two arguments (of username and password) you will end up with a user in the system, and a form id associated with registrationex.</pre>
</div>
<div title="Retrieving a Recipe" server.title="Retrieving a Recipe" server.page.revision="815" server.etag="&quot;docs/Retrieving%20a%20Recipe/815:45e5bf1e8ce6683587902ad6a4e4eedb19a564dd&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X GET -H 'Accept: application/json' \
	http://localhost:8080/recipes/default
}}}</pre>
</div>
<div title="control.determine_tiddler_bag_from_recipe" server.title="control.determine_tiddler_bag_from_recipe" server.page.revision="1142" server.etag="&quot;docs/control.determine_tiddler_bag_from_recipe/1142:6642c74c418afe890144d2e46254ce6b8c684f33&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001112418" created="20091001110948" tags="pyapi" >
<pre>!!Description
Given the knowns of a [[recipe]] and a [[tiddler]], determine the [[bag]] which is where the tiddler came from. Generally done to determine what bag we need to load from the [[store]] to (eventually) get the tiddler.

!!Parameters
* [[recipe]]
* [[tiddler]]
* //[[environ]]=None//

!!Returns
* [[bag]]

Raises {{{NoBagError}}} if no bag containing the tiddler can be determined.

!!Example
{{{
    tiddler = Tiddler('somename')
    recipe = Recipe('foobar')
    recipe = store.get(recipe)
    bag = control.determine_tiddler_bag_from_recipe(recipe, tiddler)
}}}

!!Notes
This code is used when getting or deleting a tiddler via a recipe-based URL. When putting a tiddler via a recipe-based URL [[control.determine_bag_for_tiddler]] is used.

If an {{{environ}}} parameter is provided this is assumed to be a {{{dict}}} which is the [[WSGI]] [[environ]]. It is used to process the {{{_recipe_template}}} (see the [[source|source repository]] for details).
</pre>
</div>
<div title="Unicode Handling" server.title="Unicode Handling" server.page.revision="965" server.etag="&quot;docs/Unicode%20Handling/965:2a24a777cd642ce410624dad6ba3395af8c7bf0a&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206121137" created="20090422153651" tags="codeSnippets howto dev" >
<pre>[[TiddlyWeb]] assumes that all input and output is ~UTF-8 encoded. Internally strings are managed as unicode.

Conversion between the two formats should be limited to entry and exit points and is managed as:
{{{
    unicode = str.decode('UTF-8')
    string = unicode.encode('UTF-8')
}}}
</pre>
</div>
<div title="Performance and Scaling" server.title="Performance and Scaling" server.page.revision="757" server.etag="&quot;docs/Performance%20and%20Scaling/757:041caabe4cb59dbd2957206b641eeb702abbc880&quot;" modifier="cdent.tumblr.com" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091104171349" created="20091029104141" tags="" >
<pre>* caching (e.g. via [[cachinghoster]] and/or [[caching-store]]) can be used to reduce expensive computations
* indexing (e.g. with the [[tiddlywebplugins.whoosher]] plugin) can help with searches across all tiddlers
* a customized store implementation might be used for efficient [[data mapping|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/mappingsqlstore/]]

* having lots of bags is //far// better than having bags with lots of tiddlers in them
* when filtering a bag, TiddlyWeb looks at every single tiddler in the bag
&gt; &lt;cdent&gt; if you know that you are always going to be doing a particular filter, that might be sign that you actually want to have a bag that indicates that state, rather than a field</pre>
</div>
<div title="system_plugins" server.title="system_plugins" server.page.revision="1407" server.etag="&quot;docs/system_plugins/1407:c50895647d31d0ac92be7347ad4db1dfc74c3486&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206120108" created="20091206120108" tags="config" >
<pre>{{{system_plugins}}} is a [[config]] setting in [[tiddlywebconfig.py]] that lists the [[plugins]] which are configured for the running TiddlyWeb server. Another setting [[twanager_plugins]] lists those plugins which add functionality to the [[twanager]] command line tool. Some might be listed in both.

The value of the config item is a Python list of strings. Each string is the name of a Python package or module located either in the [[instance]] directory or somewhere on [[sys.path]].</pre>
</div>
<div title="MarkupPreHead" server.title="MarkupPreHead" server.page.revision="2016" server.etag="&quot;tpc/MarkupPreHead/2016:5ccd239af8fa9ac84d88c3902b3a37091cf3c032&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090509222056" created="20090509222056" tags="" >
<pre>&lt;link rel="alternate" type="application/atom+xml" title="Atom" href="/wiki/recipes/docs/tiddlers.atom?sort=-modified;limit=20" /&gt;
&lt;link rel="canonical" href="/wiki/recipes/docs/tiddlers" /&gt;
&lt;script type="text/javascript"&gt;
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
&lt;/script&gt;</pre>
</div>
<div title="comment_1250060488434" server.title="comment_1250060488434" server.page.revision="1595" server.etag="&quot;comments/comment_1250060488434/1595:d285fdbe38ea748a1373fe746dfc70a5958c01e1&quot;" modifier="fnd" creator="fnd" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090812065925" created="20090812065925" tags="comment" >
<pre>Regarding {{{tiddler_written}}}, it //might// be nice to have event handling for this sort of thing. (Might be worth a ticket?)

As for bag performance, it'd be nice if you could elaborate on that (elsewhere perhaps). It sounds rather negative this way...</pre>
</div>
<div title="tiddlyeditor" server.title="tiddlyeditor" server.page.revision="1418" server.etag="&quot;docs/tiddlyeditor/1418:a0c4199569dc1defc4b98c6e42a93280c20b7693&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090421103448" created="20090409165353" tags="plugin" >
<pre>The tiddlyeditor [[plugin]] provides a quick solution for editing a single [[tiddler]] when you visit the HTML representation of that tiddler. It adds an {{{Edit}}} link to the page, which points to a special {{{tiddlyeditor}}} URL. That URL responds with a custom TiddlyWiki generated to allow you to edit //just// that tiddler.

The plugin is installed on this server, see the [[HTML representation of this tiddler|http://tiddlyweb.peermore.com/wiki/recipes/docs/tiddlers/tiddlyeditor]] to see the Edit link. ''Note:'' If you follow this particular Edit link you will be presented with a [[challenger]] that will not let you pass.

The code can be found at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins]].</pre>
</div>
<div title="Using TiddlyWeb" server.title="Using TiddlyWeb" server.page.revision="2194" server.etag="&quot;docs/Using%20TiddlyWeb/2194:1ae3163f547e473f4fbf6c5e68be0c4a295e881f&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830233830" created="20090218163422" tags="" >
<pre>Once you have TiddlyWeb [[installed|Installing TiddlyWeb]], you can use it. To do so you must create an [[instance]]; [[mount]] that instance in/on a server; and work with that content through the HTTP API, the command line or the Python API:
* [[Create an Instance]]
* [[Mount a Server]]
* [[HTTP API]]
* [[Using Twanager]]
* [[Python API]]
* [[Standard Operations]]
</pre>
</div>
<div title="MarkupPostBody" server.title="MarkupPostBody" server.page.revision="719" server.etag="&quot;docs/MarkupPostBody/719:be2e485966fba678960dbbf420d9d94a0c9b4651&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090806144105" created="20090420170937" tags="" >
<pre>&lt;div id="adsense" style="display:none"&gt;
&lt;!-- &lt;div id="twitter_div"&gt;
&lt;h2 style="display: none;" &gt;Twitter Updates&lt;/h2&gt;
&lt;ul id="twitter_update_list"&gt;&lt;/ul&gt;
&lt;a href="http://twitter.com/tiddlyweb" id="twitter-link" style="display:block;text-align:right;"&gt;follow on Twitter&lt;/a&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="http://twitter.com/javascripts/blogger.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://twitter.com/statuses/user_timeline/tiddlyweb.json?callback=twitterCallback2&amp;count=1"&gt;&lt;/script
--!&gt;
&lt;/div&gt;
</pre>
</div>
<div title="handlerComment1256301846403" server.title="handlerComment1256301846403" server.page.revision="1597" server.etag="&quot;comments/handlerComment1256301846403/1597:8408a30363446b387a025fa662261a6f79568c43&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20091023124739" created="20091023124739" tags="comment" >
<pre>Note that response headers must to be regular strings, not Unicode.</pre>
</div>
<div title="googleappengine" server.title="googleappengine" server.page.revision="1235" server.etag="&quot;docs/googleappengine/1235:a9f9bb764eb20455dac560825b34220c41899989&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314161919" created="20090407183946" tags="" >
<pre>The googleappengine code provides necessary extensions and adjustments to TiddlyWeb to make it work on [[Google App Engine]]. This is a quite exciting but rather advanced collection of code (compared to some of the other plugins) that requires a fair amount of work for someone to use. The included {{{README}}} file may help.

The code can be found at [[github|http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/googleappengine/]].

A running version of this code can be found at http://tiddlyweb.appspot.com/ and http://tiddlywebwiki.appspot.com/

A blog post [[describes how to set it up|http://cdent.tumblr.com/post/278948050/smooth-tiddlyweb-on-app-engine]].
</pre>
</div>
<div title="/recipes/{recipe_name}" server.title="/recipes/{recipe_name}" server.page.revision="217" server.etag="&quot;docs/%2Frecipes%2F%7Brecipe_name%7D/217:cfdd3fd2d2aa9fc9abd453aa75ebd28bb48f8061&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314165554" created="20090511103931" tags="rep:json method:put method:delete rep:html httpapi method:get" >
<pre>!Resource
A single [[recipe]] on the system.

!Representations
; {{{text/html}}}
: An HTML presentation of the description of the recipes, a list of the bags and filters which make up the recipe, and a link to its list of tiddlers.
; {{{application/json}}}
: [[JSON]] representation of the recipe. See [[JSON recipe]].

!Methods
!! {{{GET}}}
Get the recipe. The [[current user]] must pass the read [[constraint]].
!! {{{PUT}}}
Create or edit a named recipe. The create a new recipe, the current user must pass the [[recipe_create_policy]] config setting. To edit an existing recipe, the current user must pass the manage constraint.
!! {{{DELETE}}}
Remove the recipe. Tiddlers are not affected. To delete a recipe the current user must pass the manage constraint. When deleting a recipe, what "delete" means is dependent on the current [[store]]. In the text store, for example, it means the recipe is gone, forever. In other stores it may mean that the recipe is flagged as deleted, and could be administratively undeleted in the future.

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/recipes/default
</pre>
</div>
<div title="comment_1245274314005" server.title="comment_1245274314005" server.page.revision="1576" server.etag="&quot;comments/comment_1245274314005/1576:a4f3900c097a6698b8e22b2e362b85007711cfa3&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090617213154" created="20090617213154" tags="comment" >
<pre>Yes, {{{debug_level}}} is obsolete.</pre>
</div>
<div title="pyapi" server.title="pyapi" server.page.revision="1312" server.etag="&quot;docs/pyapi/1312:a246788709cce974e5894ff903dbc2147514e4ec&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001105024" created="20091001105024" tags="" >
<pre>Methods and functions of the [[Python API]].</pre>
</div>
<div title="Downloads" server.title="Downloads" server.page.revision="374" server.etag="&quot;docs/Downloads/374:18424256750866c74f9dac255ec90544d1896d9e&quot;" modifier="cdent.livejournal.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090223162211" created="20090223155602" tags="" >
<pre>
TiddlyWeb is available in a variety of forms. If you don't need the source, just want to run it, see [[Installing TiddlyWeb]].

If you want the source you can get it in three ways:
# Check it out from the [[source repository]].
# Get a tarball from [[pypi|http://pypi.python.org/pypi/tiddlyweb]].
# Get a tarball from http://tiddlyweb.peermore.com/dist/.

Learn about [[Developing With TiddlyWeb]].</pre>
</div>
<div title="/" server.title="/" server.page.revision="146" server.etag="&quot;docs/%2F/146:f5b58b31c138764f07946b15e0e766fb4a8644d5&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511125919" created="20090315191700" tags="rep:html method:get httpapi" >
<pre>
!Resource
The starting point of the [[HTTP API]].

!Representations
; {{{text/html}}}
: By default root returns a very simple HTML page linking to [[recipes|/recipes]] and [[bags|/bags]]. It does not do [[content negotiation]].

!Methods
!!{{{GET}}}
Get the resource, as HTML.

!Notes
The resource is commonly overridden by [[plugins]].

!Example
There is no example for this resource as it is overridden on this server by the [[cachinghoster]] [[plugin]].</pre>
</div>
<div title="wikitext.render_wikitext" server.title="wikitext.render_wikitext" server.page.revision="1505" server.etag="&quot;docs/wikitext.render_wikitext/1505:2f2faba1d7d8b0945310d2436808d717b6e1f992&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001121009" created="20091001121009" tags="pyapi" >
<pre>!!Description
Render a [[tiddler's|tiddler]] contents and attributes to some form, usually, but not always, HTML.

!!Parameters
* [[tiddler]]
* //[[environ]]=None//

!!Returns
* unicode

!!Example
{{{
    tiddler = Tiddler('hello')
    tiddler.text = '!Hello'
    html = wikitext.render_wikitext(tiddler, environ)
}}}

!!Notes
The environ is used to determine what renderer to use based on [[wikitext.type_render_map]] and [[wikitext.default_renderer]] in [[tiddlyweb.config]]. {{{type_render_map}}} is a mapping of MIME-types (or psuedo-MIME-types) to [[renderer]] code. If the provided tiddler has the {{{type}}} attribute set, and it is in this map, that renderer will be used. Otherwise the renderer in {{{default_renderer}}} is used.</pre>
</div>
<div title="devstore" server.title="devstore" server.page.revision="1164" server.etag="&quot;docs/devstore/1164:4c7119f065faf294753b922b68a53f7cf707b476&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100127115321" created="20091029160534" tags="" creator="fnd.lewcid.org">
<pre>[[store]] implementation to simplify client-side development

available [[via PyPI|http://pypi.python.org/pypi/tiddlywebplugins.devstore]] ({{{$ pip install -U tiddlywebplugins.devstore}}})
source [[on GitHub|http://github.com/FND/tiddlyweb-plugins/tree/master/devstore]]</pre>
</div>
<div title="Futures" server.title="Futures" server.page.revision="2193" server.etag="&quot;docs/Futures/2193:a4db7e9d0e5604a5a478d6ce15fea754f04d2be3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830233709" created="20100313155232" tags="" >
<pre>Now that TiddlyWeb has reached version 1.0 (and beyond) it can be claimed that the general purpose of TiddlyWeb has been filled: create a server-side store for Tiddly* content where tiddlers are first-class entities with their own URIs.

Versions of TiddlyWeb up to and including version 1.0.x have intentionally //not// paid attention to performance, conscision and of ease of use in favor of:

* readability
* testability
* transparency
* extensibility
* duplicability

This has allowed users and developers to prove out the [[HTTP API]] and the architecture in a fairly "close" to the implementation fashion.

TiddlyWeb 1.2 has improved upon 1.0 by addressing some of the performance concerns. The changes are described in [[UPGRADE1.0to1.2|http://github.com/tiddlyweb/tiddlyweb/raw/master/UPGRADE1.0to1.2]].

In the next phase of development ease of use concerns should be addressed.

!Ease of Use
Ease of use is entirely context dependent. Much of the standard UI for TiddlyWeb is managed through [[tiddlywebwiki]] therefore ease of use work should focus there. Ease of use can be divided into two realms: Getting TiddlyWebWiki installed and running, and actually using it.

Many of the complaints with installation are general to installing any Python software, so solutions to those general problems should help with TiddlyWeb as well. These include things like py2exe, py2app, packing debs and RPMS and the old standby of more and more clear documentation.

When using TiddlyWebWiki, the features and benefits of using TiddlyWeb are insufficiently clear. The bag and recipe concepts are not native to TiddlyWiki, so additional plugin support is required to take full advantage of them. Some features that should be explored include:

* In TiddlyWiki ways to move content between bags and recipes and to create new ones.
* More visual cues in the UI of how bag policy settings are impacting the actions that can be performed on the tiddler currenty in focus.
* More effective lazy loading of tiddlers from the server.
* Notification from or polling of the server when there is new content available.
* Conflict resolution when the server responds with a 412.
* Support existing patterns of TiddlyWiki behavior, notably import through the backstage.

Each of these, though, must be considered in the context of people actual doing them. The features need to more than just available, they need to be useful and essentially self-documenting.

See also [[TWW task dredge]].
</pre>
</div>
<div title="How do I create or update a tiddler over HTTP?" server.title="How do I create or update a tiddler over HTTP?" server.page.revision="492" server.etag="&quot;docs/How%20do%20I%20create%20or%20update%20a%20tiddler%20over%20HTTP%3F/492:8e8b207bcea59d13a0fd3329684c1e2310df7071&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511135226" created="20090511135124" tags="faq" >
<pre>A [[tiddler]] can be created or updated over HTTP by using the [[HTTP API]] to access [[/bags/{bag_name}/tiddlers/{tiddler_title}]] and sending a {{{PUT}}} request containing a [[JSON tiddler]]. The content-type header must be set to {{{application/json}}}.

For a tiddler that already exists in the store, to make edits the [[current user]] must pass the edit [[constraint]] on the bag. To create a new tiddler, the current user must pass the create constraint.

See [[How can I use curl to create stuff in TiddlyWeb?]] for a simple example.</pre>
</div>
<div title="comment_1244147335110" server.title="comment_1244147335110" server.page.revision="1572" server.etag="&quot;comments/comment_1244147335110/1572:a8086903ca33d7fb614a159b7ce803379843b9c9&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090604202855" created="20090604202855" tags="comment" >
<pre>This has been fixed in releases after {{{0.9.37}}}</pre>
</div>
<div title="comment_1242712401842" server.title="comment_1242712401842" server.page.revision="1560" server.etag="&quot;comments/comment_1242712401842/1560:5a2924696c08f2db5c92c2e1b169a8b3d035b008&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090519055322" created="20090519055322" tags="comment" >
<pre>Thanks. This makes perfect sense.</pre>
</div>
<div title="wget" server.title="wget" server.page.revision="1504" server.etag="&quot;docs/wget/1504:1ffba98cc78458859943001968c28fb3cbd36e07&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090420210025" created="20090420210025" tags="" >
<pre>wget is a command line tool available for many systems that allows the user to make HTTP requests from the command line.

See: http://www.gnu.org/software/wget/</pre>
</div>
<div title="util.sha" server.title="util.sha" server.page.revision="1492" server.etag="&quot;docs/util.sha/1492:2b9af326a91056013510c7646794d8a5d8649ac9&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001115237" created="20091001115208" tags="pyapi" >
<pre>!!Description
Return a sha1 object from which a digest can be created.

!!Parameters
* //data//

!!Returns
* A {{{hashlib}}} or {{{sha}}} digest on which {{{hexdigest()}}} or {{{update(string)}}} may be called.

!!Example
{{{
    digest = util.sha()
    for word in ['foo', 'bar']:
        digest.update(word)
    print digest.hexdigest()
}}}

!!Notes
This exists to encapsulate the differences between pre Python 2.5 hash handling and post 2.5.</pre>
</div>
<div title="I'm running a TiddlyWeb with lots of users and bags. How do I manage access control?" server.title="I'm running a TiddlyWeb with lots of users and bags. How do I manage access control?" server.page.revision="560" server.etag="&quot;docs/I'm%20running%20a%20TiddlyWeb%20with%20lots%20of%20users%20and%20bags.%20How%20do%20I%20manage%20access%20control%3F/560:760e79ed914b57e67c8568f84ccd673aed4b4318&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331132000" created="20090319150921" tags="faq" >
<pre>//This is a stub.//

To work with lots of users and bags in TiddlyWeb you need to understand [[bags|bag]], [[policies|policy]], [[users|user]] and [[user roles|role]].

The fundamental concern in this situation is creating a structure that is easy to understand and easy to maintain. While the first thought might be to create bag policies that list lots of users, this is not ideal. Adding a username in potentially many policies is cumbersome, prone to error and the policy files may become large enough that they are expensive to process.

A better solution is to use [[roles|role]]. Role names are put in [[policy]] statements. When users are created, they are given the required roles. In the future when a user's level of access changes, they simply need to have their roles changed or their account deleted: there's no need to go digging around in policies.

See also:
* [[How do I add a user?]]
* [[How do I give a user a role?]]
* [[How do I set or edit a bag policy?]]</pre>
</div>
<div title="text tiddlerComment1264803411261" server.title="text tiddlerComment1264803411261" server.page.revision="1607" server.etag="&quot;comments/text%20tiddlerComment1264803411261/1607:0033e73d81371e7d0bd747b59a60d89473cdbd19&quot;" modifier="drleidig.myopenid.com" creator="drleidig.myopenid.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100129221651" created="20100129221651" tags="comment" daddy="text tiddler" root="text tiddler">
<pre>Since the key-value pairs are already in RFC 822 format, what do you think about sending them as part of the HTTP response header and leave the body of the response to the core tiddler content? Actually that make sense to me for native tiddlers.

</pre>
</div>
<div title="constraint" server.title="constraint" server.page.revision="2215" server.etag="&quot;docs/constraint/2215:4d7d17f56d7781b6310203b34ddaece342a0fd0d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100914161644" created="20090511092534" tags="policy" >
<pre>In the TiddlyWeb context, a constraint is one of several actions or permissions described in a [[policy]].
The constraint describes which [[user]] or [[role]] may perform the respective action:
|!Constraint|!Bag                                  |!Recipe|h
|''read''   |view bag's tiddlers                   |view bag-filter pairs constituting the recipe|
|''write''  |modify bag's tiddlers                 |//unused//                                   |
|''create'' |add tiddlers to bag                   |//unused//                                   |
|''delete'' |remove tiddlers from bag              |//unused//                                   |
|''manage'' |delete bag, view and modify its policy|delete recipe, view and modify its policy    |
|''accept'' |skip validation for tiddlers          |//unused//                                   |
cf. http://groups.google.com/group/tiddlyweb/msg/e0b3709851565dbe

An empty constraint list means there is no constraint; any user, including the anonymous user {{{GUEST}}}, can perform the action.
{{{NONE}}} and {{{ANY}}} are special: {{{NONE}}} means the action may not be done, by anyone; {{{ANY}}} means any [[authenticated|authentication]] user (i.e. not {{{GUEST}}}) may perform the action.</pre>
</div>
<div title="TiddlyWebWiki" server.title="TiddlyWebWiki" server.page.revision="942" server.etag="&quot;docs/TiddlyWebWiki/942:cffc388f8f126078579186cb6b60efae44dab4da&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100603071056" created="20100603070956" tags="" >
<pre>TiddlyWebWiki is a collection of server-side (TiddlyWeb) and client-side (TiddlyWiki) plugins to provide a seamless experience for using TiddlyWiki to access data stored by TiddlyWeb.

[[TiddlyWebWiki|http://github.com/tiddlyweb/tiddlywebwiki]] is available as a [[Python package|http://pypi.python.org/pypi/tiddlywebwiki]] called [[tiddlywebwiki]].</pre>
</div>
<div title="urls_map" server.title="urls_map" server.page.revision="1480" server.etag="&quot;docs/urls_map/1480:b35cc19325e40f844e5487f0f3248af0f0031987&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090323171713" created="20090323171633" tags="config" >
<pre>urls_map is the configuration setting which establishes what file to use for the [[urls.map]]. Generally it is easier to use [[plugins]] to extend the map, rather than replacing it.</pre>
</div>
<div title="cdent.tumblr.com" server.title="cdent.tumblr.com" server.page.revision="1118" server.etag="&quot;docs/cdent.tumblr.com/1118:eb936ebed0d7bcb83f9dbc8a67db4c858736eea5&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090315213645" created="20090315213645" tags="" >
<pre>An [[OpenID]] of ChrisDent.</pre>
</div>
<div title="comment_1242421893885" server.title="comment_1242421893885" server.page.revision="1556" server.etag="&quot;comments/comment_1242421893885/1556:3517b5e80f4bba5e71f25c162edebd0ca802f6e3&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090515191142" created="20090515191142" tags="comment" >
<pre>thank you for this detailed answer. just to make it clear: if i have read on recipe1 and on all other bags in recipe1 except bag1, I will see (in ../recipes/recipe1/tiddlers.wiki) the tiddlers of all bags except the ones from bag1.</pre>
</div>
<div title="comment_1245921793500" server.title="comment_1245921793500" server.page.revision="1577" server.etag="&quot;comments/comment_1245921793500/1577:1ab2d9b90ed5ce471be769807ce6f2f653755115&quot;" modifier="fnd" creator="fnd" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090625092314" created="20090625092314" tags="comment" >
<pre>Perhaps we should document how a plugin can add its own serializer to [[config]].
(Of course this can be looked up in {{{tiddlyweb.config}}} as well, but explicit documentation would be helpful.)</pre>
</div>
<div title="devtext" server.title="devtext" server.page.revision="1175" server.etag="&quot;docs/devtext/1175:81b07a46e0c720f41ca4364d2535cf2a74314cb3&quot;" modifier="fnd.lewcid.org" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091029160534" created="20090223111527" tags="plugin" >
<pre>@@
''N.B.:'' This has been superseded by the [[devstore]].
@@

StorageInterface intended to ease client-side plugin development
* no revisions
* uses {{{.tid}}} files for non-JavaScript content
* supports JavaScript ({{{.js}}}) files 
!Setup Instructions
''N.B.:''
There is a [[script|http://svn.tiddlywiki.org/Trunk/contributors/FND/TiddlyWeb/plugins/devinstance.sh]] which automates the process described below.
It is called with an argument specifying the directory in which the new instance should be created (e.g. {{{./devinstance.sh /tmp/TiddlyWeb}}} creates {{{/tmp/TiddlyWeb/dev}}}).

* change to desired root directory
{{{
$ cd ~/tiddlyweb/
}}}
* download dev store plugin
{{{
$ wget http://svn.tiddlywiki.org/Trunk/contributors/FND/TiddlyWeb/plugins/devtext.py
}}}
* create TiddlyWeb configuration file
{{{
$ cat &gt; tiddlywebconfig.py
config = {
	"server_store": ["devtext", { "store_root": "store" }]
}
&lt;CTRL+D&gt;
}}}
* create instance
{{{
$ twanager instance dev
$ cd dev/
}}}
* set up instance to use dev store plugin
{{{
$ mv ../devtext.py ./
$ mv ../tiddlywebconfig.py ./
}}}
''N.B.:'' Ideally, {{{tiddlywebconfig.py}}} should be merged with the existing configuration file.
* create plugins bag
{{{
$ twanager bag plugins
&lt;CTRL+D&gt;
}}}
* create plugin file
{{{
$ cat &gt; store/plugins/helloworld.js
alert("Hello world!");
&lt;CTRL+D&gt;
}}}
* create content bag
{{{
$ twanager bag content
&lt;CTRL+D&gt;
}}}
* create content tiddler
{{{
$ twanager tiddler lipsum content
modifier: test user
tags: test tmp

lorem ipsum dolor sit amet
&lt;CTRL+D&gt;
}}}
* create recipe
{{{
$ twanager recipe test
desc:
policy: { "read": [], "create": [], "manage": [], "write": [], "owner": null, "delete": [] }

/bags/system/tiddlers
/bags/plugins/tiddlers
/bags/content/tiddlers
&lt;CTRL+D&gt;
}}}
* start server
{{{
$ twanager server
}}}
* visit http://0.0.0.0:8080/recipes/test/tiddlers.wiki

''N.B.:'' Instead of creating dedicated files within the respective bags, symlinks could be used to make a TiddlyWeb instance use existing directories (e.g. from a local Subversion checkout) as bags.</pre>
</div>
<div title="renderer" server.title="renderer" server.page.revision="1337" server.etag="&quot;docs/renderer/1337:8e944a4e54107684472c897a68dfc3eca2881407&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831172154" created="20090710154751" tags="glossary component" >
<pre>In TiddlyWeb a renderer is a code system that takes a [[tiddler]] as input and returns an HTML form. It is used by the HTML [[serializer]] to generate the HTML content, usually turning wikitext syntax into HTML with a wikitext renderer, such as [[WikklyText]]. This functionality was originally fully in the serializer, but it became clear with use that being able to support multiple syntaxes would be useful.

Two [[config]] items control how wikitext in tiddlers is rendered. They are [[wikitext_renderer]] and [[wikitext_render_map]].

If the HTML form of a tiddler is requested //and// the {{{type}}} attribute on the tiddler is not set its content will be rendered by the default {{{wikitext_renderer}}}. In the default installation [[wikklytextrender]] is used. If the [[tiddlywebwiki]] package has not been installed, the the {{{raw}}} renderer is used, wrapping HTML escaped content in {{{&lt;pre&gt;}}} tags.

If the HTML form of a tiddler is requested //and// the {{{type}}} attribute begins with {{{text/}}} //and// the {{{type}}} attribute is present as a key in [[wikitext_render_map]] the value in the map is used to identify the module which contains the {{{render()}}} method for that type.</pre>
</div>
<div title="AdShowerPlugin" server.title="AdShowerPlugin" server.page.revision="2006" server.etag="&quot;tpc/AdShowerPlugin/2006:d13936ecac3a369c7b3efb94f5ab1550108f01de&quot;" modifier="fnd" creator="fnd" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090420202444" created="20090420202444" tags="systemConfig" >
<pre>//{{{
(function($) {

var restart_orig = restart;

restart = function () {
    $("#adhome")[0].appendChild( // raw appendChild method required for AdSense
        $("#adsense").css("display", "block")[0]
    );
    restart_orig.apply(this, arguments);
};

})(jQuery);
//}}}</pre>
</div>
<div title="current user" server.title="current user" server.page.revision="1160" server.etag="&quot;docs/current%20user/1160:954db96556a6761c9b1b8ad0b287e741cc8f4870&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090409092320" created="20090409092320" tags="" >
<pre>In the TiddlyWeb context, the current user is the identifier of the already [[authenticated|authentication]] user which will be used in any [[authorization]] that needs to occur during the current request. The current user is determined by the [[credentials extractor]] system. If the extractor extracts no user, the current user is guaranteed to be {{{GUEST}}}.

The current user concept is only present during HTTP requests.</pre>
</div>
<div title="PageTemplate" server.title="PageTemplate" server.page.revision="2017" server.etag="&quot;tpc/PageTemplate/2017:3b4e61921f2e70a0cbddc0258a40d831616b8ed4&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090420173517" created="20090420173517" tags="" >
<pre>&lt;!--{{{--&gt;
&lt;div id='header'&gt;
	&lt;span class='siteTitle' refresh='content' tiddler='SiteTitle'&gt;&lt;/span&gt;&amp;nbsp;
	&lt;span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'&gt;&lt;/span&gt;
	&lt;div id='searchBox' macro='search'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id='mainMenu'&gt;
&lt;div id='submainMenu' refresh='content' tiddler='MainMenu'&gt;&lt;/div&gt;
&lt;div id='sidebarOptions' refresh='content' tiddler='SideBarOptions'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id='sidebar'&gt;
        &lt;div id='adhome'&gt;&lt;/div&gt;
        &lt;div id='sidebarTabs' refresh='content' force='true' tiddler='SideBarTabs'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id='displayArea'&gt;
	&lt;div id='messageArea'&gt;&lt;/div&gt;
	&lt;div id='tiddlerDisplay'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="comment_1243890258900" server.title="comment_1243890258900" server.page.revision="1570" server.etag="&quot;comments/comment_1243890258900/1570:db3437435018ab0edb8a153c3df2a518fe4f9575&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090601210419" created="20090601210419" tags="comment" >
<pre>Hrmm, getting conflicting data from my experiments on this:

* {{{urlopen}}} seems to attend to {{{http_proxy}}} just fine when I test it from the python interpreter using urllib or urllib2
* In the urllib2 in Python 2.5.1 standard library the proxy discovery code from urllib is used.</pre>
</div>
<div title="handler" server.title="handler" server.page.revision="1239" server.etag="&quot;docs/handler/1239:7a355671a9c67b0b18be02b3110f640f6194a804&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710132948" created="20090620120423" tags="glossary" >
<pre>In TiddlyWeb a handler is the name used for a piece of code which is a [[WSGI]] application that responds to a web request made to a [[route]] listed in the [[urls.map]] or added via a [[plugin]]. A plugin may also replace an existing route with a new handler.

Handler code can interact with the [[store]] and available [[serializers|serializer]] return data directly or call other handlers.</pre>
</div>
<div title="StorageInterface" server.title="StorageInterface" server.page.revision="2198" server.etag="&quot;docs/StorageInterface/2198:8671ae0b4386bdf19d85bd6d4f04f8f90d1a0bf6&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830235647" created="20100830235647" tags="" >
<pre>The StorageInterface defines the set of methods which a [[store]] class must implement. Learn more by looking at the {{{tiddlyweb.stores}}} package:
{{{
    pydoc tiddlyweb.stores
}}}</pre>
</div>
<div title="comment_1243939474969" server.title="comment_1243939474969" server.page.revision="1571" server.etag="&quot;comments/comment_1243939474969/1571:81a5acd892e20d54873f98000260f3daccdb474e&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090602104437" created="20090602104437" tags="comment" >
<pre>Turns out the issue with OpenID is not the same as with [[from_svn]]. When running TiddlyWeb under the built in server, the environment is flushed before starting the server, so http_proxy is not available. Will fix.</pre>
</div>
<div title="WorkspaceConfig" server.title="WorkspaceConfig" server.page.revision="2028" server.etag="&quot;tpc/WorkspaceConfig/2028:7ac3c707eec977553e53eb43f2d3c351c9325642&quot;" modifier="FND" creator="FND" server.workspace="bags/tpc" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="tpc" server.permissions="read" server.content-type="" modified="20090217160717" created="20090217160717" tags="excludeLists excludeSearch systemConfig" >
<pre>config.options.chkAutoSave = true;
config.options.chkHttpReadOnly = true;
readOnly = true;
config.defaultCustomFields["server.workspace"] = "bags/docs";</pre>
</div>
<div title="tiddlywebwiki" server.title="tiddlywebwiki" server.page.revision="1447" server.etag="&quot;docs/tiddlywebwiki/1447:695dbd173632cf309518ba08887d6366d7b1bdec&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100603071114" created="20090831171319" tags="" >
<pre>(also see [[TiddlyWebWiki]])

tiddlywebwiki is a Python package that provides the TiddlyWeb service. It is made up of some Python code and pointers to other packages on which it depends. See [[Installing TiddlyWeb]].

tiddlywebwiki depends on the [[tiddlyweb]] package. The latter package provides the base functionality and may be installed independently if TiddlyWiki functionality is not required.
</pre>
</div>
<div title="/recipes" server.title="/recipes" server.page.revision="210" server.etag="&quot;docs/%2Frecipes/210:87ef614fc11f5cb899841505c0c4585d05eeb9f5&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511125547" created="20090315211843" tags="rep:json rep:html method:get rep:text httpapi" >
<pre>
!Resource
A list of [[recipes|recipe]] on the system for which the [[current user]] passes the read constraint.

!Representations
; {{{text/plain}}}
: A linefeed separated list of recipe names.
; {{{text/html}}}
: An unordered list of recipe names, linking to each [[recipe|HTTP recipe]] resource.
; {{{application/json}}}
: A [[JSON]] list of recipe names.

!Methods
!!{{{GET}}}
Get the list of recipes.

!Notes
If the [[current user]] can read no recipes, this may be an empty list.

!Example
http://tiddlyweb.peermore.com/wiki/recipes</pre>
</div>
<div title="py.test" server.title="py.test" server.page.revision="1311" server.etag="&quot;docs/py.test/1311:25e577ff7aeefd291fc91c60eca6b06746f57b2b&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090408204120" created="20090408195255" tags="" >
<pre>[[py.test|http://codespeak.net/py/dist/test.html]] is a simple but powerful tool for writing and running tests. [[cdent]] chose to use it for TiddlyWeb because ~PyUnit just seemed too crufty and noisy. Early code for TiddlyWeb was written test first and py.test made that a painless process.

You can get it from http://codespeak.net/py/dist/test.html where they have some [[quickstart instructions|http://codespeak.net/py/dist/test-quickstart.html]].

{{{
py.test -h
}}}
will reveal some help. {{{-x}}} and {{{-s}}} are useful.</pre>
</div>
<div title="atom" server.title="atom" server.page.revision="1077" server.etag="&quot;docs/atom/1077:58aaaaceac18b6617a54b53de7864bb982db02d3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123112512" created="20090407180051" tags="plugin" >
<pre>The atom [[plugin]] provides an Atom format feed of any collection of [[tiddlers|tiddler]] including one tiddler. It does this by providing an additional [[serializer]].

The plugin is available from PyPI as [[tiddlywebplugins.atom|http://pypi.python.org/pypi/tiddlywebplugins.atom]].

This installation is using the atom plugin. [[Here is Atom URL|http://tiddlyweb.peermore.com/wiki/recipes/editor/tiddlers/atom.atom]] for this tiddler.

The plugin does //not// provide support for the Atom Publishing Protocol.</pre>
</div>
<div title="info" server.title="info" server.page.revision="1244" server.etag="&quot;docs/info/1244:c67f56b6a3acd1c635e6ad37840336f8ccfd1674&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090710134613" created="20090710134550" tags="twanager" >
<pre>{{{info}}} is a [[twanager]] command that provides a small amount of information about the current TiddlyWeb installation. Here's the output for this server as of early July 2009:
{{{
This is TiddlyWeb version 0.9.44.
The current store is: caching.
}}}
The primary purpose of {{{info}}} is so you can easily determine what version is being run.</pre>
</div>
<div title="twikrad" server.title="twikrad" server.page.revision="1465" server.etag="&quot;docs/twikrad/1465:8935e57c409758f83ec39ddb3568ab3023e9c633&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100521061103" created="20100313143620" tags="" >
<pre>[[twikrad|http://github.com/cdent/twikrad]] is a Perl- and curses-based [[editor for content hosted by TiddlyWeb|http://cdent.tumblr.com/post/445727660/twikrad-tiddyweb-text-editing]], available via [[CPAN|http://search.cpan.org/dist/TiddlyWeb-Wikrad/]].

It is based on [[wikrad|http://search.cpan.org/dist/Socialtext-Wikrad/]] which was developed at [[Socialtext]].

twikrad provides a terminal-based browsing and editing environment that allows you to navigate tiddlers in a recipe and then edit them in your favorite editor, such as Vim.</pre>
</div>
<div title="HTTP API by representation" server.title="HTTP API by representation" server.page.revision="468" server.etag="&quot;docs/HTTP%20API%20by%20representation/468:1d77da04c8078b18453193356a92275939fde1c0&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511130156" created="20090511130129" tags="" >
<pre>The ~URLs in the [[HTTP API]] send and receive a variety of default representations, here they are group by representation:

! text/html
&lt;&lt;list filter [tag[rep:html]]&gt;&gt;

! text/plain
&lt;&lt;list filter [tag[rep:text]]&gt;&gt;

! text/x-tiddlywiki
&lt;&lt;list filter [tag[rep:wiki]]&gt;&gt;

! application/json
&lt;&lt;list filter [tag[rep:json]]&gt;&gt;</pre>
</div>
<div title="SerializationInterface" server.title="SerializationInterface" server.page.revision="826" server.etag="&quot;docs/SerializationInterface/826:84eb9fd34adec87131a3b2832997826e95bfe1eb&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314154503" created="20090323180203" tags="" >
<pre>Something that implements the SerializationInterface is a [[serializer]]. The interface is described in a (mostly) abstract class in [[tiddlyweb/serializations/__init__.py|http://github.com/tiddlyweb/tiddlyweb/raw/master/tiddlyweb/serializations/__init__.py]].

The interface has the following methods. If you choose not to implement one, calling code that tries to use that method will cause a {{{NoSerialzationError}}} to be raised. //This is okay,// some serializations will not need to serialize some entities.

{{{
    def recipe_as(self, recipe):
    def as_recipe(self, recipe, input_string):
    def bag_as(self, bag):
    def as_bag(self, bag, input_string):
    def tiddler_as(self, tiddler):
    def as_tiddler(self, tiddler, input_string):
    def list_tiddlers(self, bag):
    def list_recipes(self, recipes):
    def list_bags(self, bags):
}}}

For more information try {{{pydoc tiddlyweb.serializations}}} from your terminal.

See also:
* [[How do I write a custom serializer?]]
</pre>
</div>
<div title="/bags/{bag_name}/tiddlers" server.title="/bags/{bag_name}/tiddlers" server.page.revision="179" server.etag="&quot;docs/%2Fbags%2F%7Bbag_name%7D%2Ftiddlers/179:8f910fe2990ca539ae559e7b0ec9dd87782252bc&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001124706" created="20090511105334" tags="rep:json rep:html rep:text httpapi method:get rep:wiki" >
<pre>!Resource
A list of [[tiddlers|tiddler]] contained by the named [[bag]].  The [[current user]] must pass the read [[constraint]] to see the tiddlers.

!Representations
; {{{text/plain}}}
: A linefeed separated list of tiddlers.
; {{{text/html}}}
: An HTML presentation of the description of the bag and a link to its list of tiddlers.
; {{{application/json}}}
: [[JSON]] representation of the tiddlers in the bag. See [[JSON tiddler]]. By default the included tiddlers are skinny. You [[can make them fat|How can I GET many tiddlers at once?]].
; {{{text/x-tiddlywiki}}}
: A TiddlyWiki representation of the tiddlers contained in this bag. [[tiddlywebwiki]] is required.

!Methods
!! {{{GET}}}
Get the list of tiddlers.

!Notes
These tiddlers may be [[filtered|filter]].

!Example
http://tiddlyweb.peermore.com/wiki/bags/docs/tiddlers</pre>
</div>
<div title="Installing on WindowsComment1273875837151" server.title="Installing on WindowsComment1273875837151" server.page.revision="1522" server.etag="&quot;comments/Installing%20on%20WindowsComment1273875837151/1522:3dcdab4bbcd8873422d11170c435b6253a28cfbf&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100514222357" created="20100514222357" tags="comment" daddy="Installing on Windows" root="Installing on Windows">
<pre>my employer will not allow installation of any software, is there any way to use tiddlyweb from a shared drive with just an html document?</pre>
</div>
<div title="Python API" server.title="Python API" server.page.revision="784" server.etag="&quot;docs/Python%20API/784:7b803facc26185ac485c1dd0de03d10df0230966&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001105052" created="20090315215330" tags="" >
<pre>The TiddlyWeb Python API is the collection of public classes, functions and methods made available by the modules which make up the TiddlyWeb code base. Each module has its own documentation which is the authoritative source. Running the following command will give you the top level of the documentation, and a list of other modules:
{{{
pydoc tiddlyweb
}}}

The following list is incomplete. Where parameters are listed, if they are in //italics// they are optional.

&lt;&lt;list filter [tag[pyapi]]&gt;&gt;</pre>
</div>
<div title="tiddlywebconfig.py" server.title="tiddlywebconfig.py" server.page.revision="1426" server.etag="&quot;docs/tiddlywebconfig.py/1426:e8831c934d3c31bd2b4a056ab4a46ec375b8e281&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314152424" created="20090218174000" tags="glossary" >
<pre>Every [[instance]] may have a {{{tiddlywebconfig.py}}} located in the working directory of the instance. If [[twinstance]] is used to create the instance, it will create a {{{tiddlywebconfig.py}}} for you.

The {{{tiddlywebconfig.py}}} file contains information used to override the TiddlyWeb configuration defaults found in the {{{tiddlyweb.config}}} package. You can read more information about the keys of the configuration file by reading the documentation for that package:

{{{
    pydoc tiddlyweb.config
}}}

{{{tiddlywebconfig.py}}} is a Python module, containing a {{{dict}}}. At process startup its values are merged over the top of the default config.

In regular usage {{{tiddlywebconfig.py}}} is used to include [[plugins]] in your instance, set logging verbosity and control the CSS used on some pages.

If you make changes to your {{{tiddlywebconfig.py}}} you can check that you have not made any syntax errors by performing the following command:
{{{
    python tiddlywebconfig.py
}}}
If not error messags are given the syntax is okay.
</pre>
</div>
<div title="migrate" server.title="migrate" server.page.revision="1270" server.etag="&quot;docs/migrate/1270:6d4707a0f52da362161dd473eda2e2cea826964a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091123113256" created="20090523153637" tags="plugin" >
<pre>migrate is a plugin that enables migrating the content of one [[store]] to another. For the purposes of backup, mirroring, or migrating to a new store format (e.g text to sql) etc.

It simply traverses the source store, getting each entity, and then putting it to the other store.

It may be installed from PyPI as [[tiddlywebplugins.migrate|http://pypi.python.org/pypi/tiddlywebplugins.migrate]].</pre>
</div>
<div title="filters.recursive_filter" server.title="filters.recursive_filter" server.page.revision="2147" server.etag="&quot;docs/filters.recursive_filter/2147:fff57b2c3b6ac9e2a52761b0bf3943198726120c&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830211554" created="20091008105907" tags="pyapi" >
<pre>!!Description
Recursively filter a list of tiddlers against a list of [[filter]] functions. The first filter in the list processes all the [[tiddlers|tiddler]] provided. Subsequent filters process the tiddler results of the previous filter. If the filter list is zero length all tiddlers are returned.

!!Parameters
* list of filter functions
* iterator of tiddlers

!!Returns
* generator of tiddlers

!!Example
{{{
    filters, leftovers = parse_for_filters('select=tag:systemConfig')
    tiddlers = recursive_filter(filters, store.list_bag_tiddlers(bag)
}}}

!!Notes</pre>
</div>
<div title="/bags/{bag_name}" server.title="/bags/{bag_name}" server.page.revision="167" server.etag="&quot;docs/%2Fbags%2F%7Bbag_name%7D/167:79a84296ef5f845d849eb29e3aa5677d5b29c3c3&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090916232514" created="20090511101825" tags="rep:json method:put method:delete rep:html httpapi method:get" >
<pre>!Resource
A single [[bag]] on the system for which the [[current user]] passes the manage [[constraint]].

!Representations
; {{{text/html}}}
: An HTML presentation of the description of the bag and a link to its list of tiddlers.
; {{{application/json}}}
: [[JSON]] representation of the bag. See [[JSON bag]].

!Methods
!! {{{GET}}}
Get the bag.
!! {{{PUT}}}
Create or edit a named bag. See [[JSON bag]] and [[How do I create or update a bag over HTTP?]]
!! {{{DELETE}}}
Irrevocably remove the bag and its [[tiddler]] contents.

!Notes

!Example
http://tiddlyweb.peermore.com/wiki/bags/common</pre>
</div>
<div title="comment_1247041734582" server.title="comment_1247041734582" server.page.revision="1581" server.etag="&quot;comments/comment_1247041734582/1581:d22ff5236cf3d6886ab28edbacc51dc75f771ef0&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090708083324" created="20090708083324" tags="comment" >
<pre>Comment for windows users (tested on Windows server 2003):

get Python 2.6 for Windows (python.org), it might be a better option to get activestate python, but I have not tried.

check Python version on command line:
python -V 

get [[ez_setup.py|http://peak.telecommunity.com/dist/ez_setup.py].
save that file somewhere (I saved under python26/Scripts, I am not sure if there exists some sort of convention...). go to this location on command line and type.

python ez_setup.py setuptools-0.6c9-py2.6.egg 

that should get setuptools installed.

easy_install.exe should be in the Scripts folder.

Note: these instructions were originally found [[here|http://scottasimpson.org/2009/01/python-26-easy_install-ipython-win/]]

Should Python prove tricky to configure right (e.g. wrong version in command shell etc...) some good guidelines are provided [[here|http://docs.python.org/using/windows.html]].

Now to install of course you just miss out sudo and you type:
easy_install -U tiddlyweb
</pre>
</div>
<div title="pip" server.title="pip" server.page.revision="1279" server.etag="&quot;docs/pip/1279:3094f231d639e8468e78ee524f21c60da3e9878d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091206114840" created="20091117131737" tags="" >
<pre>pip is an install tool for Python, similar to but more modern than [[easy_install]]. It is now the preferred tool for install TiddlyWeb and associated [[plugins]] because it is deals better with namespace packages and resolving requirements.

See: http://pypi.python.org/pypi/pip

If pip is not available on your system it can be installed following instructions at the link above, or if you are an working {{{easy_install}}}:
{{{
   sudo easy_install -U pip
}}}

pip and [[virtualenv]] make is possible to install TiddlyWeb without root access.</pre>
</div>
<div title="curl" server.title="curl" server.page.revision="1159" server.etag="&quot;docs/curl/1159:8356ee648dea7f294275ee3fd286b7b42f9a3102&quot;" modifier="fnd.lewcid.org" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20090420205912" tags="howto tools" >
<pre>[[cURL|http://curl.haxx.se]] is a common tool for making HTTP requests from the command line.

''Note:'' When reading data from a file, use {{{--data-binary @filename}}}.</pre>
</div>
<div title="Plugin List" server.title="Plugin List" server.page.revision="774" server.etag="&quot;docs/Plugin%20List/774:682afcfba2149b457ee39a907cc32a2c7c8f177d&quot;" modifier="cdent.tumblr.com" creator="cdent.livejournal.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314152958" created="20090223103527" tags="" creator="cdent.livejournal.com">
<pre>TiddlyWeb has straightforward support for including additional functionality through [[plugins]]. This page lists some available plugins. Some of these are formally plugins (in that they use the {{{init(config)}}} signature), while others provide plugin-like functionality through different means.

Plugins which have reached some level of maturity can be found [[by searching at PyPI|http://pypi.python.org/pypi?%3Aaction=search&amp;term=tiddlywebplugins&amp;submit=search]]. Some plugins are described here:

&lt;&lt;list filter [tag[plugin]]&gt;&gt;

Mature plugins may be installed from PyPI directly using [[pip]]. {{{pip}}} is preferred over other choices as it handles some of the special packaging tricks used in plugins more effectively.

Plugins that are as yet not packaged for release from PyPI are installed as follows:
* Get the *.py file (or files) from the source location of the plugin.
* Put those files in the [[instance]] directory (alongside your [[tiddlywebconfig.py]]).

One a plugin is installed it must be "turned on" for your [[instance]]:

* Add the name of the plugin (either the full name of the installed package (e.g. tiddlywebplugins.status) or the name of the file minus .py) to one or both of [[system_plugins]] or [[twanager_plugins]] in [[tiddlywebconfig.py]] depending on the information in the plugin itself.
* Add any additional configuration suggested by the plugin documentation.
* Restart your server to get the configuration reread and the plugin loaded.

Even more plugins can be found at http://github.com/tiddlyweb/tiddlyweb-plugins

Looking at the plugin code is a great way to understand how the guts of TiddlyWeb work and the possibilities for things you can do with it.
</pre>
</div>
<div title="Storing a Tiddler" server.title="Storing a Tiddler" server.page.revision="853" server.etag="&quot;docs/Storing%20a%20Tiddler/853:18ff5e8aab8d67cde05d401984909b6c285fcff0&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100406133824" created="20100319191501" tags="curl API howto" >
<pre>!Regular
{{{
$ curl -X PUT -H 'Content-Type: application/json' \
	-d '{ "text": "lorem ipsum", "tags": ["foo", "bar"], "fields": { "foo": "lorem", "bar": "ipsum" } }' \
	http://localhost:8080/bags/common/tiddlers/Foo
}}}
!Binary
{{{
$ curl -X PUT -H 'Content-Type: image/png' --data-binary @bar.png \
	http://localhost:8080/bags/common/tiddlers/Bar
}}}
</pre>
</div>
<div title="Storing a Recipe" server.title="Storing a Recipe" server.page.revision="851" server.etag="&quot;docs/Storing%20a%20Recipe/851:abe70fcbdf336add207eb8f2e0482ce7ca300d0a&quot;" modifier="fnd.lewcid.org" creator="fnd.lewcid.org" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100319191501" created="20100319191501" tags="curl API howto" >
<pre>{{{
$ curl -X PUT -H 'Content-Type: application/json' \
	-d '{ "desc": "lorem ipsum", "recipe": [["system", ""], ["common", ""]], "policy": { "read": [], "manage": ["R:ADMIN"], "owner": "administrator" } }' \
	http://localhost:8080/recipess/Omega
}}}</pre>
</div>
<div title="text tiddler" server.title="text tiddler" server.page.revision="1409" server.etag="&quot;docs/text%20tiddler/1409:11ade9e66cc8e62f7d578f6f7a54f06a567ce0df&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090511131931" created="20090511131425" tags="" >
<pre>When a [[tiddler]] is retrieved using a [[text representation|rep:text]] it is presented as a UTF-8 encode text/plain file with two sections. The sections are separated by a blank line. The first section makes up headers in a format similar to an [[RFC 822|http://www.faqs.org/rfcs/rfc822.html]] mail message:
{{{
    key: value
}}}
Each key represents an attribute on the tiddler, or an extended field.

The second section, the body, is the wikitext of the tiddler. In the case of a [[binary tiddler]] this will be base64 encoded text.</pre>
</div>
<div title="comment_1242741458892" server.title="comment_1242741458892" server.page.revision="1563" server.etag="&quot;comments/comment_1242741458892/1563:0fd419048288d3e01951c9e863cd9e5d46bafdcd&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090519115741" created="20090519115741" tags="comment" >
<pre>It works! Thanks</pre>
</div>
<div title="role" server.title="role" server.page.revision="1354" server.etag="&quot;docs/role/1354:ee2d4199a3951e021c085122e6b4d8835797d549&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090331132414" created="20090331132414" tags="" >
<pre>A role is an attribute of a [[User]] (see also [[user]] for disambiguation) that signifies some right or responsibility the user has. A role shows up in three places in TiddlyWeb:

* As a list in the [[tiddlyweb.usersign]] hash.
* As a list on the [[User]] entity.
* As part of a [[policy]].

A role is similar to a group, but the association is reversed. Whereas a group has a list of members (the users who are in the group), a user has one or more roles. In real world use the latter turns out to be a bit easier to manage (at least for the TiddlyWeb context). See [[I'm running a TiddlyWeb with lots of users and bags. How do I manage access control?]] for more information.</pre>
</div>
<div title="util.read_utf8_file" server.title="util.read_utf8_file" server.page.revision="1488" server.etag="&quot;docs/util.read_utf8_file/1488:ccd3349e12043dbb07745c4951d8def664190d90&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20091001115511" created="20091001115511" tags="pyapi" >
<pre>!!Description
Read a utf-8 encoded file from disk, returning a unicode string.

!!Parameters
* filename

!!Returns
* unicode
</pre>
</div>
<div title="Using gunicorn" server.title="Using gunicorn" server.page.revision="1025" server.etag="&quot;docs/Using%20gunicorn/1025:cd8b2d8e0106d0a60795d3cc3559d057bd96851d&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100330170945" created="20100325111440" tags="" >
<pre>[[Green Unicorn|http://gunicorn.org]] is a "WSGI HTTP Server for UNIX". It is available via [[PyPI|http://pypi.python.org/pypi/gunicorn]] and can be installed using [[pip]].

TiddlyWeb can be run with gunicorn using [[apache.py]] as an application loader. To run it at http://0.0.0.0:8080/ in a basic fashion do:
{{{
$ gunicorn -p gunicorn.pid --bind=0.0.0.0:8080 apache:application
}}}
The {{{apache.py}}} file needs to be in the current directory and that current directory should be an [[instance]].

If you change code you need to tell gunicorn about it. You can do that with:
{{{
kill -1 `cat gunicorn.pid`
}}}</pre>
</div>
<div title="Installing TiddlyWebComment1270776553816" server.title="Installing TiddlyWebComment1270776553816" server.page.revision="1520" server.etag="&quot;comments/Installing%20TiddlyWebComment1270776553816/1520:49ca5673da5ebd76bed2e3e854c746e9324b001f&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20100409013010" created="20100409013010" tags="comment" daddy="Installing TiddlyWeb" root="Installing TiddlyWeb">
<pre>you also seem to need setuptools.
sudo pip install -U setuptools seems to do it</pre>
</div>
<div title="revision" server.title="revision" server.page.revision="1353" server.etag="&quot;docs/revision/1353:54e866299cd2e10e8a29b1c8e729a9d2c24a9991&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090602133853" created="20090602133736" tags="" >
<pre>Every tiddler has revisions. Every time a tiddler is changed, a new revision is created. Revisions are identified by an integer ID.

However, not all stores support revisions, so when a tiddler is changed, the existing single revision is replaced by the new one.

A list of revisions can be access at [[/bags/{bag_name}/tiddlers/{tiddler_title}/revisions]] and an individual revision at [[/bags/{bag_name}/tiddlers/{tiddler_title}/revisions/{revision}]]. Individual revisions are immutable.

In python code, retrieving a specific revision is done as follows:

{{{
    tiddler = Tiddler(title, bag_name)
    tiddler.revision = 4
    tiddler = store.get(tiddler)
}}}

If the revision does not exist a {{{NoTiddlerError}}} exception is raised. If {{{revision}}} is not set, the most recent revision is retrieved.</pre>
</div>
<div title="Developing With TiddlyWeb" server.title="Developing With TiddlyWeb" server.page.revision="365" server.etag="&quot;docs/Developing%20With%20TiddlyWeb/365:40916679d2f0a8a15fc06ea324b6d433bcf70634&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090713155232" created="20090408204057" tags="dev" >
<pre>//This is about developing with the TiddlyWeb core. If you are interested in [[plugins]] start with [[Customizing TiddlyWeb]].//

&lt;&lt;tiddler [[Where is the TiddlyWeb code?]]&gt;&gt;

!Code Structure
TiddlyWeb code base has two important directories:
* [[tiddlyweb|http://github.com/tiddlyweb/tiddlyweb/tree/master/tiddlyweb]]: The actual TiddlyWeb code.
* [[test|http://github.com/tiddlyweb/tiddlyweb/tree/master/test]]: A suite of test files for the code.

The code tries to comply with [[pep8|http://www.python.org/dev/peps/pep-0008/]] and is run through [[pylint|http://www.logilab.org/857]] every now and again to see where things could do with some help. If you are submitting a patch we like four spaces //not// tabs. We likes patches.

Dependencies are listed in the {{{README}}} and {{{setup.py}}} files. The {{{Makefile}}} is used to automate the distribution process.

!Testing
* The TiddlyWeb tests are in a form that works well with [[py.test]], chosen because it is has low overhead. From the base directory run {{{py.test}}} to run all the tests. See [[the tiddler|py.test]] for more options.
* Running all the tests requires [[YAML]], [[wsgi_intercept]] and [[httplib2]].

From the base directory of the code, you can run all the tests with {{{py.test}}}, {{{py.test test}}} or {{{make test}}}. You can run one or more tests by naming them on the command line: {{{py.test test/test_filter.py test/test_bag.py}}}.

''You must run the tests from the base directory of the TiddlyWeb code.''

By default py.test will run every test it sees until it gets to the end, regardless of errors. If you would like it to quit on the first failure give {{{-x}}} as an argument. By default py.test also captures output from the tests. If you don't want this give {{{-s}}} as an argument.

When a test run by py.test fails to pass, figuring out what went wrong can be quite challenging. You'll need to dig through the scrollback of your terminal window to see what's going on, and then likely need to stick some prints in your tests and do some {{{-s}}} stuff on the command line. This may seem like a big hassle, but surprisingly, after some time it works well.

!External Resources
* [[TiddlyWeb Plugins|http://cdent.tumblr.com/post/55167654/tiddlyweb-plugins]]
* [[TiddlyWeb Plugin Tutorial|http://cdent.tumblr.com/post/76922695/1-tiddlyweb-tutorial]]
* [[Example TiddlyWeb Plugins|http://cdent.tumblr.com/post/75863777/example-tiddlyweb-plugins]]</pre>
</div>
<div title="JSON bag" server.title="JSON bag" server.page.revision="2236" server.etag="&quot;docs/JSON%20bag/2236:36d7e18cf74b2cfaab771ad6529ead52c881c335&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20101113120304" created="20090511103421" tags="" daddy="Extending Configuration With Plugins" root="Extending Configuration With Plugins">
<pre>When a [[bag]] is GET or PUT as [[JSON]] the following form is used:
{{{
{
    "desc": "decription of the bag (may be be an empty string or absent)",
    "policy": {
        "read": [], 
        "write": [],
        "create": [],
        "delete": [],
        "manage": [],
        "owner": ""
    }
}
}}}

The policy may be an empty dict but the key must be present. The desc is optional.

See: [[How can I use curl to create stuff in TiddlyWeb?]]</pre>
</div>
<div title="1.1.x" server.title="1.1.x" server.page.revision="248" server.etag="&quot;docs/1.1.x/248:af1a3540097da5f6a6be6eaf3419528a990299f0&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100323104203" created="20100323104203" tags="" >
<pre>
1.1.x is the in progress (spring 2010) development branch of the tiddlyweb core. It's primary goal is to improve performance and architectural problems discovered in the 1.0.x releases. See also [[Futures]].

The primary changes are described in the [[UPGRADE|http://github.com/tiddlyweb/tiddlyweb/blob/master/UPGRADE]] file in the [[source repository]].

If you wish to work with 1.1.x, check out  the {{{master}}} branch. We welcome contributions.
</pre>
</div>
<div title="comment_1242469616164" server.title="comment_1242469616164" server.page.revision="1557" server.etag="&quot;comments/comment_1242469616164/1557:b38a0222eb098922b213ff2ba0ea4c0cc473f9aa&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090516102657" created="20090516102657" tags="comment" >
<pre>That specific case was the cause of some debate. After the debate it was decided that if a policy constraint doesn't pass for any of the bags in a recipe, then the user will get a permissions error. This was chosen because it is a more predictable behavior.</pre>
</div>
<div title="Using Fast CGI" server.title="Using Fast CGI" server.page.revision="987" server.etag="&quot;docs/Using%20Fast%20CGI/987:56239ef1abd9013d5f4b60109d1ffc99b8e40232&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314183443" created="20100314183443" tags="" >
<pre>Have you run TiddlyWeb with FastCGI? If so, please leave a comment here describing how it can be done so other people can know too.
</pre>
</div>
<div title="comment_1242668244500" server.title="comment_1242668244500" server.page.revision="1558" server.etag="&quot;comments/comment_1242668244500/1558:7be59eff55ea4fe94b8a505cc3aa1ca9815f8e1a&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090518153726" created="20090518153726" tags="comment" >
<pre>I have a bag bag1, accessed over a recipe rbag1 (containing the bags system, comments, common, bag1). There is only one user ubag1 with create and write access. all other users only have read access but should be allowed to comment. How can I hide all creating and editing features from these other users? (There will be a lot of such "bagX" in corresponding recipes "rbagX", each "belonging" to a corresponding "ubagX"). BTW: Is this the same use case as the one here, where all creating and editing features are hidden for me, but I can add comments?</pre>
</div>
<div title="comment_1247133914555" server.title="comment_1247133914555" server.page.revision="1584" server.etag="&quot;comments/comment_1247133914555/1584:3f58ce7786ccdca9caf401e3a0a5ebb95f790548&quot;" modifier="GUEST" creator="GUEST" server.workspace="bags/comments" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="comments" server.permissions="read, create" server.content-type="" modified="20090709100515" created="20090709100515" tags="comment" >
<pre>The default owner is {{{null}}} (literal, not a string) - is that valid?</pre>
</div>
<div title="TiddlyWeb Requirements" server.title="TiddlyWeb Requirements" server.page.revision="923" server.etag="&quot;docs/TiddlyWeb%20Requirements/923:6c8eb7308a4e0ebf37037db70d36c4d79a6da1d7&quot;" modifier="cdent.tumblr.com" creator="fnd" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20090831171836" created="20090323193233" tags="config" >
<pre>* Python 2.4, 2.5 or 2.6
* [[selector|http://lukearno.com/projects/selector/]]
* [[simplejson|http://undefined.org/python/#simplejson]]
* [[html5lib|http://code.google.com/p/html5lib/]]
* [[wsgiref|http://pypi.python.org/pypi/wsgiref]] for Python versions prior to 2.5
* [[Beautiful Soup|http://www.crummy.com/software/BeautifulSoup/]] (required for importing [[TiddlyWiki]] documents)
* [[WikklyText|http://wikklytext.com/wiki/InstallPythonPackage.html]] for server-side conversion of wiki markup to HTML

</pre>
</div>
<div title="validator" server.title="validator" server.page.revision="1501" server.etag="&quot;docs/validator/1501:16a192cf206fa1051a61e8d09e952c4c17810879&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100314184243" created="20090625205418" tags="" >
<pre>
A validator is a function called when a [[recipe]], [[bag]] or [[tiddler]] is [[PUT|method:put]] to the server. Based on configuration, [[plugins|plugin]] and [[policies|policy]] zero to many validators may be called when an entity is PUT. How things work depends on the type of entity:

!Bags and Recipes
By default the description attribute of a bag or recipe is sanitized for dangerous HTML. That function may be turned off or other validators added by adjusting the list of functions in {{{tiddlyweb.web.validator.BAG_VALIDATORS}}} or {{{tiddlyweb.web.validator.RECIPE_VALIDATORS}}}. See below for more about the functions.

!Tiddlers
Tiddlers are sent through the validator process based on the {{{accept}}} constraint in the [[policy]] of the bag to which the tiddler is being {{{PUT}}}. If the accept constraint is empty no validation is done. If there is a [[user]], some users, a [[role]] or the special policy words {{{ANY}}} or {{{NONE}}} listed then the tiddler is passed to the functions in {{{tiddlyweb.web.validator.TIDDLER_VALIDATORS}}} for every user that //does not// match the constraint (that is, the content is accepted without validation for the people listed in the constraints).

In the current code distribution there are no ~TIDDLER_VALIDATORS, they may be added via [[plugins|plugin]].

!Validator Functions
A validator function has a simple signature: {{{entity, environ}}} where entity is a bag, recipe or tiddler. The validator either //changes// the provided entity, or raises an exception indicating that it can't be valid. The exceptions are {{{InvalidTiddlerError}}}, {{{InvalidBagError}}}, {{{InvalidRecipeError}}}.

!Examples
A simple example validator can be found at http://github.com/tiddlyweb/tiddlyweb-plugins/tree/master/validate-modifier

[[Ben Gillies]] has [[written|http://bengillies.net/#%5B%5BValidating%20TiddlyWeb%5D%5D]] validators for sanitizing [[HTML|http://github.com/bengillies/TiddlyWeb-Plugins/blob/master/validators/html_validator.py]] and [[TiddlyWiki|http://github.com/bengillies/TiddlyWeb-Plugins/blob/master/validators/tiddlywiki_validator.py]] inputs.
</pre>
</div>
<div title="Warts" server.title="Warts" server.page.revision="2216" server.etag="&quot;docs/Warts/2216:d4aa5acb4bdc13974e289a55e4e85383e4d37881&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100920093121" created="20090811234346" tags="" >
<pre>Warts are things that would be done differently if we were to do it all over again.

* The StorageInterface {{{tiddler_written}}} method is too useful to be left hanging as something to be overridden by monkey patching. It would be better to be able to register a tiddler written function. This has been fixed in [[1.1.x]].
* HTMLPresenter is crufty and awkward. A header and footer function registration system would be useful.
* Bag architecture and performance appears to be incorrect for how bags are actually being used. However the bag architecture is an explicit choice, an intentional constraint. The mismatch between expectations and design is a combination of bags being used in unexpected ways and poor documentation of bag concepts. There is probably middle ground that could be found where expectations and design and constraints are more aligned. See also [[Futures]] and [[1.1.x]].
* if a tiddler title ends with ".//ext//" and //ext// is registered as a [[serialization]] extension, the individual tiddler can only be accessed in that particular representation (e.g. "index.html" as HTML)
* The twanager commands for creating/editing bags, recipes and tiddlers (see e.g. [[twanager bag]]) take different kinds of input, sometimes matching serializations, sometimes not, resulting in confusion. Unfortunately the solution is not simple because the serializations are themselves confusing and the goal here is to make something useful for people to create entities from the command line. [[cdent]] thinks it would be ideal if someone or some ones were to create a or some twanager plugins which encapsulated the creation of the entities. This would help expose the right way to fix it all up.
* Using the text serialization in a PUT of a tiddler can be confusing if the strict format is not followed: at least one header is required and if it is empty then you must have "&lt;header&gt;:&lt;space&gt;".

See also DevWishes.
</pre>
</div>
<div title="serializer" server.title="serializer" server.page.revision="2184" server.etag="&quot;docs/serializer/2184:ce0d51b5228b5b653daa307517148e8e1f9c6d8a&quot;" modifier="cdent.tumblr.com" creator="cdent.tumblr.com" server.workspace="bags/docs" server.type="tiddlyweb" server.host="http://tiddlyweb.peermore.com/wiki" server.recipe="docs" server.bag="docs" server.permissions="read" server.content-type="" modified="20100830221854" created="20090323175722" tags="" >
<pre>In [[TiddlyWeb]], a serializer is a class that implements the [[SerializationInterface]] for the [[serialization]] of [[tiddler]] data.
Serialization formats are accessible as extensions to the respective URI.

By default, TiddlyWeb provides the following formats:
* {{{txt}}}: plain text
* {{{json}}}: [[JSON]]
* {{{html}}}: [[HTML]]

TiddlyWebWiki provides:
* {{{wiki}}}: [[TiddlyWiki]]

Additional serializers can be added by using [[plugins]] and adjusting [[tiddlywebconfig.py]].

The job of a serializer is twofold:
# Take an object representing a TiddlyWeb resource and turn it into a string of some form (e.g. [[JSON]]).
# Take a string of some form and use that string to //fill in// an object representing a TiddlyWeb resource.

In web requests a serializer is used to turn an object or collection of objects to a string when there is a {{{GET}}} request and a string to an object when there is a {{{PUT}}} request. The {{{GET}}} asks the server for a [[representation]] of a [[resource]]. The {{{PUT}}} request sends a representation to replace an existing resource. Note that replace is the correct word here, not update.

In the {{{text}}} [[store]] that comes with TiddlyWeb, the {{{text}}} serializer is used when reading and writing some entities to and from disk.

''A serializer should never be called directly by TiddlyWeb plugin code.'' Instead a serializer is produced by a factory class called {{{Serializer}}} in [[tiddlyweb/serializer.py|http://github.com/tiddlyweb/tiddlyweb/raw/master/tiddlyweb/serializer.py]].

See also:
* [[How do I use a serializer from plugin code?]]
* [[How do I write a custom serializer?]]

</pre>
</div>
</div>
<!--POST-STOREAREA-->
<!--POST-BODY-START-->
<!--POST-BODY-END-->
<script id="jsArea" type="text/javascript">
//<![CDATA[
//
// Please note:
//
// * This code is designed to be readable but for compactness it only includes brief comments. You can see fuller comments
//   in the project repository at https://github.com/TiddlyWiki/tiddlywiki
//
// * You should never need to modify this source code directly. TiddlyWiki is carefully designed to allow deep customisation
//   without changing the core code. Please consult the development group at http://groups.google.com/group/TiddlyWikiDev
//
// JSLint directives
/*global jQuery:false, version:false */
/*jslint bitwise:true, browser:true, confusion:true, eqeq:true, evil:true, forin:true, maxerr:100, plusplus:true, regexp:true, sloppy:true, sub:true, undef:true, unparam:true, vars:true, white:true */
//--
//-- Configuration repository
//--

// Miscellaneous options
var config = {
	numRssItems: 20, // Number of items in the RSS feed
	animDuration: 400, // Duration of UI animations in milliseconds
	cascadeFast: 20, // Speed for cascade animations (higher == slower)
	cascadeSlow: 60, // Speed for EasterEgg cascade animations
	cascadeDepth: 5, // Depth of cascade animation
	locale: "en" // W3C language tag
};

// Hashmap of alternative parsers for the wikifier
config.parsers = {};

// Adaptors
config.adaptors = {};
config.defaultAdaptor = null;

// Backstage tasks
config.tasks = {};

// Annotations
config.annotations = {};

// Custom fields to be automatically added to new tiddlers
config.defaultCustomFields = {};

// Messages
config.messages = {
	messageClose: {},
	dates: {},
	tiddlerPopup: {}
};

// Options that can be set in the options panel and/or cookies
config.options = {
	chkRegExpSearch: false,
	chkCaseSensitiveSearch: false,
	chkIncrementalSearch: true,
	chkAnimate: true,
	chkSaveBackups: true,
	chkAutoSave: false,
	chkGenerateAnRssFeed: false,
	chkSaveEmptyTemplate: false,
	chkOpenInNewWindow: true,
	chkToggleLinks: false,
	chkHttpReadOnly: true,
	chkForceMinorUpdate: false,
	chkConfirmDelete: true,
	chkInsertTabs: false,
	chkUsePreForStorage: true, // Whether to use <pre> format for storage
	chkDisplayInstrumentation: false,
	txtBackupFolder: "",
	txtEditorFocus: "text",
	txtMainTab: "tabTimeline",
	txtMoreTab: "moreTabAll",
	txtMaxEditRows: "30",
	txtFileSystemCharSet: "UTF-8",
	txtTheme: ""
	};
config.optionsDesc = {};

config.optionsSource = {};

// Default tiddler templates
var DEFAULT_VIEW_TEMPLATE = 1;
var DEFAULT_EDIT_TEMPLATE = 2;
config.tiddlerTemplates = {
	1: "ViewTemplate",
	2: "EditTemplate"
};

// More messages (rather a legacy layout that should not really be like this)
config.views = {
	wikified: {
		tag: {}
	},
	editor: {
		tagChooser: {}
	}
};

// Backstage tasks
config.backstageTasks = ["save","sync","importTask","tweak","upgrade","plugins"];

// Extensions
config.extensions = {};

// Macros; each has a 'handler' member that is inserted later
config.macros = {
	today: {},
	version: {},
	search: {sizeTextbox: 15},
	tiddler: {},
	tag: {},
	tags: {},
	tagging: {},
	timeline: {},
	allTags: {},
	list: {
		all: {},
		missing: {},
		orphans: {},
		shadowed: {},
		touched: {},
		filter: {}
	},
	closeAll: {},
	permaview: {},
	saveChanges: {},
	slider: {},
	option: {},
	options: {},
	newTiddler: {},
	newJournal: {},
	tabs: {},
	gradient: {},
	message: {},
	view: {defaultView: "text"},
	edit: {},
	tagChooser: {},
	toolbar: {},
	plugins: {},
	refreshDisplay: {},
	importTiddlers: {},
	upgrade: {
		source: "http://tiddlywiki-releases.tiddlyspace.com/upgrade",
		backupExtension: "pre.core.upgrade"
	},
	sync: {},
	annotations: {}
};

// Commands supported by the toolbar macro
config.commands = {
	closeTiddler: {},
	closeOthers: {},
	editTiddler: {},
	saveTiddler: {hideReadOnly: true},
	cancelTiddler: {},
	deleteTiddler: {hideReadOnly: true},
	permalink: {},
	references: {type: "popup"},
	jump: {type: "popup"},
	syncing: {type: "popup"},
	fields: {type: "popup"}
};

// Control of macro parameter evaluation
config.evaluateMacroParameters = "all";

// Basic regular expressions
config.textPrimitives = {
	upperLetter: "[A-Z\u00c0-\u00de\u0150\u0170]",
	lowerLetter: "[a-z0-9_\\-\u00df-\u00ff\u0151\u0171]",
	anyLetter:   "[A-Za-z0-9_\\-\u00c0-\u00de\u00df-\u00ff\u0150\u0170\u0151\u0171]",
	anyLetterStrict: "[A-Za-z0-9\u00c0-\u00de\u00df-\u00ff\u0150\u0170\u0151\u0171]"
};
if(!((new RegExp("[\u0150\u0170]","g")).test("\u0150"))) {
	config.textPrimitives = {
		upperLetter: "[A-Z\u00c0-\u00de]",
		lowerLetter: "[a-z0-9_\\-\u00df-\u00ff]",
		anyLetter:   "[A-Za-z0-9_\\-\u00c0-\u00de\u00df-\u00ff]",
		anyLetterStrict: "[A-Za-z0-9\u00c0-\u00de\u00df-\u00ff]"
	};
}
config.textPrimitives.sliceSeparator = "::";
config.textPrimitives.sectionSeparator = "##";
config.textPrimitives.urlPattern = "(?:file|http|https|mailto|ftp|irc|news|data):[^\\s'\"]+(?:/|\\b)";
config.textPrimitives.unWikiLink = "~";
config.textPrimitives.wikiLink = "(?:(?:" + config.textPrimitives.upperLetter + "+" +
	config.textPrimitives.lowerLetter + "+" +
	config.textPrimitives.upperLetter +
	config.textPrimitives.anyLetter + "*)|(?:" +
	config.textPrimitives.upperLetter + "{2,}" +
	config.textPrimitives.lowerLetter + "+))";

config.textPrimitives.cssLookahead = "(?:(" + config.textPrimitives.anyLetter + "+)\\(([^\\)\\|\\n]+)(?:\\):))|(?:(" + config.textPrimitives.anyLetter + "+):([^;\\|\\n]+);)";
config.textPrimitives.cssLookaheadRegExp = new RegExp(config.textPrimitives.cssLookahead,"mg");

config.textPrimitives.brackettedLink = "\\[\\[([^\\]]+)\\]\\]";
config.textPrimitives.titledBrackettedLink = "\\[\\[([^\\[\\]\\|]+)\\|([^\\[\\]\\|]+)\\]\\]";
config.textPrimitives.tiddlerForcedLinkRegExp = new RegExp("(?:" + config.textPrimitives.titledBrackettedLink + ")|(?:" +
	config.textPrimitives.brackettedLink + ")|(?:" +
	config.textPrimitives.urlPattern + ")","mg");
config.textPrimitives.tiddlerAnyLinkRegExp = new RegExp("("+ config.textPrimitives.wikiLink + ")|(?:" +
	config.textPrimitives.titledBrackettedLink + ")|(?:" +
	config.textPrimitives.brackettedLink + ")|(?:" +
	config.textPrimitives.urlPattern + ")","mg");

config.glyphs = {
	currBrowser: null,
	browsers: [],
	codes: {}
};

//--
//-- Shadow tiddlers
//--

config.shadowTiddlers = {
	StyleSheet: "",
	MarkupPreHead: "",
	MarkupPostHead: "",
	MarkupPreBody: "",
	MarkupPostBody: "",
	TabTimeline: '<<timeline>>',
	TabAll: '<<list all>>',
	TabTags: '<<allTags excludeLists>>',
	TabMoreMissing: '<<list missing>>',
	TabMoreOrphans: '<<list orphans>>',
	TabMoreShadowed: '<<list shadowed>>',
	AdvancedOptions: '<<options>>',
	PluginManager: '<<plugins>>',
	SystemSettings: '',
	ToolbarCommands: '|~ViewToolbar|closeTiddler closeOthers +editTiddler > fields syncing permalink references jump|\n|~EditToolbar|+saveTiddler -cancelTiddler deleteTiddler|',
	WindowTitle: '<<tiddler SiteTitle>> - <<tiddler SiteSubtitle>>'
};

// Browser detection... In a very few places, there's nothing else for it but to know what browser we're using.
config.userAgent = navigator.userAgent.toLowerCase();
config.browser = {
	isIE: config.userAgent.indexOf("msie") != -1 && config.userAgent.indexOf("opera") == -1,
	isGecko: navigator.product == "Gecko" && config.userAgent.indexOf("WebKit") == -1,
	ieVersion: /MSIE (\d.\d)/i.exec(config.userAgent), // config.browser.ieVersion[1], if it exists, will be the IE version string, eg "6.0"
	isSafari: config.userAgent.indexOf("applewebkit") != -1,
	isBadSafari: !((new RegExp("[\u0150\u0170]","g")).test("\u0150")),
	firefoxDate: /gecko\/(\d{8})/i.exec(config.userAgent), // config.browser.firefoxDate[1], if it exists, will be Firefox release date as "YYYYMMDD"
	isOpera: config.userAgent.indexOf("opera") != -1,
	isChrome: config.userAgent.indexOf('chrome') > -1,
	isLinux: config.userAgent.indexOf("linux") != -1,
	isUnix: config.userAgent.indexOf("x11") != -1,
	isMac: config.userAgent.indexOf("mac") != -1,
	isWindows: config.userAgent.indexOf("win") != -1
};

merge(config.glyphs,{
	browsers: [
		function() {return config.browser.isIE;},
		function() {return true;}
		],
	codes: {
		downTriangle: ["\u25BC","\u25BE"],
		downArrow: ["\u2193","\u2193"],
		bentArrowLeft: ["\u2190","\u21A9"],
		bentArrowRight: ["\u2192","\u21AA"]
	}
});

//--
//-- Translateable strings
//--

// Strings in "double quotes" should be translated; strings in 'single quotes' should be left alone

merge(config.options,{
	txtUserName: "YourName"});

merge(config.tasks,{
	save: {text: "save", tooltip: "Save your changes to this TiddlyWiki"},
	sync: {text: "sync", tooltip: "Synchronise changes with other TiddlyWiki files and servers", content: '<<sync>>'},
	importTask: {text: "import", tooltip: "Import tiddlers and plugins from other TiddlyWiki files and servers", content: '<<importTiddlers>>'},
	tweak: {text: "tweak", tooltip: "Tweak the appearance and behaviour of TiddlyWiki", content: '<<options>>'},
	upgrade: {text: "upgrade", tooltip: "Upgrade TiddlyWiki core code", content: '<<upgrade>>'},
	plugins: {text: "plugins", tooltip: "Manage installed plugins", content: '<<plugins>>'}
});

// Options that can be set in the options panel and/or cookies
merge(config.optionsDesc,{
	txtUserName: "Username for signing your edits",
	chkRegExpSearch: "Enable regular expressions for searches",
	chkCaseSensitiveSearch: "Case-sensitive searching",
	chkIncrementalSearch: "Incremental key-by-key searching",
	chkAnimate: "Enable animations",
	chkSaveBackups: "Keep backup file when saving changes",
	chkAutoSave: "Automatically save changes",
	chkGenerateAnRssFeed: "Generate an RSS feed when saving changes",
	chkSaveEmptyTemplate: "Generate an empty template when saving changes",
	chkOpenInNewWindow: "Open external links in a new window",
	chkToggleLinks: "Clicking on links to open tiddlers causes them to close",
	chkHttpReadOnly: "Hide editing features when viewed over HTTP",
	chkForceMinorUpdate: "Don't update modifier username and date when editing tiddlers",
	chkConfirmDelete: "Require confirmation before deleting tiddlers",
	chkInsertTabs: "Use the tab key to insert tab characters instead of moving between fields",
	txtBackupFolder: "Name of folder to use for backups",
	txtMaxEditRows: "Maximum number of rows in edit boxes",
	txtTheme: "Name of the theme to use",
	txtFileSystemCharSet: "Default character set for saving changes (Firefox/Mozilla only)"});

merge(config.messages,{
	customConfigError: "Problems were encountered loading plugins. See PluginManager for details",
	pluginError: "Error: %0",
	pluginDisabled: "Not executed because disabled via 'systemConfigDisable' tag",
	pluginForced: "Executed because forced via 'systemConfigForce' tag",
	pluginVersionError: "Not executed because this plugin needs a newer version of TiddlyWiki",
	nothingSelected: "Nothing is selected. You must select one or more items first",
	savedSnapshotError: "It appears that this TiddlyWiki has been incorrectly saved. Please see http://www.tiddlywiki.com/#Download for details",
	subtitleUnknown: "(unknown)",
	undefinedTiddlerToolTip: "The tiddler '%0' doesn't yet exist",
	shadowedTiddlerToolTip: "The tiddler '%0' doesn't yet exist, but has a pre-defined shadow value",
	tiddlerLinkTooltip: "%0 - %1, %2",
	externalLinkTooltip: "External link to %0",
	noTags: "There are no tagged tiddlers",
	notFileUrlError: "You need to save this TiddlyWiki to a file before you can save changes",
	cantSaveError: "It's not possible to save changes. Possible reasons include:\n- your browser doesn't support saving (Firefox, Internet Explorer, Safari and Opera all work if properly configured)\n- the pathname to your TiddlyWiki file contains illegal characters\n- the TiddlyWiki HTML file has been moved or renamed",
	invalidFileError: "The original file '%0' does not appear to be a valid TiddlyWiki",
	backupSaved: "Backup saved",
	backupFailed: "Failed to save backup file",
	rssSaved: "RSS feed saved",
	rssFailed: "Failed to save RSS feed file",
	emptySaved: "Empty template saved",
	emptyFailed: "Failed to save empty template file",
	mainSaved: "Main TiddlyWiki file saved",
	mainFailed: "Failed to save main TiddlyWiki file. Your changes have not been saved",
	macroError: "Error in macro <<%0>>",
	macroErrorDetails: "Error while executing macro <<%0>>:\n%1",
	missingMacro: "No such macro",
	overwriteWarning: "A tiddler named '%0' already exists. Choose OK to overwrite it",
	unsavedChangesWarning: "WARNING! There are unsaved changes in TiddlyWiki\n\nChoose OK to save\nChoose CANCEL to discard",
	confirmExit: "--------------------------------\n\nThere are unsaved changes in TiddlyWiki. If you continue you will lose those changes\n\n--------------------------------",
	saveInstructions: "SaveChanges",
	unsupportedTWFormat: "Unsupported TiddlyWiki format '%0'",
	tiddlerSaveError: "Error when saving tiddler '%0'",
	tiddlerLoadError: "Error when loading tiddler '%0'",
	wrongSaveFormat: "Cannot save with storage format '%0'. Using standard format for save.",
	invalidFieldName: "Invalid field name %0",
	fieldCannotBeChanged: "Field '%0' cannot be changed",
	loadingMissingTiddler: "Attempting to retrieve the tiddler '%0' from the '%1' server at:\n\n'%2' in the workspace '%3'",
	upgradeDone: "The upgrade to version %0 is now complete\n\nClick 'OK' to reload the newly upgraded TiddlyWiki",
	invalidCookie: "Invalid cookie '%0'"});

merge(config.messages.messageClose,{
	text: "close",
	tooltip: "close this message area"});

config.messages.backstage = {
	open: {text: "backstage", tooltip: "Open the backstage area to perform authoring and editing tasks"},
	close: {text: "close", tooltip: "Close the backstage area"},
	prompt: "backstage: ",
	decal: {
		edit: {text: "edit", tooltip: "Edit the tiddler '%0'"}
	}
};

config.messages.listView = {
	tiddlerTooltip: "Click for the full text of this tiddler",
	previewUnavailable: "(preview not available)"
};

config.messages.dates.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November","December"];
config.messages.dates.days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
config.messages.dates.shortMonths = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
config.messages.dates.shortDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
// suffixes for dates, eg "1st","2nd","3rd"..."30th","31st"
config.messages.dates.daySuffixes = ["st","nd","rd","th","th","th","th","th","th","th",
		"th","th","th","th","th","th","th","th","th","th",
		"st","nd","rd","th","th","th","th","th","th","th",
		"st"];
config.messages.dates.am = "am";
config.messages.dates.pm = "pm";

merge(config.messages.tiddlerPopup,{
	});

merge(config.views.wikified.tag,{
	labelNoTags: "no tags",
	labelTags: "tags: ",
	openTag: "Open tag '%0'",
	tooltip: "Show tiddlers tagged with '%0'",
	openAllText: "Open all",
	openAllTooltip: "Open all of these tiddlers",
	popupNone: "No other tiddlers tagged with '%0'"});

merge(config.views.wikified,{
	defaultText: "The tiddler '%0' doesn't yet exist. Double-click to create it",
	defaultModifier: "(missing)",
	shadowModifier: "(built-in shadow tiddler)",
	dateFormat: "DD MMM YYYY",
	createdPrompt: "created"});

merge(config.views.editor,{
	tagPrompt: "Type tags separated with spaces, [[use double square brackets]] if necessary, or add existing",
	defaultText: "Type the text for '%0'"});

merge(config.views.editor.tagChooser,{
	text: "tags",
	tooltip: "Choose existing tags to add to this tiddler",
	popupNone: "There are no tags defined",
	tagTooltip: "Add the tag '%0'"});

merge(config.messages,{
	sizeTemplates:
		[
		{unit: 1024*1024*1024, template: "%0\u00a0GB"},
		{unit: 1024*1024, template: "%0\u00a0MB"},
		{unit: 1024, template: "%0\u00a0KB"},
		{unit: 1, template: "%0\u00a0B"}
		]});

merge(config.macros.search,{
	label: "search",
	prompt: "Search this TiddlyWiki",
	placeholder: "",
	accessKey: "F",
	successMsg: "%0 tiddlers found matching %1",
	failureMsg: "No tiddlers found matching %0"});

merge(config.macros.tagging,{
	label: "tagging: ",
	labelNotTag: "not tagging",
	tooltip: "List of tiddlers tagged with '%0'"});

merge(config.macros.timeline,{
	dateFormat: "DD MMM YYYY"});

merge(config.macros.allTags,{
	tooltip: "Show tiddlers tagged with '%0'",
	noTags: "There are no tagged tiddlers"});

config.macros.list.all.prompt = "All tiddlers in alphabetical order";
config.macros.list.missing.prompt = "Tiddlers that have links to them but are not defined";
config.macros.list.orphans.prompt = "Tiddlers that are not linked to from any other tiddlers";
config.macros.list.shadowed.prompt = "Tiddlers shadowed with default contents";
config.macros.list.touched.prompt = "Tiddlers that have been modified locally";

merge(config.macros.closeAll,{
	label: "close all",
	prompt: "Close all displayed tiddlers (except any that are being edited)"});

merge(config.macros.permaview,{
	label: "permaview",
	prompt: "Link to an URL that retrieves all the currently displayed tiddlers"});

merge(config.macros.saveChanges,{
	label: "save changes",
	prompt: "Save all tiddlers to create a new TiddlyWiki",
	accessKey: "S"});

merge(config.macros.newTiddler,{
	label: "new tiddler",
	prompt: "Create a new tiddler",
	title: "New Tiddler",
	accessKey: "N"});

merge(config.macros.newJournal,{
	label: "new journal",
	prompt: "Create a new tiddler from the current date and time",
	accessKey: "J"});

merge(config.macros.options,{
	wizardTitle: "Tweak advanced options",
	step1Title: "These options are saved in cookies in your browser",
	step1Html: "<input type='hidden' name='markList'></input><br><input type='checkbox' checked='false' name='chkUnknown'>Show unknown options</input>",
	unknownDescription: "//(unknown)//",
	listViewTemplate: {
		columns: [
			{name: 'Option', field: 'option', title: "Option", type: 'String'},
			{name: 'Description', field: 'description', title: "Description", type: 'WikiText'},
			{name: 'Name', field: 'name', title: "Name", type: 'String'}
			],
		rowClasses: [
			{className: 'lowlight', field: 'lowlight'}
			]}
	});

merge(config.macros.plugins,{
	wizardTitle: "Manage plugins",
	step1Title: "Currently loaded plugins",
	step1Html: "<input type='hidden' name='markList'></input>", // DO NOT TRANSLATE
	skippedText: "(This plugin has not been executed because it was added since startup)",
	noPluginText: "There are no plugins installed",
	confirmDeleteText: "Are you sure you want to delete these plugins:\n\n%0",
	removeLabel: "remove systemConfig tag",
	removePrompt: "Remove systemConfig tag",
	deleteLabel: "delete",
	deletePrompt: "Delete these tiddlers forever",
	listViewTemplate: {
		columns: [
			{name: 'Selected', field: 'Selected', rowName: 'title', type: 'Selector'},
			{name: 'Tiddler', field: 'tiddler', title: "Tiddler", type: 'Tiddler'},
			{name: 'Description', field: 'Description', title: "Description", type: 'String'},
			{name: 'Version', field: 'Version', title: "Version", type: 'String'},
			{name: 'Size', field: 'size', tiddlerLink: 'size', title: "Size", type: 'Size'},
			{name: 'Forced', field: 'forced', title: "Forced", tag: 'systemConfigForce', type: 'TagCheckbox'},
			{name: 'Disabled', field: 'disabled', title: "Disabled", tag: 'systemConfigDisable', type: 'TagCheckbox'},
			{name: 'Executed', field: 'executed', title: "Loaded", type: 'Boolean', trueText: "Yes", falseText: "No"},
			{name: 'Startup Time', field: 'startupTime', title: "Startup Time", type: 'String'},
			{name: 'Error', field: 'error', title: "Status", type: 'Boolean', trueText: "Error", falseText: "OK"},
			{name: 'Log', field: 'log', title: "Log", type: 'StringList'}
			],
		rowClasses: [
			{className: 'error', field: 'error'},
			{className: 'warning', field: 'warning'}
			]},
	listViewTemplateReadOnly: {
		columns: [
			{name: 'Tiddler', field: 'tiddler', title: "Tiddler", type: 'Tiddler'},
			{name: 'Description', field: 'Description', title: "Description", type: 'String'},
			{name: 'Version', field: 'Version', title: "Version", type: 'String'},
			{name: 'Size', field: 'size', tiddlerLink: 'size', title: "Size", type: 'Size'},
			{name: 'Executed', field: 'executed', title: "Loaded", type: 'Boolean', trueText: "Yes", falseText: "No"},
			{name: 'Startup Time', field: 'startupTime', title: "Startup Time", type: 'String'},
			{name: 'Error', field: 'error', title: "Status", type: 'Boolean', trueText: "Error", falseText: "OK"},
			{name: 'Log', field: 'log', title: "Log", type: 'StringList'}
			],
		rowClasses: [
			{className: 'error', field: 'error'},
			{className: 'warning', field: 'warning'}
			]}
	});

merge(config.macros.toolbar,{
	moreLabel: "more",
	morePrompt: "Show additional commands",
	lessLabel: "less",
	lessPrompt: "Hide additional commands",
	separator: "|"
	});

merge(config.macros.refreshDisplay,{
	label: "refresh",
	prompt: "Redraw the entire TiddlyWiki display"
	});

merge(config.macros.importTiddlers,{
	readOnlyWarning: "You cannot import into a read-only TiddlyWiki file. Try opening it from a file:// URL",
	wizardTitle: "Import tiddlers from another file or server",
	step1Title: "Step 1: Locate the server or TiddlyWiki file",
	step1Html: "Specify the type of the server: <select name='selTypes'><option value=''>Choose...</option></select><br>Enter the URL or pathname here: <input type='text' size=50 name='txtPath'><br>...or browse for a file: <input type='file' size=50 name='txtBrowse'><br><hr>...or select a pre-defined feed: <select name='selFeeds'><option value=''>Choose...</option></select>",
	openLabel: "open",
	openPrompt: "Open the connection to this file or server",
	statusOpenHost: "Opening the host",
	statusGetWorkspaceList: "Getting the list of available workspaces",
	step2Title: "Step 2: Choose the workspace",
	step2Html: "Enter a workspace name: <input type='text' size=50 name='txtWorkspace'><br>...or select a workspace: <select name='selWorkspace'><option value=''>Choose...</option></select>",
	cancelLabel: "cancel",
	cancelPrompt: "Cancel this import",
	statusOpenWorkspace: "Opening the workspace",
	statusGetTiddlerList: "Getting the list of available tiddlers",
	errorGettingTiddlerList: "Error getting list of tiddlers, click Cancel to try again",
	errorGettingTiddlerListHttp404: "Error retrieving tiddlers from url, please ensure the url exists. Click Cancel to try again.",
	errorGettingTiddlerListHttp: "Error retrieving tiddlers from url, please ensure this url exists and is <a href='http://enable-cors.org/'>CORS</a> enabled",
	errorGettingTiddlerListFile: "Error retrieving tiddlers from local file, please make sure the file is in the same directory as your TiddlyWiki. Click Cancel to try again.",
	step3Title: "Step 3: Choose the tiddlers to import",
	step3Html: "<input type='hidden' name='markList'></input><br><input type='checkbox' checked='true' name='chkSync'>Keep these tiddlers linked to this server so that you can synchronise subsequent changes</input><br><input type='checkbox' name='chkSave'>Save the details of this server in a 'systemServer' tiddler called:</input> <input type='text' size=25 name='txtSaveTiddler'>",
	importLabel: "import",
	importPrompt: "Import these tiddlers",
	confirmOverwriteText: "Are you sure you want to overwrite these tiddlers:\n\n%0",
	step4Title: "Step 4: Importing %0 tiddler(s)",
	step4Html: "<input type='hidden' name='markReport'></input>", // DO NOT TRANSLATE
	doneLabel: "done",
	donePrompt: "Close this wizard",
	statusDoingImport: "Importing tiddlers",
	statusDoneImport: "All tiddlers imported",
	systemServerNamePattern: "%2 on %1",
	systemServerNamePatternNoWorkspace: "%1",
	confirmOverwriteSaveTiddler: "The tiddler '%0' already exists. Click 'OK' to overwrite it with the details of this server, or 'Cancel' to leave it unchanged",
	serverSaveTemplate: "|''Type:''|%0|\n|''URL:''|%1|\n|''Workspace:''|%2|\n\nThis tiddler was automatically created to record the details of this server",
	serverSaveModifier: "(System)",
	listViewTemplate: {
		columns: [
			{name: 'Selected', field: 'Selected', rowName: 'title', type: 'Selector'},
			{name: 'Tiddler', field: 'tiddler', title: "Tiddler", type: 'Tiddler'},
			{name: 'Size', field: 'size', tiddlerLink: 'size', title: "Size", type: 'Size'},
			{name: 'Tags', field: 'tags', title: "Tags", type: 'Tags'}
			],
		rowClasses: [
			]}
	});

merge(config.macros.upgrade,{
	wizardTitle: "Upgrade TiddlyWiki core code",
	step1Title: "Update or repair this TiddlyWiki to the latest release",
	step1Html: "You are about to upgrade to the latest release of the TiddlyWiki core code (from <a href='%0' class='externalLink' target='_blank'>%1</a>). Your content will be preserved across the upgrade.<br><br>Note that core upgrades have been known to interfere with older plugins. If you run into problems with the upgraded file, see <a href='http://www.tiddlywiki.org/wiki/CoreUpgrades' class='externalLink' target='_blank'>http://www.tiddlywiki.org/wiki/CoreUpgrades</a>",
	errorCantUpgrade: "Unable to upgrade this TiddlyWiki. You can only perform upgrades on TiddlyWiki files stored locally",
	errorNotSaved: "You must save changes before you can perform an upgrade",
	step2Title: "Confirm the upgrade details",
	step2Html_downgrade: "You are about to downgrade to TiddlyWiki version %0 from %1.<br><br>Downgrading to an earlier version of the core code is not recommended",
	step2Html_restore: "This TiddlyWiki appears to be already using the latest version of the core code (%0).<br><br>You can continue to upgrade anyway to ensure that the core code hasn't been corrupted or damaged",
	step2Html_upgrade: "You are about to upgrade to TiddlyWiki version %0 from %1",
	upgradeLabel: "upgrade",
	upgradePrompt: "Prepare for the upgrade process",
	statusPreparingBackup: "Preparing backup",
	statusSavingBackup: "Saving backup file",
	errorSavingBackup: "There was a problem saving the backup file",
	statusLoadingCore: "Loading core code",
	errorLoadingCore: "Error loading the core code",
	errorCoreFormat: "Error with the new core code",
	statusSavingCore: "Saving the new core code",
	statusReloadingCore: "Reloading the new core code",
	startLabel: "start",
	startPrompt: "Start the upgrade process",
	cancelLabel: "cancel",
	cancelPrompt: "Cancel the upgrade process",
	step3Title: "Upgrade cancelled",
	step3Html: "You have cancelled the upgrade process"
	});

merge(config.macros.sync,{
	listViewTemplate: {
		columns: [
			{name: 'Selected', field: 'selected', rowName: 'title', type: 'Selector'},
			{name: 'Tiddler', field: 'tiddler', title: "Tiddler", type: 'Tiddler'},
			{name: 'Server Type', field: 'serverType', title: "Server type", type: 'String'},
			{name: 'Server Host', field: 'serverHost', title: "Server host", type: 'String'},
			{name: 'Server Workspace', field: 'serverWorkspace', title: "Server workspace", type: 'String'},
			{name: 'Status', field: 'status', title: "Synchronisation status", type: 'String'},
			{name: 'Server URL', field: 'serverUrl', title: "Server URL", text: "View", type: 'Link'}
			],
		rowClasses: [
			],
		buttons: [
			{caption: "Sync these tiddlers", name: 'sync'}
			]},
	wizardTitle: "Synchronize with external servers and files",
	step1Title: "Choose the tiddlers you want to synchronize",
	step1Html: "<input type='hidden' name='markList'></input>", // DO NOT TRANSLATE
	syncLabel: "sync",
	syncPrompt: "Sync these tiddlers",
	hasChanged: "Changed while unplugged",
	hasNotChanged: "Unchanged while unplugged",
	syncStatusList: {
		none: {text: "...", display:'none', className:'notChanged'},
		changedServer: {text: "Changed on server", display:null, className:'changedServer'},
		changedLocally: {text: "Changed while unplugged", display:null, className:'changedLocally'},
		changedBoth: {text: "Changed while unplugged and on server", display:null, className:'changedBoth'},
		notFound: {text: "Not found on server", display:null, className:'notFound'},
		putToServer: {text: "Saved update on server", display:null, className:'putToServer'},
		gotFromServer: {text: "Retrieved update from server", display:null, className:'gotFromServer'}
		}
	});

merge(config.macros.annotations,{
	});

merge(config.commands.closeTiddler,{
	text: "close",
	tooltip: "Close this tiddler"});

merge(config.commands.closeOthers,{
	text: "close others",
	tooltip: "Close all other tiddlers"});

merge(config.commands.editTiddler,{
	text: "edit",
	tooltip: "Edit this tiddler",
	readOnlyText: "view",
	readOnlyTooltip: "View the source of this tiddler"});

merge(config.commands.saveTiddler,{
	text: "done",
	tooltip: "Save changes to this tiddler"});

merge(config.commands.cancelTiddler,{
	text: "cancel",
	tooltip: "Undo changes to this tiddler",
	warning: "Are you sure you want to abandon your changes to '%0'?",
	readOnlyText: "done",
	readOnlyTooltip: "View this tiddler normally"});

merge(config.commands.deleteTiddler,{
	text: "delete",
	tooltip: "Delete this tiddler",
	warning: "Are you sure you want to delete '%0'?"});

merge(config.commands.permalink,{
	text: "permalink",
	tooltip: "Permalink for this tiddler"});

merge(config.commands.references,{
	text: "references",
	tooltip: "Show tiddlers that link to this one",
	popupNone: "No references"});

merge(config.commands.jump,{
	text: "jump",
	tooltip: "Jump to another open tiddler"});

merge(config.commands.syncing,{
	text: "syncing",
	tooltip: "Control synchronisation of this tiddler with a server or external file",
	currentlySyncing: "<div>Currently syncing via <span class='popupHighlight'>'%0'</span> to:</"+"div><div>host: <span class='popupHighlight'>%1</span></"+"div><div>workspace: <span class='popupHighlight'>%2</span></"+"div>", // Note escaping of closing <div> tag
	notCurrentlySyncing: "Not currently syncing",
	captionUnSync: "Stop synchronising this tiddler",
	chooseServer: "Synchronise this tiddler with another server:",
	currServerMarker: "\u25cf ",
	notCurrServerMarker: "  "});

merge(config.commands.fields,{
	text: "fields",
	tooltip: "Show the extended fields of this tiddler",
	emptyText: "There are no extended fields for this tiddler",
	listViewTemplate: {
		columns: [
			{name: 'Field', field: 'field', title: "Field", type: 'String'},
			{name: 'Value', field: 'value', title: "Value", type: 'String'}
			],
		rowClasses: [
			],
		buttons: [
			]}});

merge(config.shadowTiddlers,{
	DefaultTiddlers: "[[GettingStarted]]",
	MainMenu: "[[GettingStarted]]",
	SiteTitle: "My TiddlyWiki",
	SiteSubtitle: "a reusable non-linear personal web notebook",
	SiteUrl: "",
	SideBarOptions: '<<search>><<closeAll>><<permaview>><<newTiddler>><<newJournal "DD MMM YYYY" "journal">><<saveChanges>><<slider chkSliderOptionsPanel OptionsPanel "options \u00bb" "Change TiddlyWiki advanced options">>',
	SideBarTabs: '<<tabs txtMainTab "Timeline" "Timeline" TabTimeline "All" "All tiddlers" TabAll "Tags" "All tags" TabTags "More" "More lists" TabMore>>',
	TabMore: '<<tabs txtMoreTab "Missing" "Missing tiddlers" TabMoreMissing "Orphans" "Orphaned tiddlers" TabMoreOrphans "Shadowed" "Shadowed tiddlers" TabMoreShadowed>>'
	});

merge(config.annotations,{
	AdvancedOptions: "This shadow tiddler provides access to several advanced options",
	ColorPalette: "These values in this shadow tiddler determine the colour scheme of the ~TiddlyWiki user interface",
	DefaultTiddlers: "The tiddlers listed in this shadow tiddler will be automatically displayed when ~TiddlyWiki starts up",
	EditTemplate: "The HTML template in this shadow tiddler determines how tiddlers look while they are being edited",
	GettingStarted: "This shadow tiddler provides basic usage instructions",
	ImportTiddlers: "This shadow tiddler provides access to importing tiddlers",
	MainMenu: "This shadow tiddler is used as the contents of the main menu in the left-hand column of the screen",
	MarkupPreHead: "This tiddler is inserted at the top of the <head> section of the TiddlyWiki HTML file",
	MarkupPostHead: "This tiddler is inserted at the bottom of the <head> section of the TiddlyWiki HTML file",
	MarkupPreBody: "This tiddler is inserted at the top of the <body> section of the TiddlyWiki HTML file",
	MarkupPostBody: "This tiddler is inserted at the end of the <body> section of the TiddlyWiki HTML file immediately after the script block",
	OptionsPanel: "This shadow tiddler is used as the contents of the options panel slider in the right-hand sidebar",
	PageTemplate: "The HTML template in this shadow tiddler determines the overall ~TiddlyWiki layout",
	PluginManager: "This shadow tiddler provides access to the plugin manager",
	SideBarOptions: "This shadow tiddler is used as the contents of the option panel in the right-hand sidebar",
	SideBarTabs: "This shadow tiddler is used as the contents of the tabs panel in the right-hand sidebar",
	SiteSubtitle: "This shadow tiddler is used as the second part of the page title",
	SiteTitle: "This shadow tiddler is used as the first part of the page title",
	SiteUrl: "This shadow tiddler should be set to the full target URL for publication",
	StyleSheetColors: "This shadow tiddler contains CSS definitions related to the color of page elements. ''DO NOT EDIT THIS TIDDLER'', instead make your changes in the StyleSheet shadow tiddler",
	StyleSheet: "This tiddler can contain custom CSS definitions",
	StyleSheetLayout: "This shadow tiddler contains CSS definitions related to the layout of page elements. ''DO NOT EDIT THIS TIDDLER'', instead make your changes in the StyleSheet shadow tiddler",
	StyleSheetLocale: "This shadow tiddler contains CSS definitions related to the translation locale",
	StyleSheetPrint: "This shadow tiddler contains CSS definitions for printing",
	SystemSettings: "This tiddler is used to store configuration options for this TiddlyWiki document",
	TabAll: "This shadow tiddler contains the contents of the 'All' tab in the right-hand sidebar",
	TabMore: "This shadow tiddler contains the contents of the 'More' tab in the right-hand sidebar",
	TabMoreMissing: "This shadow tiddler contains the contents of the 'Missing' tab in the right-hand sidebar",
	TabMoreOrphans: "This shadow tiddler contains the contents of the 'Orphans' tab in the right-hand sidebar",
	TabMoreShadowed: "This shadow tiddler contains the contents of the 'Shadowed' tab in the right-hand sidebar",
	TabTags: "This shadow tiddler contains the contents of the 'Tags' tab in the right-hand sidebar",
	TabTimeline: "This shadow tiddler contains the contents of the 'Timeline' tab in the right-hand sidebar",
	ToolbarCommands: "This shadow tiddler determines which commands are shown in tiddler toolbars",
	ViewTemplate: "The HTML template in this shadow tiddler determines how tiddlers look"
	});
//--
//-- Main
//--

var params = null; // Command line parameters
var store = null; // TiddlyWiki storage
var story = null; // Main story
var formatter = null; // Default formatters for the wikifier
var anim = typeof Animator == "function" ? new Animator() : null; // Animation engine
var readOnly = false; // Whether we're in readonly mode
var highlightHack = null; // Embarrassing hack department...
var hadConfirmExit = false; // Don't warn more than once
var safeMode = false; // Disable all plugins and cookies
var showBackstage; // Whether to include the backstage area
var installedPlugins = []; // Information filled in when plugins are executed
var startingUp = false; // Whether we're in the process of starting up
var pluginInfo,tiddler; // Used to pass information to plugins in loadPlugins()

// Whether to use the JavaSaver applet
var useJavaSaver = (config.browser.isSafari || config.browser.isOpera) && (document.location.toString().substr(0,4) != "http");

if(!window || !window.console) {
	console = {tiddlywiki:true,log:function(message) {displayMessage(message);}};
}

// Starting up
function main()
{
	var t10,t9,t8,t7,t6,t5,t4,t3,t2,t1,t0 = new Date();
	startingUp = true;
	var doc = jQuery(document);
	jQuery.noConflict();
	window.onbeforeunload = function(e) {if(window.confirmExit) return confirmExit();};
	params = getParameters();
	if(params)
		params = params.parseParams("open",null,false);
	store = new TiddlyWiki({config:config});
	invokeParamifier(params,"oninit");
	story = new Story("tiddlerDisplay","tiddler");
	addEvent(document,"click",Popup.onDocumentClick);
	saveTest();
	var s;
	for(s=0; s<config.notifyTiddlers.length; s++)
		store.addNotification(config.notifyTiddlers[s].name,config.notifyTiddlers[s].notify);
	t1 = new Date();
	loadShadowTiddlers();
	doc.trigger("loadShadows");
	t2 = new Date();
	store.loadFromDiv("storeArea","store",true);
	doc.trigger("loadTiddlers");
	loadOptions();
	t3 = new Date();
	invokeParamifier(params,"onload");
	t4 = new Date();
	readOnly = (window.location.protocol == "file:") ? false : config.options.chkHttpReadOnly;
	var pluginProblem = loadPlugins("systemConfig");
	doc.trigger("loadPlugins");
	t5 = new Date();
	formatter = new Formatter(config.formatters);
	invokeParamifier(params,"onconfig");
	story.switchTheme(config.options.txtTheme);
	showBackstage = showBackstage !== undefined ? showBackstage : !readOnly;
	t6 = new Date();
	var m;
	for(m in config.macros) {
		if(config.macros[m].init)
			config.macros[m].init();
	}
	t7 = new Date();
	store.notifyAll();
	t8 = new Date();
	restart();
	refreshDisplay();
	t9 = new Date();
	if(pluginProblem) {
		story.displayTiddler(null,"PluginManager");
		displayMessage(config.messages.customConfigError);
	}
	if(showBackstage)
		backstage.init();
	t10 = new Date();
	if(config.options.chkDisplayInstrumentation) {
		displayMessage("LoadShadows " + (t2-t1) + " ms");
		displayMessage("LoadFromDiv " + (t3-t2) + " ms");
		displayMessage("LoadPlugins " + (t5-t4) + " ms");
		displayMessage("Macro init " + (t7-t6) + " ms");
		displayMessage("Notify " + (t8-t7) + " ms");
		displayMessage("Restart " + (t9-t8) + " ms");
		displayMessage("Total: " + (t10-t0) + " ms");
	}
	startingUp = false;
	doc.trigger("startup");
}

// Called on unload. All functions called conditionally since they themselves may have been unloaded.
function unload()
{
	if(window.checkUnsavedChanges)
		checkUnsavedChanges();
	if(window.scrubNodes)
		scrubNodes(document.body);
}

// Restarting
function restart()
{
	invokeParamifier(params,"onstart");
	if(story.isEmpty()) {
		story.displayDefaultTiddlers();
	}
	window.scrollTo(0,0);
}

function saveTest()
{
	var s = document.getElementById("saveTest");
	if(s.hasChildNodes())
		alert(config.messages.savedSnapshotError);
	s.appendChild(document.createTextNode("savetest"));
}

function loadShadowTiddlers()
{
	var shadows = new TiddlyWiki();
	shadows.loadFromDiv("shadowArea","shadows",true);
	shadows.forEachTiddler(function(title,tiddler){config.shadowTiddlers[title] = tiddler.text;});
}

function loadPlugins(tag)
{
	if(safeMode)
		return false;
	var tiddlers = store.getTaggedTiddlers(tag);
	tiddlers.sort(function(a,b) {return a.title < b.title ? -1 : (a.title == b.title ? 0 : 1);});
	var toLoad = [];
	var nLoaded = 0;
	var map = {};
	var nPlugins = tiddlers.length;
	installedPlugins = [];
	var i;
	for(i=0; i<nPlugins; i++) {
		var p = getPluginInfo(tiddlers[i]);
		installedPlugins[i] = p;
		var n = p.Name || p.title;
		if(n)
			map[n] = p;
		n = p.Source;
		if(n)
			map[n] = p;
	}
	var visit = function(p) {
		if(!p || p.done)
			return;
		p.done = 1;
		var reqs = p.Requires;
		if(reqs) {
			reqs = reqs.readBracketedList();
			var i;
			for(i=0; i<reqs.length; i++)
				visit(map[reqs[i]]);
		}
		toLoad.push(p);
	};
	for(i=0; i<nPlugins; i++)
		visit(installedPlugins[i]);
	for(i=0; i<toLoad.length; i++) {
		p = toLoad[i];
		pluginInfo = p;
		tiddler = p.tiddler;
		if(isPluginExecutable(p)) {
			if(isPluginEnabled(p)) {
				p.executed = true;
				var startTime = new Date();
				try {
					if(tiddler.text)
						window.eval(tiddler.text);
					nLoaded++;
				} catch(ex) {
					p.log.push(config.messages.pluginError.format([exceptionText(ex)]));
					p.error = true;
					if(!console.tiddlywiki) {
						console.log("error evaluating " + tiddler.title, ex);
					}
				}
				pluginInfo.startupTime = String((new Date()) - startTime) + "ms";
			} else {
				nPlugins--;
			}
		} else {
			p.warning = true;
		}
	}
	return nLoaded != nPlugins;
}

function getPluginInfo(tiddler)
{
	var p = store.getTiddlerSlices(tiddler.title,["Name","Description","Version","Requires","CoreVersion","Date","Source","Author","License","Browsers"]);
	p.tiddler = tiddler;
	p.title = tiddler.title;
	p.log = [];
	return p;
}

// Check that a particular plugin is valid for execution
function isPluginExecutable(plugin)
{
	if(plugin.tiddler.isTagged("systemConfigForce")) {
		plugin.log.push(config.messages.pluginForced);
		return true;
	}
	if(plugin["CoreVersion"]) {
		var coreVersion = plugin["CoreVersion"].split(".");
		var w = parseInt(coreVersion[0],10) - version.major;
		if(w == 0 && coreVersion[1])
			w = parseInt(coreVersion[1],10) - version.minor;
		if(w == 0 && coreVersion[2])
			w = parseInt(coreVersion[2],10) - version.revision;
		if(w > 0) {
			plugin.log.push(config.messages.pluginVersionError);
			return false;
		}
	}
	return true;
}

function isPluginEnabled(plugin)
{
	if(plugin.tiddler.isTagged("systemConfigDisable")) {
		plugin.log.push(config.messages.pluginDisabled);
		return false;
	}
	return true;
}

//--
//-- Paramifiers
//--

function getParameters()
{
	var p = null;
	if(window.location.hash) {
		p = decodeURIComponent(window.location.hash.substr(1));
		if(config.browser.firefoxDate != null && config.browser.firefoxDate[1] < "20051111")
			p = convertUTF8ToUnicode(p);
	}
	return p;
}

function invokeParamifier(params,handler)
{
	if(!params || params.length == undefined || params.length <= 1)
		return;
	var i;
	for(i=1; i<params.length; i++) {
		var p = config.paramifiers[params[i].name];
		if(p && p[handler] instanceof Function)
			p[handler](params[i].value);
		else {
			var h = config.optionHandlers[params[i].name.substr(0,3)];
			if(h && h.set instanceof Function)
				h.set(params[i].name,params[i].value);
		}
	}
}

config.paramifiers = {};

config.paramifiers.start = {
	oninit: function(v) {
		safeMode = v.toLowerCase() == "safe";
	}
};

config.paramifiers.open = {
	onstart: function(v) {
		if(!readOnly || store.tiddlerExists(v) || store.isShadowTiddler(v))
			story.displayTiddler("bottom",v,null,false,null);
	}
};

config.paramifiers.story = {
	onstart: function(v) {
		var list = store.getTiddlerText(v,"").parseParams("open",null,false);
		invokeParamifier(list,"onstart");
	}
};

config.paramifiers.search = {
	onstart: function(v) {
		story.search(v,false,false);
	}
};

config.paramifiers.searchRegExp = {
	onstart: function(v) {
		story.prototype.search(v,false,true);
	}
};

config.paramifiers.tag = {
	onstart: function(v) {
		story.displayTiddlers(null,store.filterTiddlers("[tag["+v+"]]"),null,false,null);
	}
};

config.paramifiers.newTiddler = {
	onstart: function(v) {
		var args = v.parseParams("anon", null, null)[0];
		var title = args.title ? args.title[0] : v;
		var customFields = args.fields ? args.fields[0] : null;
		if(!readOnly) {
			story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE,false,null,customFields);
			story.focusTiddler(title,"text");
			var i,tags = args.tag || [];
			for(i=0;i<tags.length;i++) {
				story.setTiddlerTag(title,tags[i],+1);
			}
		}
	}
};

config.paramifiers.newJournal = {
	onstart: function(v) {
		if(!readOnly) {
			var now = new Date();
			var title = now.formatString(v.trim());
			story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE);
			story.focusTiddler(title,"text");
		}
	}
};

config.paramifiers.readOnly = {
	onconfig: function(v) {
		var p = v.toLowerCase();
		readOnly = p == "yes" ? true : (p == "no" ? false : readOnly);
	}
};

config.paramifiers.theme = {
	onconfig: function(v) {
		story.switchTheme(v);
	}
};

config.paramifiers.upgrade = {
	onstart: function(v) {
		upgradeFrom(v);
	}
};

config.paramifiers.recent= {
	onstart: function(v) {
		var titles=[];
		var i,tiddlers=store.getTiddlers("modified","excludeLists").reverse();
		for(i=0; i<v && i<tiddlers.length; i++)
			titles.push(tiddlers[i].title);
		story.displayTiddlers(null,titles);
	}
};

config.paramifiers.filter = {
	onstart: function(v) {
		story.displayTiddlers(null,store.filterTiddlers(v),null,false);
	}
};

//--
//-- Formatter helpers
//--

function Formatter(formatters)
{
	var n;
	this.formatters = [];
	var pattern = [];
	for(n=0; n<formatters.length; n++) {
		pattern.push("(" + formatters[n].match + ")");
		this.formatters.push(formatters[n]);
	}
	this.formatterRegExp = new RegExp(pattern.join("|"),"mg");
}

config.formatterHelpers = {

	createElementAndWikify: function(w)
	{
		w.subWikifyTerm(createTiddlyElement(w.output,this.element),this.termRegExp);
	},

	inlineCssHelper: function(w)
	{
		var styles = [];
		config.textPrimitives.cssLookaheadRegExp.lastIndex = w.nextMatch;
		var lookaheadMatch = config.textPrimitives.cssLookaheadRegExp.exec(w.source);
		while(lookaheadMatch && lookaheadMatch.index == w.nextMatch) {
			var s,v;
			if(lookaheadMatch[1]) {
				s = lookaheadMatch[1].unDash();
				v = lookaheadMatch[2];
			} else {
				s = lookaheadMatch[3].unDash();
				v = lookaheadMatch[4];
			}
			if(s=="bgcolor")
				s = "backgroundColor";
			if(s=="float")
				s = "cssFloat";
			styles.push({style: s, value: v});
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
			config.textPrimitives.cssLookaheadRegExp.lastIndex = w.nextMatch;
			lookaheadMatch = config.textPrimitives.cssLookaheadRegExp.exec(w.source);
		}
		return styles;
	},

	applyCssHelper: function(e,styles)
	{
		var t;
		for(t=0; t< styles.length; t++) {
			try {
				e.style[styles[t].style] = styles[t].value;
			} catch (ex) {
			}
		}
	},

	enclosedTextHelper: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
			var text = lookaheadMatch[1];
			if(config.browser.isIE)
				text = text.replace(/\n/g,"\r");
			createTiddlyElement(w.output,this.element,null,null,text);
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
		}
	},

	isExternalLink: function(link)
	{
		if(store.tiddlerExists(link) || store.isShadowTiddler(link)) {
			return false;
		}
		var urlRegExp = new RegExp(config.textPrimitives.urlPattern,"mg");
		if(urlRegExp.exec(link)) {
			return true;
		}
		if(link.indexOf(".")!=-1 || link.indexOf("\\")!=-1 || link.indexOf("/")!=-1 || link.indexOf("#")!=-1) {
			return true;
		}
		return false;
	}

};

//--
//-- Standard formatters
//--

config.formatters = [
{
	name: "table",
	match: "^\\|(?:[^\\n]*)\\|(?:[fhck]?)$",
	lookaheadRegExp: /^\|([^\n]*)\|([fhck]?)$/mg,
	rowTermRegExp: /(\|(?:[fhck]?)$\n?)/mg,
	cellRegExp: /(?:\|([^\n\|]*)\|)|(\|[fhck]?$\n?)/mg,
	cellTermRegExp: /((?:\x20*)\|)/mg,
	rowTypes: {"c":"caption", "h":"thead", "":"tbody", "f":"tfoot"},
	handler: function(w)
	{
		var table = createTiddlyElement(w.output,"table",null,"twtable");
		var prevColumns = [];
		var currRowType = null;
		var rowContainer;
		var rowCount = 0;
		var onmouseover = function() {jQuery(this).addClass("hoverRow");};
		var onmouseout = function() {jQuery(this).removeClass("hoverRow");};
		w.nextMatch = w.matchStart;
		this.lookaheadRegExp.lastIndex = w.nextMatch;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		while(lookaheadMatch && lookaheadMatch.index == w.nextMatch) {
			var nextRowType = lookaheadMatch[2];
			if(nextRowType == "k") {
				table.className = lookaheadMatch[1];
				w.nextMatch += lookaheadMatch[0].length+1;
			} else {
				if(nextRowType != currRowType) {
					rowContainer = createTiddlyElement(table,this.rowTypes[nextRowType]);
					currRowType = nextRowType;
				}
				if(currRowType == "c") {
					// Caption
					w.nextMatch++;
					if(rowContainer != table.firstChild)
						table.insertBefore(rowContainer,table.firstChild);
					rowContainer.setAttribute("align",rowCount == 0?"top":"bottom");
					w.subWikifyTerm(rowContainer,this.rowTermRegExp);
				} else {
					var theRow = createTiddlyElement(rowContainer,"tr",null,rowCount%2?"oddRow":"evenRow");
					theRow.onmouseover = onmouseover;
					theRow.onmouseout = onmouseout;
					this.rowHandler(w,theRow,prevColumns);
					rowCount++;
				}
			}
			this.lookaheadRegExp.lastIndex = w.nextMatch;
			lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		}
	},
	rowHandler: function(w,e,prevColumns)
	{
		var col = 0;
		var colSpanCount = 1;
		var prevCell = null;
		this.cellRegExp.lastIndex = w.nextMatch;
		var cellMatch = this.cellRegExp.exec(w.source);
		while(cellMatch && cellMatch.index == w.nextMatch) {
			if(cellMatch[1] == "~") {
				// Rowspan
				var last = prevColumns[col];
				if(last) {
					last.rowSpanCount++;
					last.element.setAttribute("rowspan",last.rowSpanCount);
					last.element.setAttribute("rowSpan",last.rowSpanCount); // Needed for IE
					last.element.valign = "center";
					if(colSpanCount > 1) {
						last.element.setAttribute("colspan",colSpanCount);
						last.element.setAttribute("colSpan",colSpanCount); // Needed for IE
						colSpanCount = 1;
					}
				}
				w.nextMatch = this.cellRegExp.lastIndex-1;
			} else if(cellMatch[1] == ">") {
				// Colspan
				colSpanCount++;
				w.nextMatch = this.cellRegExp.lastIndex-1;
			} else if(cellMatch[2]) {
				// End of row
				if(prevCell && colSpanCount > 1) {
					prevCell.setAttribute("colspan",colSpanCount);
					prevCell.setAttribute("colSpan",colSpanCount); // Needed for IE
				}
				w.nextMatch = this.cellRegExp.lastIndex;
				break;
			} else {
				// Cell
				w.nextMatch++;
				var styles = config.formatterHelpers.inlineCssHelper(w);
				var spaceLeft = false;
				var chr = w.source.substr(w.nextMatch,1);
				while(chr == " ") {
					spaceLeft = true;
					w.nextMatch++;
					chr = w.source.substr(w.nextMatch,1);
				}
				var cell;
				if(chr == "!") {
					cell = createTiddlyElement(e,"th");
					w.nextMatch++;
				} else {
					cell = createTiddlyElement(e,"td");
				}
				prevCell = cell;
				prevColumns[col] = {rowSpanCount:1,element:cell};
				if(colSpanCount > 1) {
					cell.setAttribute("colspan",colSpanCount);
					cell.setAttribute("colSpan",colSpanCount); // Needed for IE
					colSpanCount = 1;
				}
				config.formatterHelpers.applyCssHelper(cell,styles);
				w.subWikifyTerm(cell,this.cellTermRegExp);
				if(w.matchText.substr(w.matchText.length-2,1) == " ") // spaceRight
					cell.align = spaceLeft ? "center" : "left";
				else if(spaceLeft)
					cell.align = "right";
				w.nextMatch--;
			}
			col++;
			this.cellRegExp.lastIndex = w.nextMatch;
			cellMatch = this.cellRegExp.exec(w.source);
		}
	}
},

{
	name: "heading",
	match: "^!{1,6}",
	termRegExp: /(\n)/mg,
	handler: function(w)
	{
		w.subWikifyTerm(createTiddlyElement(w.output,"h" + w.matchLength),this.termRegExp);
	}
},

{
	name: "list",
	match: "^(?:[\\*#;:]+)",
	lookaheadRegExp: /^(?:(?:(\*)|(#)|(;)|(:))+)/mg,
	termRegExp: /(\n)/mg,
	handler: function(w)
	{
		var stack = [w.output];
		var currLevel = 0, currType = null;
		var listLevel, listType, itemType, baseType;
		w.nextMatch = w.matchStart;
		this.lookaheadRegExp.lastIndex = w.nextMatch;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		while(lookaheadMatch && lookaheadMatch.index == w.nextMatch) {
			if(lookaheadMatch[1]) {
				listType = "ul";
				itemType = "li";
			} else if(lookaheadMatch[2]) {
				listType = "ol";
				itemType = "li";
			} else if(lookaheadMatch[3]) {
				listType = "dl";
				itemType = "dt";
			} else if(lookaheadMatch[4]) {
				listType = "dl";
				itemType = "dd";
			}
			if(!baseType)
				baseType = listType;
			listLevel = lookaheadMatch[0].length;
			w.nextMatch += lookaheadMatch[0].length;
			var t;
			if(listLevel > currLevel) {
				for(t=currLevel; t<listLevel; t++) {
					var target = (currLevel == 0) ? stack[stack.length-1] : stack[stack.length-1].lastChild;
					stack.push(createTiddlyElement(target,listType));
				}
			} else if(listType!=baseType && listLevel==1) {
				w.nextMatch -= lookaheadMatch[0].length;
				return;
			} else if(listLevel < currLevel) {
				for(t=currLevel; t>listLevel; t--)
					stack.pop();
			} else if(listLevel == currLevel && listType != currType) {
				stack.pop();
				stack.push(createTiddlyElement(stack[stack.length-1].lastChild,listType));
			}
			currLevel = listLevel;
			currType = listType;
			var e = createTiddlyElement(stack[stack.length-1],itemType);
			w.subWikifyTerm(e,this.termRegExp);
			this.lookaheadRegExp.lastIndex = w.nextMatch;
			lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		}
	}
},

{
	name: "quoteByBlock",
	match: "^<<<\\n",
	termRegExp: /(^<<<(\n|$))/mg,
	element: "blockquote",
	handler: config.formatterHelpers.createElementAndWikify
},

{
	name: "quoteByLine",
	match: "^>+",
	lookaheadRegExp: /^>+/mg,
	termRegExp: /(\n)/mg,
	element: "blockquote",
	handler: function(w)
	{
		var stack = [w.output];
		var currLevel = 0;
		var newLevel = w.matchLength;
		var t,matched;
		do {
			if(newLevel > currLevel) {
				for(t=currLevel; t<newLevel; t++)
					stack.push(createTiddlyElement(stack[stack.length-1],this.element));
			} else if(newLevel < currLevel) {
				for(t=currLevel; t>newLevel; t--)
					stack.pop();
			}
			currLevel = newLevel;
			w.subWikifyTerm(stack[stack.length-1],this.termRegExp);
			createTiddlyElement(stack[stack.length-1],"br");
			this.lookaheadRegExp.lastIndex = w.nextMatch;
			var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
			matched = lookaheadMatch && lookaheadMatch.index == w.nextMatch;
			if(matched) {
				newLevel = lookaheadMatch[0].length;
				w.nextMatch += lookaheadMatch[0].length;
			}
		} while(matched);
	}
},

{
	name: "rule",
	match: "^----+$\\n?|<hr ?/?>\\n?",
	handler: function(w)
	{
		createTiddlyElement(w.output,"hr");
	}
},

{
	name: "monospacedByLine",
	match: "^(?:/\\*\\{\\{\\{\\*/|\\{\\{\\{|//\\{\\{\\{|<!--\\{\\{\\{-->)\\n",
	element: "pre",
	handler: function(w)
	{
		switch(w.matchText) {
		case "/*{{{*/\n": // CSS
			this.lookaheadRegExp = /\/\*\{\{\{\*\/\n*((?:^[^\n]*\n)+?)(\n*^\f*\/\*\}\}\}\*\/$\n?)/mg;
			break;
		case "{{{\n": // monospaced block
			this.lookaheadRegExp = /^\{\{\{\n((?:^[^\n]*\n)+?)(^\f*\}\}\}$\n?)/mg;
			break;
		case "//{{{\n": // plugin
			this.lookaheadRegExp = /^\/\/\{\{\{\n\n*((?:^[^\n]*\n)+?)(\n*^\f*\/\/\}\}\}$\n?)/mg;
			break;
		case "<!--{{{-->\n": //template
			this.lookaheadRegExp = /<!--\{\{\{-->\n*((?:^[^\n]*\n)+?)(\n*^\f*<!--\}\}\}-->$\n?)/mg;
			break;
		default:
			break;
		}
		config.formatterHelpers.enclosedTextHelper.call(this,w);
	}
},

{
	name: "wikifyComment",
	match: "^(?:/\\*\\*\\*|<!---)\\n",
	handler: function(w)
	{
		var termRegExp = (w.matchText == "/***\n") ? (/(^\*\*\*\/\n)/mg) : (/(^--->\n)/mg);
		w.subWikifyTerm(w.output,termRegExp);
	}
},

{
	name: "macro",
	match: "<<",
	lookaheadRegExp: /<<([^>\s]+)(?:\s*)((?:[^>]|(?:>(?!>)))*)>>/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart && lookaheadMatch[1]) {
			w.nextMatch = this.lookaheadRegExp.lastIndex;
			invokeMacro(w.output,lookaheadMatch[1],lookaheadMatch[2],w,w.tiddler);
		}
	}
},

{
	name: "prettyLink",
	match: "\\[\\[",
	lookaheadRegExp: /\[\[(.*?)(?:\|(~)?(.*?))?\]\]/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
			var e;
			var text = lookaheadMatch[1];
			if(lookaheadMatch[3]) {
				// Pretty bracketted link
				var link = lookaheadMatch[3];
				e = (!lookaheadMatch[2] && config.formatterHelpers.isExternalLink(link)) ?
						createExternalLink(w.output,link) : createTiddlyLink(w.output,link,false,null,w.isStatic,w.tiddler);
			} else {
				// Simple bracketted link
				e = createTiddlyLink(w.output,text,false,null,w.isStatic,w.tiddler);
			}
			createTiddlyText(e,text);
			w.nextMatch = this.lookaheadRegExp.lastIndex;
		}
	}
},

{
	name: "wikiLink",
	match: config.textPrimitives.unWikiLink+"?"+config.textPrimitives.wikiLink,
	handler: function(w)
	{
		if(w.matchText.substr(0,1) == config.textPrimitives.unWikiLink) {
			w.outputText(w.output,w.matchStart+1,w.nextMatch);
			return;
		}
		if(w.matchStart > 0) {
			var preRegExp = new RegExp(config.textPrimitives.anyLetterStrict,"mg");
			preRegExp.lastIndex = w.matchStart-1;
			var preMatch = preRegExp.exec(w.source);
			if(preMatch.index == w.matchStart-1) {
				w.outputText(w.output,w.matchStart,w.nextMatch);
				return;
			}
		}
		if(w.autoLinkWikiWords || store.isShadowTiddler(w.matchText)) {
			var link = createTiddlyLink(w.output,w.matchText,false,null,w.isStatic,w.tiddler);
			w.outputText(link,w.matchStart,w.nextMatch);
		} else {
			w.outputText(w.output,w.matchStart,w.nextMatch);
		}
	}
},

{
	name: "urlLink",
	match: config.textPrimitives.urlPattern,
	handler: function(w)
	{
		w.outputText(createExternalLink(w.output,w.matchText),w.matchStart,w.nextMatch);
	}
},

{
	name: "image",
	match: "\\[[<>]?[Ii][Mm][Gg]\\[",
	lookaheadRegExp: /\[([<]?)(>?)[Ii][Mm][Gg]\[(?:([^\|\]]+)\|)?([^\[\]\|]+)\](?:\[([^\]]*)\])?\]/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
			var e = w.output;
			if(lookaheadMatch[5]) {
				var link = lookaheadMatch[5];
				e = config.formatterHelpers.isExternalLink(link) ? createExternalLink(w.output,link) : createTiddlyLink(w.output,link,false,null,w.isStatic,w.tiddler);
				jQuery(e).addClass("imageLink");
			}
			var img = createTiddlyElement(e,"img");
			if(lookaheadMatch[1])
				img.align = "left";
			else if(lookaheadMatch[2])
				img.align = "right";
			if(lookaheadMatch[3]) {
				img.title = lookaheadMatch[3];
				img.setAttribute("alt",lookaheadMatch[3]);
			}
			img.src = lookaheadMatch[4];
			w.nextMatch = this.lookaheadRegExp.lastIndex;
		}
	}
},

{
	name: "html",
	match: "<[Hh][Tt][Mm][Ll]>",
	lookaheadRegExp: /<[Hh][Tt][Mm][Ll]>((?:.|\n)*?)<\/[Hh][Tt][Mm][Ll]>/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
			createTiddlyElement(w.output,"span").innerHTML = lookaheadMatch[1];
			w.nextMatch = this.lookaheadRegExp.lastIndex;
		}
	}
},

{
	name: "commentByBlock",
	match: "/%",
	lookaheadRegExp: /\/%((?:.|\n)*?)%\//mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart)
			w.nextMatch = this.lookaheadRegExp.lastIndex;
	}
},

{
	name: "characterFormat",
	match: "''|//|__|\\^\\^|~~|--(?!\\s|$)|\\{\\{\\{",
	handler: function(w)
	{
		switch(w.matchText) {
		case "''":
			w.subWikifyTerm(w.output.appendChild(document.createElement("strong")),/('')/mg);
			break;
		case "//":
			w.subWikifyTerm(createTiddlyElement(w.output,"em"),/(\/\/)/mg);
			break;
		case "__":
			w.subWikifyTerm(createTiddlyElement(w.output,"u"),/(__)/mg);
			break;
		case "^^":
			w.subWikifyTerm(createTiddlyElement(w.output,"sup"),/(\^\^)/mg);
			break;
		case "~~":
			w.subWikifyTerm(createTiddlyElement(w.output,"sub"),/(~~)/mg);
			break;
		case "--":
			w.subWikifyTerm(createTiddlyElement(w.output,"strike"),/(--)/mg);
			break;
		case "{{{":
			var lookaheadRegExp = /\{\{\{((?:.|\n)*?)\}\}\}/mg;
			lookaheadRegExp.lastIndex = w.matchStart;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
				createTiddlyElement(w.output,"code",null,null,lookaheadMatch[1]);
				w.nextMatch = lookaheadRegExp.lastIndex;
			}
			break;
		}
	}
},

{
	name: "customFormat",
	match: "@@|\\{\\{",
	handler: function(w)
	{
		switch(w.matchText) {
		case "@@":
			var e = createTiddlyElement(w.output,"span");
			var styles = config.formatterHelpers.inlineCssHelper(w);
			if(styles.length == 0)
				e.className = "marked";
			else
				config.formatterHelpers.applyCssHelper(e,styles);
			w.subWikifyTerm(e,/(@@)/mg);
			break;
		case "{{":
			var lookaheadRegExp = /\{\{[\s]*([\w]+[\s\w]*)[\s]*\{(\n?)/mg;
			lookaheadRegExp.lastIndex = w.matchStart;
			var lookaheadMatch = lookaheadRegExp.exec(w.source);
			if(lookaheadMatch) {
				w.nextMatch = lookaheadRegExp.lastIndex;
				e = createTiddlyElement(w.output,lookaheadMatch[2] == "\n" ? "div" : "span",null,lookaheadMatch[1]);
				w.subWikifyTerm(e,/(\}\}\})/mg);
			}
			break;
		}
	}
},

{
	name: "mdash",
	match: "--",
	handler: function(w)
	{
		createTiddlyElement(w.output,"span").innerHTML = "&mdash;";
	}
},

{
	name: "lineBreak",
	match: "\\n|<br ?/?>",
	handler: function(w)
	{
		createTiddlyElement(w.output,"br");
	}
},

{
	name: "rawText",
	match: "\"{3}|<nowiki>",
	lookaheadRegExp: /(?:\"{3}|<nowiki>)((?:.|\n)*?)(?:\"{3}|<\/nowiki>)/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
			createTiddlyElement(w.output,"span",null,null,lookaheadMatch[1]);
			w.nextMatch = this.lookaheadRegExp.lastIndex;
		}
	}
},

{
	name: "htmlEntitiesEncoding",
	match: "(?:(?:&#?[a-zA-Z0-9]{2,8};|.)(?:&#?(?:x0*(?:3[0-6][0-9a-fA-F]|1D[c-fC-F][0-9a-fA-F]|20[d-fD-F][0-9a-fA-F]|FE2[0-9a-fA-F])|0*(?:76[89]|7[7-9][0-9]|8[0-7][0-9]|761[6-9]|76[2-7][0-9]|84[0-3][0-9]|844[0-7]|6505[6-9]|6506[0-9]|6507[0-1]));)+|&#?[a-zA-Z0-9]{2,8};)",
	handler: function(w)
	{
		createTiddlyElement(w.output,"span").innerHTML = w.matchText;
	}
}

];

//--
//-- Wikifier
//--

function getParser(tiddler,format)
{
	if(tiddler) {
		if(!format)
			format = tiddler.fields["wikiformat"];
		var i;
		if(format) {
			for(i in config.parsers) {
				if(format == config.parsers[i].format)
					return config.parsers[i];
			}
		} else {
			for(i in config.parsers) {
				if(tiddler.isTagged(config.parsers[i].formatTag))
					return config.parsers[i];
			}
		}
	}
	return formatter;
}

function Wikifier(source,formatter,highlightRegExp,tiddler)
{
	this.source = source;
	this.output = null;
	this.formatter = formatter;
	this.nextMatch = 0;
	this.autoLinkWikiWords = tiddler && tiddler.autoLinkWikiWords() == false ? false : true;
	this.highlightRegExp = highlightRegExp;
	this.highlightMatch = null;
	this.isStatic = false;
	if(highlightRegExp) {
		highlightRegExp.lastIndex = 0;
		this.highlightMatch = highlightRegExp.exec(source);
	}
	this.tiddler = tiddler;
}

Wikifier.prototype.wikifyPlain = function()
{
	var e = createTiddlyElement(document.body,"div");
	e.style.display = "none";
	this.subWikify(e);
	var text = jQuery(e).text();
	jQuery(e).remove();
	return text;
};

Wikifier.prototype.subWikify = function(output,terminator)
{
	try {
		if(terminator)
			this.subWikifyTerm(output,new RegExp("(" + terminator + ")","mg"));
		else
			this.subWikifyUnterm(output);
	} catch(ex) {
		showException(ex);
	}
};

Wikifier.prototype.subWikifyUnterm = function(output)
{
	var oldOutput = this.output;
	this.output = output;
	this.formatter.formatterRegExp.lastIndex = this.nextMatch;
	var formatterMatch = this.formatter.formatterRegExp.exec(this.source);
	while(formatterMatch) {
		// Output any text before the match
		if(formatterMatch.index > this.nextMatch)
			this.outputText(this.output,this.nextMatch,formatterMatch.index);
		// Set the match parameters for the handler
		this.matchStart = formatterMatch.index;
		this.matchLength = formatterMatch[0].length;
		this.matchText = formatterMatch[0];
		this.nextMatch = this.formatter.formatterRegExp.lastIndex;
		var t;
		for(t=1; t<formatterMatch.length; t++) {
			if(formatterMatch[t]) {
				this.formatter.formatters[t-1].handler(this);
				this.formatter.formatterRegExp.lastIndex = this.nextMatch;
				break;
			}
		}
		formatterMatch = this.formatter.formatterRegExp.exec(this.source);
	}
	if(this.nextMatch < this.source.length) {
		this.outputText(this.output,this.nextMatch,this.source.length);
		this.nextMatch = this.source.length;
	}
	this.output = oldOutput;
};

Wikifier.prototype.subWikifyTerm = function(output,terminatorRegExp)
{
	var oldOutput = this.output;
	this.output = output;
	terminatorRegExp.lastIndex = this.nextMatch;
	var terminatorMatch = terminatorRegExp.exec(this.source);
	this.formatter.formatterRegExp.lastIndex = this.nextMatch;
	var formatterMatch = this.formatter.formatterRegExp.exec(terminatorMatch ? this.source.substr(0,terminatorMatch.index) : this.source);
	while(terminatorMatch || formatterMatch) {
		if(terminatorMatch && (!formatterMatch || terminatorMatch.index <= formatterMatch.index)) {
			if(terminatorMatch.index > this.nextMatch)
				this.outputText(this.output,this.nextMatch,terminatorMatch.index);
			this.matchText = terminatorMatch[1];
			this.matchLength = terminatorMatch[1].length;
			this.matchStart = terminatorMatch.index;
			this.nextMatch = this.matchStart + this.matchLength;
			this.output = oldOutput;
			return;
		}
		if(formatterMatch.index > this.nextMatch)
			this.outputText(this.output,this.nextMatch,formatterMatch.index);
		this.matchStart = formatterMatch.index;
		this.matchLength = formatterMatch[0].length;
		this.matchText = formatterMatch[0];
		this.nextMatch = this.formatter.formatterRegExp.lastIndex;
		var t;
		for(t=1; t<formatterMatch.length; t++) {
			if(formatterMatch[t]) {
				this.formatter.formatters[t-1].handler(this);
				this.formatter.formatterRegExp.lastIndex = this.nextMatch;
				break;
			}
		}
		terminatorRegExp.lastIndex = this.nextMatch;
		terminatorMatch = terminatorRegExp.exec(this.source);
		formatterMatch = this.formatter.formatterRegExp.exec(terminatorMatch ? this.source.substr(0,terminatorMatch.index) : this.source);
	}
	if(this.nextMatch < this.source.length) {
		this.outputText(this.output,this.nextMatch,this.source.length);
		this.nextMatch = this.source.length;
	}
	this.output = oldOutput;
};

Wikifier.prototype.outputText = function(place,startPos,endPos)
{
	while(this.highlightMatch && (this.highlightRegExp.lastIndex > startPos) && (this.highlightMatch.index < endPos) && (startPos < endPos)) {
		if(this.highlightMatch.index > startPos) {
			createTiddlyText(place,this.source.substring(startPos,this.highlightMatch.index));
			startPos = this.highlightMatch.index;
		}
		var highlightEnd = Math.min(this.highlightRegExp.lastIndex,endPos);
		createTiddlyElement(place,"span",null,"highlight",this.source.substring(startPos,highlightEnd));
		startPos = highlightEnd;
		if(startPos >= this.highlightRegExp.lastIndex)
			this.highlightMatch = this.highlightRegExp.exec(this.source);
	}
	if(startPos < endPos) {
		createTiddlyText(place,this.source.substring(startPos,endPos));
	}
};

function wikify(source,output,highlightRegExp,tiddler)
{
	if(source) {
		var wikifier = new Wikifier(source,getParser(tiddler),highlightRegExp,tiddler);
		var t0 = new Date();
		wikifier.subWikify(output);
		if(tiddler && config.options.chkDisplayInstrumentation)
			displayMessage("wikify:" +tiddler.title+ " in " + (new Date()-t0) + " ms");
	}
}

function wikifyStatic(source,highlightRegExp,tiddler,format)
{
	var e = createTiddlyElement(document.body,"pre");
	e.style.display = "none";
	var html = "";
	if(source && source != "") {
		if(!tiddler)
			tiddler = new Tiddler("temp");
		var wikifier = new Wikifier(source,getParser(tiddler,format),highlightRegExp,tiddler);
		wikifier.isStatic = true;
		wikifier.subWikify(e);
		html = e.innerHTML;
		jQuery(e).remove();
	}
	return html;
}

function wikifyPlainText(text,limit,tiddler)
{
	if(limit > 0)
		text = text.substr(0,limit);
	var wikifier = new Wikifier(text,formatter,null,tiddler);
	return wikifier.wikifyPlain();
}

function highlightify(source,output,highlightRegExp,tiddler)
{
	if(source) {
		var wikifier = new Wikifier(source,formatter,highlightRegExp,tiddler);
		wikifier.outputText(output,0,source.length);
	}
}

//--
//-- Macro definitions
//--

function invokeMacro(place,macro,params,wikifier,tiddler)
{
	try {
		var m = config.macros[macro];
		if(m && m.handler) {
			var tiddlerElem = story.findContainingTiddler(place);
			window.tiddler = tiddlerElem ? store.getTiddler(tiddlerElem.getAttribute("tiddler")) : null;
			window.place = place;
			var allowEval = true;
			if(config.evaluateMacroParameters=="system") {
				if(!tiddler || tiddler.tags.indexOf("systemAllowEval") == -1) {
					allowEval = false;
				}
			}
			m.handler(place,macro,m.noPreParse?null:params.readMacroParams(!allowEval),wikifier,params,tiddler);
		} else {
			createTiddlyError(place,config.messages.macroError.format([macro]),config.messages.macroErrorDetails.format([macro,config.messages.missingMacro]));
		}
	} catch(ex) {
		createTiddlyError(place,config.messages.macroError.format([macro]),config.messages.macroErrorDetails.format([macro,ex.toString()]));
	}
}

config.macros.version.handler = function(place)
{
	jQuery("<span/>").text(formatVersion()).appendTo(place);
};

config.macros.today.handler = function(place,macroName,params)
{
	var now = new Date();
	var text = params[0] ? now.formatString(params[0].trim()) : now.toLocaleString();
	jQuery("<span/>").text(text).appendTo(place);
};

config.macros.list.template = "<<view title link>>";
config.macros.list.handler = function(place,macroName,params,wikifier,paramString)
{
	var list = document.createElement("ul");
	jQuery(list).attr({ refresh: "macro", macroName: macroName }).data("params", paramString);
	place.appendChild(list);
	this.refresh(list);
};

config.macros.list.refresh = function(list) {
	var paramString = jQuery(list).data("params");
	var params = paramString.readMacroParams();
	var args = paramString.parseParams("anon", null, null)[0];
	var type = args.anon ? args.anon[0] : "all";
	jQuery(list).empty().addClass("list list-" + type);
	var template = args.template ? store.getTiddlerText(args.template[0]) : false;
	if(!template) {
		template = config.macros.list.template;
	}
	if(this[type].prompt)
		createTiddlyElement(list,"li",null,"listTitle",this[type].prompt);
	var results;
	if(this[type].handler)
		results = this[type].handler(params);
	var t;
	for(t = 0; t < results.length; t++) {
		var li = document.createElement("li");
		list.appendChild(li);
		var tiddler = results[t];
		if(typeof(tiddler) == 'string') { // deal with missing etc..
				tiddler = store.getTiddler(tiddler) || new Tiddler(tiddler);
		}
		wikify(template, li, null, tiddler);
	}
	if(results.length === 0 && args.emptyMessage) {
		jQuery(list).addClass("emptyList");
		jQuery("<li />").text(args.emptyMessage[0]).appendTo(list);
	}
};

config.macros.list.all.handler = function(params)
{
	return store.reverseLookup("tags","excludeLists",false,"title");
};

config.macros.list.missing.handler = function(params)
{
	return store.getMissingLinks();
};

config.macros.list.orphans.handler = function(params)
{
	return store.getOrphans();
};

config.macros.list.shadowed.handler = function(params)
{
	return store.getShadowed();
};

config.macros.list.touched.handler = function(params)
{
	return store.getTouched();
};

config.macros.list.filter.handler = function(params)
{
	var filter = params[1];
	var results = [];
	if(filter) {
		var tiddlers = store.filterTiddlers(filter);
		var t;
		for(t=0; t<tiddlers.length; t++)
			results.push(tiddlers[t].title);
	}
	return results;
};

config.macros.allTags.handler = function(place,macroName,params)
{
	var tags = store.getTags(params[0]);
	var ul = createTiddlyElement(place,"ul");
	if(tags.length == 0)
		createTiddlyElement(ul,"li",null,"listTitle",this.noTags);
	var t;
	for(t=0; t<tags.length; t++) {
		var title = tags[t][0];
		var info = getTiddlyLinkInfo(title);
		var li = createTiddlyElement(ul,"li");
		var btn = createTiddlyButton(li,title + " (" + tags[t][1] + ")",this.tooltip.format([title]),onClickTag,info.classes);
		btn.setAttribute("tag",title);
		btn.setAttribute("refresh","link");
		btn.setAttribute("tiddlyLink",title);
		if(params[1]) {
			btn.setAttribute("sortby",params[1]);
		}
	}
};

var macro = config.macros.timeline;
merge(macro, {
	handler: function(place,macroName,params, wikifier, paramString, tiddler) {
		var container = jQuery("<div />").attr("params", paramString).
			attr("macroName", macroName).appendTo(place)[0];
		macro.refresh(container);
	},
	refresh: function(container) {
		jQuery(container).attr("refresh", "macro").empty();
		var paramString = jQuery(container).attr("params");
		var args = paramString.parseParams("anon", null, null)[0];
		var params = args.anon || [];

		var field = params[0] || "modified";
		var dateFormat = params[2] || this.dateFormat;
		var groupTemplate = macro.groupTemplate.format(field, dateFormat);
		groupTemplate = args.groupTemplate ? store.getTiddlerText(args.groupTemplate[0]) || groupTemplate :
			groupTemplate;

		var itemTemplate = macro.itemTemplate;
		itemTemplate = args.template ? store.getTiddlerText(args.template[0]) || itemTemplate :
			itemTemplate;

		var tiddlers = args.filter ? store.sortTiddlers(store.filterTiddlers(args.filter[0]), field) :
			store.reverseLookup("tags", "excludeLists", false, field);
		var lastGroup = "", ul;
		var last = params[1] ? tiddlers.length-Math.min(tiddlers.length,parseInt(params[1],10)) : 0;
		var t;
		for(t=tiddlers.length-1; t>=last; t--) {
			var tiddler = tiddlers[t];
			var theGroup = wikifyPlainText(groupTemplate,0,tiddler);
			if(typeof(ul) == "undefined" || theGroup != lastGroup) {
				ul = document.createElement("ul");
				jQuery(ul).addClass("timeline");
				container.appendChild(ul);
				createTiddlyElement(ul,"li",null,"listTitle",theGroup);
				lastGroup = theGroup;
			}
			var item = createTiddlyElement(ul,"li",null,"listLink");
			wikify(itemTemplate,item,null,tiddler);
		}
	},
	groupTemplate: "<<view %0 date '%1'>>", 
	itemTemplate: "<<view title link>>"
});

config.macros.tiddler.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var allowEval = true;
	var stack = config.macros.tiddler.tiddlerStack;
	if(stack.length > 0 && config.evaluateMacroParameters == "system") {
		// included tiddler and "system" evaluation required, so check tiddler tagged appropriately
		var title = stack[stack.length-1];
		var pos = title.indexOf(config.textPrimitives.sectionSeparator);
		if(pos != -1) {
			title = title.substr(0,pos); // get the base tiddler title
		}
		var t = store.getTiddler(title);
		if(!t || t.tags.indexOf("systemAllowEval") == -1) {
			allowEval = false;
		}
	}
	params = paramString.parseParams("name",null,allowEval,false,true);
	var names = params[0]["name"];
	var tiddlerName = names[0];
	var className = names[1] || null;
	var args = params[0]["with"];
	var wrapper = createTiddlyElement(place,"span",null,className,null,{
		refresh: "content", tiddler: tiddlerName
	});
	if(args!==undefined)
		wrapper.setAttribute("args","[["+args.join("]] [[")+"]]");
	this.transclude(wrapper,tiddlerName,args);
};

config.macros.tiddler.transclude = function(wrapper,tiddlerName,args)
{
	var text = store.getTiddlerText(tiddlerName);
	if(!text)
		return;
	var stack = config.macros.tiddler.tiddlerStack;
	if(stack.indexOf(tiddlerName) !== -1)
		return;
	stack.push(tiddlerName);
	try {
		if(typeof args == "string")
			args = args.readBracketedList();
		var n = args ? Math.min(args.length,9) : 0;
		var i;
		for(i=0; i<n; i++) {
			var placeholderRE = new RegExp("\\$" + (i + 1),"mg");
			text = text.replace(placeholderRE,args[i]);
		}
		config.macros.tiddler.renderText(wrapper,text,tiddlerName);
	} finally {
		stack.pop();
	}
};

config.macros.tiddler.renderText = function(place,text,tiddlerName)
{
	wikify(text,place,null,store.getTiddler(tiddlerName));
};

config.macros.tiddler.tiddlerStack = [];

config.macros.tag.handler = function(place,macroName,params)
{
	var btn = createTagButton(place,params[0],null,params[1],params[2]);
	if(params[3]) {
		btn.setAttribute('sortby',params[3]);
	}
};

config.macros.tags.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	params = paramString.parseParams("anon",null,true,false,false);
	var ul = createTiddlyElement(place,"ul");
	var title = getParam(params,"anon","");
	if(title && store.tiddlerExists(title))
		tiddler = store.getTiddler(title);
	var sep = getParam(params,"sep"," ");
	var lingo = config.views.wikified.tag;
	var label = null;
	var t;
	for(t=0; t<tiddler.tags.length; t++) {
		var tag = store.getTiddler(tiddler.tags[t]);
		if(!tag || !tag.tags.contains("excludeLists")) {
			if(!label)
				label = createTiddlyElement(ul,"li",null,"listTitle",lingo.labelTags.format([tiddler.title]));
			createTagButton(createTiddlyElement(ul,"li"),tiddler.tags[t],tiddler.title);
			if(t<tiddler.tags.length-1)
				createTiddlyText(ul,sep);
		}
	}
	if(!label)
		createTiddlyElement(ul,"li",null,"listTitle",lingo.labelNoTags.format([tiddler.title]));
};

config.macros.tagging.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	params = paramString.parseParams("anon",null,true,false,false);
	var ul = createTiddlyElement(place,"ul");
	var title = getParam(params,"anon","");
	if(title == "" && tiddler instanceof Tiddler)
		title = tiddler.title;
	var sep = getParam(params,"sep"," ");
	ul.setAttribute("title",this.tooltip.format([title]));
	var sortby = getParam(params,"sortBy",false);
	var tagged = store.getTaggedTiddlers(title,sortby);
	var prompt = tagged.length == 0 ? this.labelNotTag : this.label;
	createTiddlyElement(ul,"li",null,"listTitle",prompt.format([title,tagged.length]));
	var t;
	for(t=0; t<tagged.length; t++) {
		createTiddlyLink(createTiddlyElement(ul,"li"),tagged[t].title,true);
		if(t<tagged.length-1)
			createTiddlyText(ul,sep);
	}
};

config.macros.closeAll.handler = function(place)
{
	createTiddlyButton(place,this.label,this.prompt,this.onClick);
};

config.macros.closeAll.onClick = function(e)
{
	story.closeAllTiddlers();
	return false;
};

config.macros.permaview.handler = function(place)
{
	createTiddlyButton(place,this.label,this.prompt,this.onClick);
};

config.macros.permaview.onClick = function(e)
{
	story.permaView();
	return false;
};

config.macros.saveChanges.handler = function(place,macroName,params)
{
	if(!readOnly)
		createTiddlyButton(place,params[0] || this.label,params[1] || this.prompt,this.onClick,null,null,this.accessKey);
};

config.macros.saveChanges.onClick = function(e)
{
	saveChanges();
	return false;
};

config.macros.slider.onClickSlider = function(ev)
{
	var n = this.nextSibling;
	var cookie = n.getAttribute("cookie");
	var isOpen = n.style.display != "none";
	if(config.options.chkAnimate && anim && typeof Slider == "function")
		anim.startAnimating(new Slider(n,!isOpen,null,"none"));
	else
		n.style.display = isOpen ? "none" : "block";
	config.options[cookie] = !isOpen;
	saveOption(cookie);
	return false;
};

config.macros.slider.createSlider = function(place,cookie,title,tooltip)
{
	var c = cookie || "";
	createTiddlyButton(place,title,tooltip,this.onClickSlider);
	var panel = createTiddlyElement(null,"div",null,"sliderPanel");
	panel.setAttribute("cookie",c);
	panel.style.display = config.options[c] ? "block" : "none";
	place.appendChild(panel);
	return panel;
};

config.macros.slider.handler = function(place,macroName,params)
{
	var panel = this.createSlider(place,params[0],params[2],params[3]);
	var text = store.getTiddlerText(params[1]);
	panel.setAttribute("refresh","content");
	panel.setAttribute("tiddler",params[1]);
	if(text)
		wikify(text,panel,null,store.getTiddler(params[1]));
};

// <<gradient [[tiddler name]] vert|horiz rgb rgb rgb rgb... >>
config.macros.gradient.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var panel = wikifier ? createTiddlyElement(place,"div",null,"gradient") : place;
	panel.style.position = "relative";
	panel.style.overflow = "hidden";
	panel.style.zIndex = "0";
	if(wikifier) {
		var styles = config.formatterHelpers.inlineCssHelper(wikifier);
		config.formatterHelpers.applyCssHelper(panel,styles);
	}
	params = paramString.parseParams("color");
	var locolors = [], hicolors = [];
	var t;
	for(t=2; t<params.length; t++) {
		var c = params[t].value;
		if(params[t].name == "snap") {
			hicolors[hicolors.length-1] = c;
		} else {
			locolors.push(c);
			hicolors.push(c);
		}
	}
	drawGradient(panel,params[1].value != "vert",locolors,hicolors);
	if(wikifier)
		wikifier.subWikify(panel,">>");
	if(document.all) {
		panel.style.height = "100%";
		panel.style.width = "100%";
	}
};

config.macros.message.handler = function(place,macroName,params)
{
	if(params[0]) {
		var names = params[0].split(".");
		var lookupMessage = function(root,nameIndex) {
				if(root[names[nameIndex]]) {
					if(nameIndex < names.length-1)
						return (lookupMessage(root[names[nameIndex]],nameIndex+1));
					else
						return root[names[nameIndex]];
				} else
					return null;
			};
		var m = lookupMessage(config,0);
		if(m == null)
			m = lookupMessage(window,0);
		createTiddlyText(place,m.toString().format(params.splice(1)));
	}
};


config.macros.view.depth = 0;
config.macros.view.values = [];
config.macros.view.views = {
	text: function(value,place,params,wikifier,paramString,tiddler) {
		highlightify(value,place,highlightHack,tiddler);
	},
	link: function(value,place,params,wikifier,paramString,tiddler) {
		createTiddlyLink(place,value,true);
	},
	wikified: function(value,place,params,wikifier,paramString,tiddler) {
		if(config.macros.view.depth>50)
			return;
		if(config.macros.view.depth>0) {
			if (value==config.macros.view.values[config.macros.view.depth-1]) {
				return;
			}
		}
		config.macros.view.values[config.macros.view.depth] = value;
		config.macros.view.depth++;
		if(params[2])
			value=params[2].unescapeLineBreaks().format([value]);
		wikify(value,place,highlightHack,tiddler);
		config.macros.view.depth--;
		config.macros.view.values[config.macros.view.depth] = null;
	},
	date: function(value,place,params,wikifier,paramString,tiddler) {
		value = Date.convertFromYYYYMMDDHHMM(value);
		createTiddlyText(place,value.formatString(params[2] || config.views.wikified.dateFormat));
	}
};

config.macros.view.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if((tiddler instanceof Tiddler) && params[0]) {
		var value = store.getValue(tiddler,params[0]);
		if(value) {
			var type = params[1] || config.macros.view.defaultView;
			var handler = config.macros.view.views[type];
			if(handler)
				handler(value,place,params,wikifier,paramString,tiddler);
		}
	}
};

config.macros.edit.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var field = params[0];
	var rows = params[1] || 0;
	var defVal = params[2] || '';
	if((tiddler instanceof Tiddler) && field) {
		story.setDirty(tiddler.title,true);
		var e,v;
		if(field != "text" && !rows) {
			e = createTiddlyElement(null,"input",null,null,null,{
				type: "text", edit: field, size: "40", autocomplete: "off"
			});
			e.value = store.getValue(tiddler,field) || defVal;
			place.appendChild(e);
		} else {
			var wrapper1 = createTiddlyElement(null,"fieldset",null,"fieldsetFix");
			var wrapper2 = createTiddlyElement(wrapper1,"div");
			e = createTiddlyElement(wrapper2,"textarea");
			e.value = v = store.getValue(tiddler,field) || defVal;
			rows = rows || 10;
			var lines = v.match(/\n/mg);
			var maxLines = Math.max(parseInt(config.options.txtMaxEditRows,10),5);
			if(lines != null && lines.length > rows)
				rows = lines.length + 5;
			rows = Math.min(rows,maxLines);
			e.setAttribute("rows",rows);
			e.setAttribute("edit",field);
			place.appendChild(wrapper1);
		}
		if(tiddler.isReadOnly()) {
			e.setAttribute("readOnly","readOnly");
			jQuery(e).addClass("readOnly");
		}
		return e;
	}
};

config.macros.tagChooser.onClick = function(ev)
{
	var e = ev || window.event;
	var lingo = config.views.editor.tagChooser;
	var popup = Popup.create(this);
	var tags = store.getTags(this.getAttribute("tags"));
	if(tags.length == 0)
		jQuery("<li/>").text(lingo.popupNone).appendTo(popup);
	var t;
	for(t=0; t<tags.length; t++) {
		var tag = createTiddlyButton(createTiddlyElement(popup,"li"),tags[t][0],lingo.tagTooltip.format([tags[t][0]]),config.macros.tagChooser.onTagClick);
		tag.setAttribute("tag",tags[t][0]);
		tag.setAttribute("tiddler",this.getAttribute("tiddler"));
	}
	Popup.show();
	e.cancelBubble = true;
	if(e.stopPropagation) e.stopPropagation();
	return false;
};

config.macros.tagChooser.onTagClick = function(ev)
{
	var e = ev || window.event;
	if(e.metaKey || e.ctrlKey) stopEvent(e); //# keep popup open on CTRL-click
	var tag = this.getAttribute("tag");
	var title = this.getAttribute("tiddler");
	if(!readOnly)
		story.setTiddlerTag(title,tag,0);
	return false;
};

config.macros.tagChooser.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if(tiddler instanceof Tiddler) {
		var lingo = config.views.editor.tagChooser;
		var btn = createTiddlyButton(place,lingo.text,lingo.tooltip,this.onClick);
		btn.setAttribute("tiddler",tiddler.title);
		btn.setAttribute("tags",params[0]);
	}
};

config.macros.refreshDisplay.handler = function(place)
{
	createTiddlyButton(place,this.label,this.prompt,this.onClick);
};

config.macros.refreshDisplay.onClick = function(e)
{
	refreshAll();
	return false;
};

config.macros.annotations.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var title = tiddler ? tiddler.title : null;
	var a = title ? config.annotations[title] : null;
	if(!tiddler || !title || !a)
		return;
	var text = a.format([title]);
	wikify(text,createTiddlyElement(place,"div",null,"annotation"),null,tiddler);
};
//--
//-- NewTiddler and NewJournal macros
//--

config.macros.newTiddler.createNewTiddlerButton = function(place,title,params,label,prompt,accessKey,newFocus,isJournal)
{
	var tags = [];
	var t;
	for(t=1; t<params.length; t++) {
		if((params[t].name == "anon" && t != 1) || (params[t].name == "tag"))
			tags.push(params[t].value);
	}
	label = getParam(params,"label",label);
	prompt = getParam(params,"prompt",prompt);
	accessKey = getParam(params,"accessKey",accessKey);
	newFocus = getParam(params,"focus",newFocus);
	var customFields = getParam(params,"fields","");
	if(!customFields && !store.isShadowTiddler(title))
		customFields = String.encodeHashMap(config.defaultCustomFields);
	var btn = createTiddlyButton(place,label,prompt,this.onClickNewTiddler,null,null,accessKey);
	btn.setAttribute("newTitle",title);
	btn.setAttribute("isJournal",isJournal ? "true" : "false");
	if(tags.length > 0)
		btn.setAttribute("params",tags.join("|"));
	btn.setAttribute("newFocus",newFocus);
	btn.setAttribute("newTemplate",getParam(params,"template",DEFAULT_EDIT_TEMPLATE));
	if(customFields !== "")
		btn.setAttribute("customFields",customFields);
	var text = getParam(params,"text");
	if(text !== undefined)
		btn.setAttribute("newText",text);
	return btn;
};

config.macros.newTiddler.onClickNewTiddler = function()
{
	var title = this.getAttribute("newTitle");
	if(this.getAttribute("isJournal") == "true") {
		title = new Date().formatString(title.trim());
	}
	var params = this.getAttribute("params");
	var tags = params ? params.split("|") : [];
	var focus = this.getAttribute("newFocus");
	var template = this.getAttribute("newTemplate");
	var customFields = this.getAttribute("customFields");
	if(!customFields && !store.isShadowTiddler(title))
		customFields = String.encodeHashMap(config.defaultCustomFields);
	story.displayTiddler(null,title,template,false,null,null);
	var tiddlerElem = story.getTiddler(title);
	if(customFields)
		story.addCustomFields(tiddlerElem,customFields);
	var text = this.getAttribute("newText");
	if(typeof text == "string" && story.getTiddlerField(title,"text"))
		story.getTiddlerField(title,"text").value = text.format([title]);
	var t;
	for(t=0;t<tags.length;t++)
		story.setTiddlerTag(title,tags[t],+1);
	story.focusTiddler(title,focus);
	return false;
};

config.macros.newTiddler.handler = function(place,macroName,params,wikifier,paramString)
{
	if(!readOnly) {
		params = paramString.parseParams("anon",null,true,false,false);
		var title = params[1] && params[1].name == "anon" ? params[1].value : this.title;
		title = getParam(params,"title",title);
		this.createNewTiddlerButton(place,title,params,this.label,this.prompt,this.accessKey,"title",false);
	}
};

config.macros.newJournal.handler = function(place,macroName,params,wikifier,paramString)
{
	if(!readOnly) {
		params = paramString.parseParams("anon",null,true,false,false);
		var title = params[1] && params[1].name == "anon" ? params[1].value : config.macros.timeline.dateFormat;
		title = getParam(params,"title",title);
		config.macros.newTiddler.createNewTiddlerButton(place,title,params,this.label,this.prompt,this.accessKey,"text",true);
	}
};

//--
//-- Search macro
//--

config.macros.search.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	params = paramString.parseParams("anon",null,false,false,false);
	createTiddlyButton(place,this.label,this.prompt,this.onClick,"searchButton");
	var txt = createTiddlyElement(null,"input",null,"txtOptionInput searchField");
	txt.value = getParam(params,"anon","");
	if(config.browser.isSafari) {
		txt.setAttribute("type","search");
		txt.setAttribute("results","5");
	} else {
		txt.setAttribute("type","text");
	}
	place.appendChild(txt);
	txt.onkeyup = this.onKeyPress;
	txt.onfocus = this.onFocus;
	txt.setAttribute("size",this.sizeTextbox);
	txt.setAttribute("accessKey",getParam(params,"accesskey",this.accessKey));
	txt.setAttribute("autocomplete","off");
	txt.setAttribute("lastSearchText","");
	txt.setAttribute("placeholder",getParam(params,"placeholder",this.placeholder));
};

// Global because there's only ever one outstanding incremental search timer
config.macros.search.timeout = null;

config.macros.search.doSearch = function(txt)
{
	if(txt.value.length > 0) {
		story.search(txt.value,config.options.chkCaseSensitiveSearch,config.options.chkRegExpSearch);
		txt.setAttribute("lastSearchText",txt.value);
	}
};

config.macros.search.onClick = function(e)
{
	config.macros.search.doSearch(this.nextSibling);
	return false;
};

config.macros.search.onKeyPress = function(ev)
{
	var me = config.macros.search;
	var e = ev || window.event;
	switch(e.keyCode) {
		case 9: // Tab
			return;
		case 13: // Ctrl-Enter
		case 10: // Ctrl-Enter on IE PC
			me.doSearch(this);
			break;
		case 27: // Escape
			this.value = "";
			clearMessage();
			break;
	}
	if(config.options.chkIncrementalSearch) {
		if(this.value.length > 2) {
			if(this.value != this.getAttribute("lastSearchText")) {
				if(me.timeout) {
					clearTimeout(me.timeout);
				}
				var txt = this;
				me.timeout = setTimeout(function() {me.doSearch(txt);},500);
			}
		} else {
			if(me.timeout) {
				clearTimeout(me.timeout);
			}
		}
	}
};

config.macros.search.onFocus = function(e)
{
	this.select();
};

//--
//-- Tabs macro
//--

config.macros.tabs.handler = function(place,macroName,params)
{
	var cookie = params[0];
	var numTabs = (params.length-1)/3;
	var wrapper = createTiddlyElement(null,"div",null,"tabsetWrapper " + cookie);
	var tabset = createTiddlyElement(wrapper,"div",null,"tabset");
	tabset.setAttribute("cookie",cookie);
	var validTab = false;
	var t;
	for(t=0; t<numTabs; t++) {
		var label = params[t*3+1];
		var prompt = params[t*3+2];
		var content = params[t*3+3];
		var tab = createTiddlyButton(tabset,label,prompt,this.onClickTab,"tab tabUnselected");
		createTiddlyElement(tab,"span",null,null," ",{style:"font-size:0pt;line-height:0px"});
		tab.setAttribute("tab",label);
		tab.setAttribute("content",content);
		tab.title = prompt;
		if(config.options[cookie] == label)
			validTab = true;
	}
	if(!validTab)
		config.options[cookie] = params[1];
	place.appendChild(wrapper);
	this.switchTab(tabset,config.options[cookie]);
};

config.macros.tabs.onClickTab = function(e)
{
	config.macros.tabs.switchTab(this.parentNode,this.getAttribute("tab"));
	return false;
};

config.macros.tabs.switchTab = function(tabset,tab)
{
	var cookie = tabset.getAttribute("cookie");
	var theTab = null;
	var nodes = tabset.childNodes;
	var t;
	for(t=0; t<nodes.length; t++) {
		if(nodes[t].getAttribute && nodes[t].getAttribute("tab") == tab) {
			theTab = nodes[t];
			theTab.className = "tab tabSelected";
		} else {
			nodes[t].className = "tab tabUnselected";
		}
	}
	if(theTab) {
		if(tabset.nextSibling && tabset.nextSibling.className == "tabContents")
			jQuery(tabset.nextSibling).remove();
		var tabContent = createTiddlyElement(null,"div",null,"tabContents");
		tabset.parentNode.insertBefore(tabContent,tabset.nextSibling);
		var contentTitle = theTab.getAttribute("content");
		wikify(store.getTiddlerText(contentTitle),tabContent,null,store.getTiddler(contentTitle));
		if(cookie) {
			config.options[cookie] = tab;
			saveOption(cookie);
		}
	}
};

//--
//-- Tiddler toolbar
//--

// Create a toolbar command button
config.macros.toolbar.createCommand = function(place,commandName,tiddler,className)
{
	if(typeof commandName != "string") {
		var c = null;
		var t;
		for(t in config.commands) {
			if(config.commands[t] == commandName)
				c = t;
		}
		commandName = c;
	}
	if((tiddler instanceof Tiddler) && (typeof commandName == "string")) {
		var command = config.commands[commandName];
		if(command.isEnabled ? command.isEnabled(tiddler) : this.isCommandEnabled(command,tiddler)) {
			var text = command.getText ? command.getText(tiddler) : this.getCommandText(command,tiddler);
			var tooltip = command.getTooltip ? command.getTooltip(tiddler) : this.getCommandTooltip(command,tiddler);
			var cmd = command.type == "popup" ? this.onClickPopup : this.onClickCommand;
			var btn = createTiddlyButton(null,text,tooltip,cmd);
			btn.setAttribute("commandName",commandName);
			btn.setAttribute("tiddler",tiddler.title);
			jQuery(btn).addClass("command_" + commandName);
			if(className)
				jQuery(btn).addClass(className);
			place.appendChild(btn);
		}
	}
};

config.macros.toolbar.isCommandEnabled = function(command,tiddler)
{
	var title = tiddler.title;
	var ro = tiddler.isReadOnly();
	var shadow = store.isShadowTiddler(title) && !store.tiddlerExists(title);
	return (!ro || (ro && !command.hideReadOnly)) && !(shadow && command.hideShadow);
};

config.macros.toolbar.getCommandText = function(command,tiddler)
{
	return (tiddler.isReadOnly() && command.readOnlyText) || command.text;
};

config.macros.toolbar.getCommandTooltip = function(command,tiddler)
{
	return (tiddler.isReadOnly() && command.readOnlyTooltip) || command.tooltip;
};

config.macros.toolbar.onClickCommand = function(ev)
{
	var e = ev || window.event;
	e.cancelBubble = true;
	if(e.stopPropagation) e.stopPropagation();
	var command = config.commands[this.getAttribute("commandName")];
	return command.handler(e,this,this.getAttribute("tiddler"));
};

config.macros.toolbar.onClickPopup = function(ev)
{
	var e = ev || window.event;
	e.cancelBubble = true;
	if(e.stopPropagation) e.stopPropagation();
	var popup = Popup.create(this);
	var command = config.commands[this.getAttribute("commandName")];
	var title = this.getAttribute("tiddler");
	popup.setAttribute("tiddler",title);
	command.handlePopup(popup,title);
	Popup.show();
	return false;
};

// Invoke the first command encountered from a given place that is tagged with a specified class
config.macros.toolbar.invokeCommand = function(place,className,event)
{
	var children = place.getElementsByTagName("a");
	var t;
	for(t=0; t<children.length; t++) {
		var c = children[t];
		if(jQuery(c).hasClass(className) && c.getAttribute && c.getAttribute("commandName")) {
			if(c.onclick instanceof Function)
				c.onclick.call(c,event);
			break;
		}
	}
};

config.macros.toolbar.onClickMore = function(ev)
{
	var e = this.nextSibling;
	e.style.display = "inline";
	this.style.display = "none";
	return false;
};

config.macros.toolbar.onClickLess = function(ev)
{
	var e = this.parentNode;
	var m = e.previousSibling;
	e.style.display = "none";
	m.style.display = "inline";
	return false;
};

config.macros.toolbar.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	var t;
	for(t=0; t<params.length; t++) {
		var btn;
		var c = params[t];
		switch(c) {
		case "!":
			createTiddlyText(place,this.separator);
			break;
		case "*":
			createTiddlyElement(place,"br");
			break;
		case "<":
			btn = createTiddlyButton(place,this.lessLabel,this.lessPrompt,config.macros.toolbar.onClickLess);
			jQuery(btn).addClass("lessCommand");
			break;
		case ">":
			btn = createTiddlyButton(place,this.moreLabel,this.morePrompt,config.macros.toolbar.onClickMore);
			jQuery(btn).addClass("moreCommand");
			var e = createTiddlyElement(place,"span",null,"moreCommand");
			e.style.display = "none";
			place = e;
			break;
		default:
			var className = "";
			switch(c.substr(0,1)) {
			case "+":
				className = "defaultCommand";
				c = c.substr(1);
				break;
			case "-":
				className = "cancelCommand";
				c = c.substr(1);
				break;
			}
			if(config.commands[c]) {
				this.createCommand(place,c,tiddler,className);
			} else {
				this.customCommand(place,c,wikifier,tiddler);
			}
			break;
		}
	}
};

// Overrideable function to extend toolbar handler
config.macros.toolbar.customCommand = function(place,command,wikifier,tiddler)
{
};

//--
//-- Menu and toolbar commands
//--

config.commands.closeTiddler.handler = function(event,src,title)
{
	if(story.isDirty(title) && !readOnly) {
		if(!confirm(config.commands.cancelTiddler.warning.format([title])))
			return false;
	}
	story.setDirty(title,false);
	story.closeTiddler(title,true);
	return false;
};

config.commands.closeOthers.handler = function(event,src,title)
{
	story.closeAllTiddlers(title);
	return false;
};

config.commands.editTiddler.handler = function(event,src,title)
{
	clearMessage();
	var tiddlerElem = story.getTiddler(title);
	var fields = tiddlerElem.getAttribute("tiddlyFields");
	story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE,false,null,fields);
	var e = story.getTiddlerField(title,config.options.txtEditorFocus||"text");
	if(e) {
		setCaretPosition(e,0);
	}
	return false;
};

config.commands.saveTiddler.handler = function(event,src,title)
{
	var newTitle = story.saveTiddler(title,event.shiftKey);
	if(newTitle)
		story.displayTiddler(null,newTitle);
	return false;
};

config.commands.cancelTiddler.handler = function(event,src,title)
{
	if(story.hasChanges(title) && !readOnly) {
		if(!confirm(this.warning.format([title])))
			return false;
	}
	story.setDirty(title,false);
	story.displayTiddler(null,title);
	return false;
};

config.commands.deleteTiddler.handler = function(event,src,title)
{
	var deleteIt = true;
	if(config.options.chkConfirmDelete)
		deleteIt = confirm(this.warning.format([title]));
	if(deleteIt) {
		store.removeTiddler(title);
		story.closeTiddler(title,true);
		autoSaveChanges();
	}
	return false;
};

config.commands.permalink.handler = function(event,src,title)
{
	var t = encodeURIComponent(String.encodeTiddlyLink(title));
	if(window.location.hash != t)
		window.location.hash = t;
	return false;
};

config.commands.references.handlePopup = function(popup,title)
{
	var references = store.getReferringTiddlers(title);
	var c = false;
	var r;
	for(r=0; r<references.length; r++) {
		if(references[r].title != title && !references[r].isTagged("excludeLists")) {
			createTiddlyLink(createTiddlyElement(popup,"li"),references[r].title,true);
			c = true;
		}
	}
	if(!c)
		createTiddlyElement(popup,"li",null,"disabled",this.popupNone);
};

config.commands.jump.handlePopup = function(popup,title)
{
	story.forEachTiddler(function(title,element) {
		createTiddlyLink(createTiddlyElement(popup,"li"),title,true,null,false,null,true);
		});
};

config.commands.syncing.handlePopup = function(popup,title)
{
	var me = config.commands.syncing;
	var tiddler = store.fetchTiddler(title);
	if(!tiddler)
		return;
	var serverType = tiddler.getServerType();
	var serverHost = tiddler.fields["server.host"];
	var serverWorkspace = tiddler.fields["server.workspace"];
	if(!serverWorkspace)
		serverWorkspace = "";
	if(serverType) {
		var e = createTiddlyElement(popup,"li",null,"popupMessage");
		e.innerHTML = me.currentlySyncing.format([serverType,serverHost,serverWorkspace]);
	} else {
		createTiddlyElement(popup,"li",null,"popupMessage",me.notCurrentlySyncing);
	}
	if(serverType) {
		createTiddlyElement(createTiddlyElement(popup,"li",null,"listBreak"),"div");
		var btn = createTiddlyButton(createTiddlyElement(popup,"li"),this.captionUnSync,null,me.onChooseServer);
		btn.setAttribute("tiddler",title);
		btn.setAttribute("server.type","");
	}
	createTiddlyElement(createTiddlyElement(popup,"li",null,"listBreak"),"div");
	createTiddlyElement(popup,"li",null,"popupMessage",me.chooseServer);
	var feeds = store.getTaggedTiddlers("systemServer","title");
	var t;
	for(t=0; t<feeds.length; t++) {
		var f = feeds[t];
		var feedServerType = store.getTiddlerSlice(f.title,"Type");
		if(!feedServerType)
			feedServerType = "file";
		var feedServerHost = store.getTiddlerSlice(f.title,"URL");
		if(!feedServerHost)
			feedServerHost = "";
		var feedServerWorkspace = store.getTiddlerSlice(f.title,"Workspace");
		if(!feedServerWorkspace)
			feedServerWorkspace = "";
		var caption = f.title;
		if(serverType == feedServerType && serverHost == feedServerHost && serverWorkspace == feedServerWorkspace) {
			caption = me.currServerMarker + caption;
		} else {
			caption = me.notCurrServerMarker + caption;
		}
		btn = createTiddlyButton(createTiddlyElement(popup,"li"),caption,null,me.onChooseServer);
		btn.setAttribute("tiddler",title);
		btn.setAttribute("server.type",feedServerType);
		btn.setAttribute("server.host",feedServerHost);
		btn.setAttribute("server.workspace",feedServerWorkspace);
	}
};

config.commands.syncing.onChooseServer = function(e)
{
	var tiddler = this.getAttribute("tiddler");
	var serverType = this.getAttribute("server.type");
	if(serverType) {
		store.addTiddlerFields(tiddler,{
			"server.type": serverType,
			"server.host": this.getAttribute("server.host"),
			"server.workspace": this.getAttribute("server.workspace")
			});
	} else {
		store.setValue(tiddler,"server",null);
	}
	return false;
};

config.commands.fields.handlePopup = function(popup,title)
{
	var tiddler = store.fetchTiddler(title);
	if(!tiddler)
		return;
	var items = [];
	store.forEachField(tiddler,function(tiddler,fieldName,value){items.push({field:fieldName,value:value});},true);
	items.sort(function(a,b) {return a.field < b.field ? -1 : (a.field == b.field ? 0 : +1);});
	if(items.length > 0)
		ListView.create(popup,items,this.listViewTemplate);
	else
		createTiddlyElement(popup,"div",null,null,this.emptyText);
};

//--
//-- Tiddler() object
//--

function Tiddler(title)
{
	this.title = title;
	this.text = "";
	this.creator = null;
	this.modifier = null;
	this.created = new Date();
	this.modified = this.created;
	this.links = [];
	this.linksUpdated = false;
	this.tags = [];
	this.fields = {};
	return this;
}

Tiddler.prototype.getLinks = function()
{
	if(this.linksUpdated==false)
		this.changed();
	return this.links;
};

// Returns the fields that are inherited in string field:"value" field2:"value2" format
Tiddler.prototype.getInheritedFields = function()
{
	var f = {};
	var i;
	for(i in this.fields) {
		if(i=="server.host" || i=="server.workspace" || i=="wikiformat"|| i=="server.type") {
			f[i] = this.fields[i];
		}
	}
	return String.encodeHashMap(f);
};

// Increment the changeCount of a tiddler
Tiddler.prototype.incChangeCount = function()
{
	var c = this.fields['changecount'];
	c = c ? parseInt(c,10) : 0;
	this.fields['changecount'] = String(c+1);
};

// Clear the changeCount of a tiddler
Tiddler.prototype.clearChangeCount = function()
{
	if(this.fields['changecount']) {
		delete this.fields['changecount'];
	}
};

Tiddler.prototype.doNotSave = function()
{
	return this.fields['doNotSave'];
};

// Returns true if the tiddler has been updated since the tiddler was created or downloaded
Tiddler.prototype.isTouched = function()
{
	var changecount = this.fields.changecount || 0;
	return changecount > 0;
};

// Change the text and other attributes of a tiddler
Tiddler.prototype.set = function(title,text,modifier,modified,tags,created,fields,creator)
{
	this.assign(title,text,modifier,modified,tags,created,fields,creator);
	this.changed();
	return this;
};

// Change the text and other attributes of a tiddler without triggered a tiddler.changed() call
Tiddler.prototype.assign = function(title,text,modifier,modified,tags,created,fields,creator)
{
	if(title != undefined)
		this.title = title;
	if(text != undefined)
		this.text = text;
	if(modifier != undefined)
		this.modifier = modifier;
	if(modified != undefined)
		this.modified = modified;
	if(creator != undefined)
		this.creator = creator;
	if(created != undefined)
		this.created = created;
	if(fields != undefined)
		this.fields = fields;
	if(tags != undefined)
		this.tags = (typeof tags == "string") ? tags.readBracketedList() : tags;
	else if(this.tags == undefined)
		this.tags = [];
	return this;
};

// Get the tags for a tiddler as a string (space delimited, using [[brackets]] for tags containing spaces)
Tiddler.prototype.getTags = function()
{
	return String.encodeTiddlyLinkList(this.tags);
};

// Test if a tiddler carries a tag
Tiddler.prototype.isTagged = function(tag)
{
	return this.tags.indexOf(tag) != -1;
};

// Static method to convert "\n" to newlines, "\s" to "\"
Tiddler.unescapeLineBreaks = function(text)
{
	return text ? text.unescapeLineBreaks() : "";
};

// Convert newlines to "\n", "\" to "\s"
Tiddler.prototype.escapeLineBreaks = function()
{
	return this.text.escapeLineBreaks();
};

// Updates the secondary information (like links[] array) after a change to a tiddler
Tiddler.prototype.changed = function()
{
	this.links = [];
	var text = this.text;
	// remove 'quoted' text before scanning tiddler source
	text = text.replace(/\/%((?:.|\n)*?)%\//g,"").
		replace(/\{{3}((?:.|\n)*?)\}{3}/g,"").
		replace(/"""((?:.|\n)*?)"""/g,"").
		replace(/<nowiki\>((?:.|\n)*?)<\/nowiki\>/g,"").
		replace(/<html\>((?:.|\n)*?)<\/html\>/g,"").
		replace(/<script((?:.|\n)*?)<\/script\>/g,"");
	var t = this.autoLinkWikiWords() ? 0 : 1;
	var tiddlerLinkRegExp = t==0 ? config.textPrimitives.tiddlerAnyLinkRegExp : config.textPrimitives.tiddlerForcedLinkRegExp;
	tiddlerLinkRegExp.lastIndex = 0;
	var formatMatch = tiddlerLinkRegExp.exec(text);
	while(formatMatch) {
		var lastIndex = tiddlerLinkRegExp.lastIndex;
		if(t==0 && formatMatch[1] && formatMatch[1] != this.title) {
			// wikiWordLink
			if(formatMatch.index > 0) {
				var preRegExp = new RegExp(config.textPrimitives.unWikiLink+"|"+config.textPrimitives.anyLetter,"mg");
				preRegExp.lastIndex = formatMatch.index-1;
				var preMatch = preRegExp.exec(text);
				if(preMatch.index != formatMatch.index-1)
					this.links.pushUnique(formatMatch[1]);
			} else {
				this.links.pushUnique(formatMatch[1]);
			}
		}
		else if(formatMatch[2-t] && !config.formatterHelpers.isExternalLink(formatMatch[3-t])) // titledBrackettedLink
			this.links.pushUnique(formatMatch[3-t]);
		else if(formatMatch[4-t] && formatMatch[4-t] != this.title) // brackettedLink
			this.links.pushUnique(formatMatch[4-t]);
		tiddlerLinkRegExp.lastIndex = lastIndex;
		formatMatch = tiddlerLinkRegExp.exec(text);
	}
	this.linksUpdated = true;
};

Tiddler.prototype.getSubtitle = function()
{
	var modifier = this.modifier;
	if(!modifier)
		modifier = config.messages.subtitleUnknown || "";
	var modified = this.modified;
	if(modified)
		modified = modified.toLocaleString();
	else
		modified = config.messages.subtitleUnknown || "";
	var f = config.messages.tiddlerLinkTooltip || "%0 - %1, %2";
	return f.format([this.title,modifier,modified]);
};

Tiddler.prototype.isReadOnly = function()
{
	return readOnly;
};

Tiddler.prototype.autoLinkWikiWords = function()
{
	return !(this.isTagged("systemConfig") || this.isTagged("excludeMissing"));
};

Tiddler.prototype.getServerType = function()
{
	var serverType = null;
	if(this.fields['server.type'])
		serverType = this.fields['server.type'];
	if(!serverType)
		serverType = this.fields['wikiformat'];
	if(serverType && !config.adaptors[serverType])
		serverType = null;
	return serverType;
};

Tiddler.prototype.getAdaptor = function()
{
	var serverType = this.getServerType();
	return serverType ? new config.adaptors[serverType]() : null;
};

//--
//-- TiddlyWiki instance contains TiddlerS
//--

function TiddlyWiki(params)
{
	var tiddlers = {}; // Hashmap by name of tiddlers
	if(params && params.config) {
		this.config = config;
	}
	this.tiddlersUpdated = false;
	this.namedNotifications = []; // Array of {name:,notify:} of notification functions
	this.notificationLevel = 0;
	this.slices = {}; // map tiddlerName->(map sliceName->sliceValue). Lazy.
	this.clear = function() {
		tiddlers = {};
		this.setDirty(false);
	};
	this.fetchTiddler = function(title) {
		var t = tiddlers[title];
		return t instanceof Tiddler ? t : null;
	};
	this.deleteTiddler = function(title) {
		delete this.slices[title];
		delete tiddlers[title];
	};
	this.addTiddler = function(tiddler) {
		delete this.slices[tiddler.title];
		tiddlers[tiddler.title] = tiddler;
	};
	this.forEachTiddler = function(callback) {
		var t;
		for(t in tiddlers) {
			var tiddler = tiddlers[t];
			if(tiddler instanceof Tiddler)
				callback.call(this,t,tiddler);
		}
	};
}

TiddlyWiki.prototype.setDirty = function(dirty)
{
	this.dirty = dirty;
};

TiddlyWiki.prototype.isDirty = function()
{
	return this.dirty;
};

TiddlyWiki.prototype.tiddlerExists = function(title)
{
	var t = this.fetchTiddler(title);
	return t != undefined;
};

TiddlyWiki.prototype.isShadowTiddler = function(title)
{
	return config.shadowTiddlers[title] === undefined ? false : true;
};

TiddlyWiki.prototype.createTiddler = function(title)
{
	var tiddler = this.fetchTiddler(title);
	if(!tiddler) {
		tiddler = new Tiddler(title);
		this.addTiddler(tiddler);
		this.setDirty(true);
	}
	return tiddler;
};

TiddlyWiki.prototype.getTiddler = function(title)
{
	var t = this.fetchTiddler(title);
	if(t != undefined)
		return t;
	else
		return null;
};

TiddlyWiki.prototype.getShadowTiddlerText = function(title)
{
	if(typeof config.shadowTiddlers[title] == "string")
		return config.shadowTiddlers[title];
	else
		return "";
};

// Retrieve tiddler contents
TiddlyWiki.prototype.getTiddlerText = function(title,defaultText)
{
	if(!title)
		return defaultText;
	var pos = title.indexOf(config.textPrimitives.sectionSeparator);
	var section = null;
	if(pos != -1) {
		section = title.substr(pos + config.textPrimitives.sectionSeparator.length);
		title = title.substr(0,pos);
	}
	pos = title.indexOf(config.textPrimitives.sliceSeparator);
	if(pos != -1) {
		var slice = this.getTiddlerSlice(title.substr(0,pos),title.substr(pos + config.textPrimitives.sliceSeparator.length));
		if(slice)
			return slice;
	}
	var tiddler = this.fetchTiddler(title);
	var text = tiddler ? tiddler.text : null;
	if(!tiddler && this.isShadowTiddler(title)) {
		text = this.getShadowTiddlerText(title);
	}
	if(text) {
		if(!section)
			return text;
		var re = new RegExp("(^!{1,6}[ \t]*" + section.escapeRegExp() + "[ \t]*\n)","mg");
		re.lastIndex = 0;
		var match = re.exec(text);
		if(match) {
			var t = text.substr(match.index+match[1].length);
			var re2 = /^!/mg;
			re2.lastIndex = 0;
			match = re2.exec(t); //# search for the next heading
			if(match)
				t = t.substr(0,match.index-1);//# don't include final \n
			return t;
		}
		return defaultText;
	}
	if(defaultText != undefined)
		return defaultText;
	return null;
};

TiddlyWiki.prototype.getRecursiveTiddlerText = function(title,defaultText,depth)
{
	var bracketRegExp = new RegExp("(?:\\[\\[([^\\]]+)\\]\\])","mg");
	var text = this.getTiddlerText(title,null);
	if(text == null)
		return defaultText;
	var textOut = [];
	var match,lastPos = 0;
	do {
		match = bracketRegExp.exec(text);
		if(match) {
			textOut.push(text.substr(lastPos,match.index-lastPos));
			if(match[1]) {
				if(depth <= 0)
					textOut.push(match[1]);
				else
					textOut.push(this.getRecursiveTiddlerText(match[1],"",depth-1));
			}
			lastPos = match.index + match[0].length;
		} else {
			textOut.push(text.substr(lastPos));
		}
	} while(match);
	return textOut.join("");
};

//TiddlyWiki.prototype.slicesRE = /(?:^([\'\/]{0,2})~?([\.\w]+)\:\1[\t\x20]*([^\n]+)[\t\x20]*$)|(?:^\|([\'\/]{0,2})~?([\.\w]+)\:?\4\|[\t\x20]*([^\n]+)[\t\x20]*\|$)/gm;
TiddlyWiki.prototype.slicesRE = /(?:^([\'\/]{0,2})~?([\.\w]+)\:\1[\t\x20]*([^\n]*)[\t\x20]*$)|(?:^\|([\'\/]{0,2})~?([\.\w]+)\:?\4\|[\t\x20]*([^\|\n]*)[\t\x20]*\|$)/gm;
// @internal
TiddlyWiki.prototype.calcAllSlices = function(title)
{
	var slices = {};
	var text = this.getTiddlerText(title,"");
	this.slicesRE.lastIndex = 0;
	var m = this.slicesRE.exec(text);
	while(m) {
		if(m[2])
			slices[m[2]] = m[3];
		else
			slices[m[5]] = m[6];
		m = this.slicesRE.exec(text);
	}
	return slices;
};

// Returns the slice of text of the given name
TiddlyWiki.prototype.getTiddlerSlice = function(title,sliceName)
{
	var slices = this.slices[title];
	if(!slices) {
		slices = this.calcAllSlices(title);
		this.slices[title] = slices;
	}
	return slices[sliceName];
};

// Build an hashmap of the specified named slices of a tiddler
TiddlyWiki.prototype.getTiddlerSlices = function(title,sliceNames)
{
	var t,r = {};
	for(t=0; t<sliceNames.length; t++) {
		var slice = this.getTiddlerSlice(title,sliceNames[t]);
		if(slice)
			r[sliceNames[t]] = slice;
	}
	return r;
};

TiddlyWiki.prototype.suspendNotifications = function()
{
	this.notificationLevel--;
};

TiddlyWiki.prototype.resumeNotifications = function()
{
	this.notificationLevel++;
};

// Invoke the notification handlers for a particular tiddler
TiddlyWiki.prototype.notify = function(title,doBlanket)
{
	if(!this.notificationLevel) {
	    var t;
		for(t=0; t<this.namedNotifications.length; t++) {
			var n = this.namedNotifications[t];
			if((n.name == null && doBlanket) || (n.name == title))
				n.notify(title);
		}
	}
};

// Invoke the notification handlers for all tiddlers
TiddlyWiki.prototype.notifyAll = function()
{
	if(!this.notificationLevel) {
	    var t;
		for(t=0; t<this.namedNotifications.length; t++) {
			var n = this.namedNotifications[t];
			if(n.name)
				n.notify(n.name);
		}
	}
};

// Add a notification handler to a tiddler
TiddlyWiki.prototype.addNotification = function(title,fn)
{
	var i;
	for(i=0; i<this.namedNotifications.length; i++) {
		if((this.namedNotifications[i].name == title) && (this.namedNotifications[i].notify == fn))
			return this;
	}
	this.namedNotifications.push({name: title, notify: fn});
	return this;
};

TiddlyWiki.prototype.removeTiddler = function(title)
{
	var tiddler = this.fetchTiddler(title);
	if(tiddler) {
		this.deleteTiddler(title);
		this.notify(title,true);
		this.setDirty(true);
	}
};

// Reset the sync status of a freshly synced tiddler
TiddlyWiki.prototype.resetTiddler = function(title)
{
	var tiddler = this.fetchTiddler(title);
	if(tiddler) {
		tiddler.clearChangeCount();
		this.notify(title,true);
		this.setDirty(true);
	}
};

TiddlyWiki.prototype.setTiddlerTag = function(title,status,tag)
{
	var tiddler = this.fetchTiddler(title);
	if(tiddler) {
		var t = tiddler.tags.indexOf(tag);
		if(t != -1)
			tiddler.tags.splice(t,1);
		if(status)
			tiddler.tags.push(tag);
		tiddler.changed();
		tiddler.incChangeCount();
		this.notify(title,true);
		this.setDirty(true);
	}
};

TiddlyWiki.prototype.addTiddlerFields = function(title,fields)
{
	var tiddler = this.fetchTiddler(title);
	if(!tiddler)
		return;
	merge(tiddler.fields,fields);
	tiddler.changed();
	tiddler.incChangeCount();
	this.notify(title,true);
	this.setDirty(true);
};

// Store tiddler in TiddlyWiki instance
TiddlyWiki.prototype.saveTiddler = function(title,newTitle,newBody,modifier,modified,tags,fields,clearChangeCount,created,creator)
{
	var tiddler;
	if(title instanceof Tiddler) {
		tiddler = title;
		title = tiddler.title;
		newTitle = title;
	} else {
		tiddler = this.fetchTiddler(title);
		if(tiddler) {
			created = created || tiddler.created; // Preserve created date
			creator = creator || tiddler.creator;
			this.deleteTiddler(title);
		} else {
			created = created || modified;
			tiddler = new Tiddler();
		}
		fields = merge(merge({},fields),config.defaultCustomFields,true);
		tiddler.set(newTitle,newBody,modifier,modified,tags,created,fields,creator);
	}
	this.addTiddler(tiddler);
	if(clearChangeCount)
		tiddler.clearChangeCount();
	else
		tiddler.incChangeCount();
	if(title != newTitle)
		this.notify(title,true);
	this.notify(newTitle,true);
	if(window.location.protocol == "file:")
		this.setDirty(true);
	return tiddler;
};

TiddlyWiki.prototype.incChangeCount = function(title)
{
	var tiddler = this.fetchTiddler(title);
	if(tiddler)
		tiddler.incChangeCount();
};

TiddlyWiki.prototype.getLoader = function()
{
	if(!this.loader)
		this.loader = new TW21Loader();
	return this.loader;
};

TiddlyWiki.prototype.getSaver = function()
{
	if(!this.saver)
		this.saver = new TW21Saver();
	return this.saver;
};

// Return all tiddlers formatted as an HTML string
TiddlyWiki.prototype.allTiddlersAsHtml = function()
{
	return this.getSaver().externalize(store);
};

// Load contents of a TiddlyWiki from an HTML DIV
TiddlyWiki.prototype.loadFromDiv = function(src,idPrefix,noUpdate)
{
	this.idPrefix = idPrefix;
	var storeElem = (typeof src == "string") ? document.getElementById(src) : src;
	if(!storeElem)
		return;
	var tiddlers = this.getLoader().loadTiddlers(this,storeElem.childNodes);
	this.setDirty(false);
	if(!noUpdate) {
		var i;
		for(i = 0;i<tiddlers.length; i++)
			tiddlers[i].changed();
	}
	jQuery(document).trigger("loadTiddlers");
};

// Load contents of a TiddlyWiki from a string
// Returns null if there's an error
TiddlyWiki.prototype.importTiddlyWiki = function(text)
{
	var posDiv = locateStoreArea(text);
	if(!posDiv)
		return null;
	var content = "<" + "html><" + "body>" + text.substring(posDiv[0],posDiv[1] + endSaveArea.length) + "<" + "/body><" + "/html>";
	// Create the iframe
	var iframe = document.createElement("iframe");
	iframe.style.display = "none";
	document.body.appendChild(iframe);
	var doc = iframe.document;
	if(iframe.contentDocument)
		doc = iframe.contentDocument; // For NS6
	else if(iframe.contentWindow)
		doc = iframe.contentWindow.document; // For IE5.5 and IE6
	// Put the content in the iframe
	doc.open();
	doc.writeln(content);
	doc.close();
	// Load the content into a TiddlyWiki() object
	var storeArea = doc.getElementById("storeArea");
	this.loadFromDiv(storeArea,"store");
	// Get rid of the iframe
	iframe.parentNode.removeChild(iframe);
	return this;
};

TiddlyWiki.prototype.updateTiddlers = function()
{
	this.tiddlersUpdated = true;
	this.forEachTiddler(function(title,tiddler) {
		tiddler.changed();
	});
};

// Return an array of tiddlers matching a search regular expression
TiddlyWiki.prototype.search = function(searchRegExp,sortField,excludeTag,match)
{
	var candidates = this.reverseLookup("tags",excludeTag,!!match);
	var t,results = [];
	for(t=0; t<candidates.length; t++) {
		if((candidates[t].title.search(searchRegExp) != -1) || (candidates[t].text.search(searchRegExp) != -1))
			results.push(candidates[t]);
	}
	if(!sortField)
		sortField = "title";
	results.sort(function(a,b) {return a[sortField] < b[sortField] ? -1 : (a[sortField] == b[sortField] ? 0 : +1);});
	return results;
};

// Returns a list of all tags in use
//   excludeTag - if present, excludes tags that are themselves tagged with excludeTag
// Returns an array of arrays where [tag][0] is the name of the tag and [tag][1] is the number of occurances
TiddlyWiki.prototype.getTags = function(excludeTag)
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
	    var g,c;
		for(g=0; g<tiddler.tags.length; g++) {
			var tag = tiddler.tags[g];
			var n = true;
			for(c=0; c<results.length; c++) {
				if(results[c][0] == tag) {
					n = false;
					results[c][1]++;
				}
			}
			if(n && excludeTag) {
				var t = this.fetchTiddler(tag);
				if(t && t.isTagged(excludeTag))
					n = false;
			}
			if(n)
				results.push([tag,1]);
		}
	});
	results.sort(function(a,b) {return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : (a[0].toLowerCase() == b[0].toLowerCase() ? 0 : +1);});
	return results;
};

// Return an array of the tiddlers that are tagged with a given tag
TiddlyWiki.prototype.getTaggedTiddlers = function(tag,sortField)
{
	return this.reverseLookup("tags",tag,true,sortField);
};

TiddlyWiki.prototype.getValueTiddlers = function(field,value,sortField)
{
	return this.reverseLookup(field,value,true,sortField);
};

// Return an array of the tiddlers that link to a given tiddler
TiddlyWiki.prototype.getReferringTiddlers = function(title,unusedParameter,sortField)
{
	if(!this.tiddlersUpdated)
		this.updateTiddlers();
	return this.reverseLookup("links",title,true,sortField);
};

// Return an array of the tiddlers that do or do not have a specified entry in the specified storage array (ie, "links" or "tags")
// lookupMatch == true to match tiddlers, false to exclude tiddlers
TiddlyWiki.prototype.reverseLookup = function(lookupField,lookupValue,lookupMatch,sortField)
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		var f = !lookupMatch;
		var values;
		if(["links", "tags"].contains(lookupField)) {
			values = tiddler[lookupField];
		} else {
			var accessor = TiddlyWiki.standardFieldAccess[lookupField];
			if(accessor) {
				values = [ accessor.get(tiddler) ];
			} else {
				values = tiddler.fields[lookupField] ? [tiddler.fields[lookupField]] : [];
			}
		}
		var lookup;
		for(lookup=0; lookup<values.length; lookup++) {
			if(values[lookup] == lookupValue)
				f = lookupMatch;
		}
		if(f)
			results.push(tiddler);
	});
	if(!sortField)
		sortField = "title";
	return this.sortTiddlers(results,sortField);
};

// Return the tiddlers as a sorted array
TiddlyWiki.prototype.getTiddlers = function(field,excludeTag)
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		if(excludeTag == undefined || !tiddler.isTagged(excludeTag))
			results.push(tiddler);
	});
	if(field)
		results.sort(function(a,b) {return a[field] < b[field] ? -1 : (a[field] == b[field] ? 0 : +1);});
	return results;
};

// Return array of names of tiddlers that are referred to but not defined
TiddlyWiki.prototype.getMissingLinks = function()
{
	if(!this.tiddlersUpdated)
		this.updateTiddlers();
	var results = [];
	this.forEachTiddler(function (title,tiddler) {
		if(tiddler.isTagged("excludeMissing") || tiddler.isTagged("systemConfig"))
			return;
		var n;
		for(n=0; n<tiddler.links.length;n++) {
			var link = tiddler.links[n];
			if(this.getTiddlerText(link,null) == null && !this.isShadowTiddler(link) && !config.macros[link])
				results.pushUnique(link);
		}
	});
	results.sort();
	return results;
};

// Return an array of names of tiddlers that are defined but not referred to
TiddlyWiki.prototype.getOrphans = function()
{
	var results = [];
	this.forEachTiddler(function (title,tiddler) {
		if(this.getReferringTiddlers(title).length == 0 && !tiddler.isTagged("excludeLists"))
			results.push(title);
	});
	results.sort();
	return results;
};

// Return an array of names of all the shadow tiddlers
TiddlyWiki.prototype.getShadowed = function()
{
	var t,results = [];
	for(t in config.shadowTiddlers) {
		if(this.isShadowTiddler(t))
			results.push(t);
	}
	results.sort();
	return results;
};

// Return an array of tiddlers that have been touched since they were downloaded or created
TiddlyWiki.prototype.getTouched = function()
{
	var results = [];
	this.forEachTiddler(function(title,tiddler) {
		if(tiddler.isTouched())
			results.push(tiddler);
		});
	results.sort();
	return results;
};

// Resolves a Tiddler reference or tiddler title into a Tiddler object, or null if it doesn't exist
TiddlyWiki.prototype.resolveTiddler = function(tiddler)
{
	var t = (typeof tiddler == "string") ? this.getTiddler(tiddler) : tiddler;
	return t instanceof Tiddler ? t : null;
};

// Sort a list of tiddlers
TiddlyWiki.prototype.sortTiddlers = function(tiddlers,field)
{
	var asc = +1;
	switch(field.substr(0,1)) {
	case "-":
		asc = -1;
		field = field.substr(1);
		break;
	case "+":
		field = field.substr(1);
		break;
	}
	if(TiddlyWiki.standardFieldAccess[field]) {
		if(field=="title") {
			tiddlers.sort(function(a,b) {return a[field].toLowerCase() < b[field].toLowerCase() ? -asc : (a[field].toLowerCase() == b[field].toLowerCase() ? 0 : asc);});
		} else {
			tiddlers.sort(function(a,b) {return a[field] < b[field] ? -asc : (a[field] == b[field] ? 0 : asc);});
		}
	} else {
		tiddlers.sort(function(a,b) {return a.fields[field] < b.fields[field] ? -asc : (a.fields[field] == b.fields[field] ? 0 : +asc);});
	}
	return tiddlers;
};

//--
//-- Filter a list of tiddlers
//--

config.filters = {
	tiddler: function(results,match) {
		var title = match[1]||match[4];
		var tiddler = this.fetchTiddler(title);
		if(tiddler) {
			results.pushUnique(tiddler);
		} else if(this.isShadowTiddler(title)) {
			tiddler = new Tiddler();
			tiddler.set(title,this.getTiddlerText(title));
			results.pushUnique(tiddler);
		} else {
			results.pushUnique(new Tiddler(title));
		}
		return results;
	},
	tag: function(results,match) {
		var m,matched = this.getTaggedTiddlers(match[3]);
		for(m=0; m<matched.length; m++) {
			results.pushUnique(matched[m]);
		}
		return results;
	},
	sort: function(results,match) {
		return this.sortTiddlers(results,match[3]);
	},
	limit: function(results,match) {
		return results.slice(0,parseInt(match[3],10));
	},
	field: function(results,match) {
		var m,matched = this.getValueTiddlers(match[2],match[3]);
		for (m = 0; m < matched.length; m++) {
			results.pushUnique(matched[m]);
		}
		return results;
	}
};

// Filter a list of tiddlers
TiddlyWiki.prototype.filterTiddlers = function(filter)
{
	var re = /([^\s\[\]]+)|(?:\[([ \w\.\-]+)\[([^\]]+)\]\])|(?:\[\[([^\]]+)\]\])/mg;

	var results = [];
	if(filter) {
		var match = re.exec(filter);
		while(match) {
			var handler = (match[1]||match[4])?'tiddler':config.filters[match[2]]?match[2]:'field';
			results = config.filters[handler].call(this,results,match);
			match = re.exec(filter);
		}
	}
	return results;
};
// Returns true if path is a valid field name (path),
// i.e. a sequence of identifiers, separated by "."
TiddlyWiki.isValidFieldName = function(name)
{
	var match = /[a-zA-Z_]\w*(\.[a-zA-Z_]\w*)*/.exec(name);
	return match && (match[0] == name);
};

// Throws an exception when name is not a valid field name.
TiddlyWiki.checkFieldName = function(name)
{
	if(!TiddlyWiki.isValidFieldName(name))
		throw config.messages.invalidFieldName.format([name]);
};

function StringFieldAccess(n,readOnly)
{
	this.set = readOnly ?
			function(t,v) {if(v != t[n]) throw config.messages.fieldCannotBeChanged.format([n]);} :
			function(t,v) {if(v != t[n]) {t[n] = v; return true;}};
	this.get = function(t) {return t[n];};
}

function DateFieldAccess(n)
{
	this.set = function(t,v) {
		var d = v instanceof Date ? v : Date.convertFromYYYYMMDDHHMM(v);
		if(d != t[n]) {
			t[n] = d; return true;
		}
	};
	this.get = function(t) {return t[n].convertToYYYYMMDDHHMM();};
}

function LinksFieldAccess(n)
{
	this.set = function(t,v) {
		var s = (typeof v == "string") ? v.readBracketedList() : v;
		if(s.toString() != t[n].toString()) {
			t[n] = s; return true;
		}
	};
	this.get = function(t) {return String.encodeTiddlyLinkList(t[n]);};
}

TiddlyWiki.standardFieldAccess = {
	// The set functions return true when setting the data has changed the value.
	"title":    new StringFieldAccess("title",true),
	// Handle the "tiddler" field name as the title
	"tiddler":  new StringFieldAccess("title",true),
	"text":     new StringFieldAccess("text"),
	"modifier": new StringFieldAccess("modifier"),
	"modified": new DateFieldAccess("modified"),
	"creator":  new StringFieldAccess("creator"),
	"created":  new DateFieldAccess("created"),
	"tags":     new LinksFieldAccess("tags")
};

TiddlyWiki.isStandardField = function(name)
{
	return TiddlyWiki.standardFieldAccess[name] != undefined;
};

// Sets the value of the given field of the tiddler to the value.
// Setting an ExtendedField's value to null or undefined removes the field.
// Setting a namespace to undefined removes all fields of that namespace.
// The fieldName is case-insensitive.
// All values will be converted to a string value.
TiddlyWiki.prototype.setValue = function(tiddler,fieldName,value)
{
	TiddlyWiki.checkFieldName(fieldName);
	var t = this.resolveTiddler(tiddler);
	if(!t)
		return;
	fieldName = fieldName.toLowerCase();
	var isRemove = (value === undefined) || (value === null);
	var accessor = TiddlyWiki.standardFieldAccess[fieldName];
	if(accessor) {
		if(isRemove)
			// don't remove StandardFields
			return;
		var h = TiddlyWiki.standardFieldAccess[fieldName];
		if(!h.set(t,value))
			return;
	} else {
		var oldValue = t.fields[fieldName];
		if(isRemove) {
			if(oldValue !== undefined) {
				// deletes a single field
				delete t.fields[fieldName];
			} else {
				// no concrete value is defined for the fieldName
				// so we guess this is a namespace path.
				// delete all fields in a namespace
				var re = new RegExp("^"+fieldName+"\\.");
				var dirty = false;
				var n;
				for(n in t.fields) {
					if(n.match(re)) {
						delete t.fields[n];
						dirty = true;
					}
				}
				if(!dirty)
					return;
			}
		} else {
			// the "normal" set case. value is defined (not null/undefined)
			// For convenience provide a nicer conversion Date->String
			value = value instanceof Date ? value.convertToYYYYMMDDHHMMSSMMM() : String(value);
			if(oldValue == value)
				return;
			t.fields[fieldName] = value;
		}
	}
	// When we are here the tiddler/store really was changed.
	this.notify(t.title,true);
	if(!fieldName.match(/^temp\./))
		this.setDirty(true);
};

// Returns the value of the given field of the tiddler.
// The fieldName is case-insensitive.
// Will only return String values (or undefined).
TiddlyWiki.prototype.getValue = function(tiddler,fieldName)
{
	var t = this.resolveTiddler(tiddler);
	if(!t)
		return undefined;
	if(fieldName.indexOf(config.textPrimitives.sectionSeparator) === 0 || fieldName.indexOf(config.textPrimitives.sliceSeparator) === 0) {
		var sliceType = fieldName.substr(0, 2);
		var sliceName = fieldName.substring(2);
		return store.getTiddlerText("%0%1%2".format(t.title,sliceType,sliceName));
	} else {
		fieldName = fieldName.toLowerCase();
		var accessor = TiddlyWiki.standardFieldAccess[fieldName];
		if(accessor) {
			return accessor.get(t);
		}
	}
	return t.fields[fieldName];
};

// Calls the callback function for every field in the tiddler.
// When callback function returns a non-false value the iteration stops
// and that value is returned.
// The order of the fields is not defined.
// @param callback a function(tiddler,fieldName,value).
TiddlyWiki.prototype.forEachField = function(tiddler,callback,onlyExtendedFields)
{
	var t = this.resolveTiddler(tiddler);
	if(!t)
		return undefined;
	var n,result;
	for(n in t.fields) {
		result = callback(t,n,t.fields[n]);
		if(result)
			return result;
		}
	if(onlyExtendedFields)
		return undefined;
	for(n in TiddlyWiki.standardFieldAccess) {
		if(n != "tiddler") {
			// even though the "title" field can also be referenced through the name "tiddler"
			// we only visit this field once.
			result = callback(t,n,TiddlyWiki.standardFieldAccess[n].get(t));
			if(result)
				return result;
		}
	}
	return undefined;
};

//--
//-- Story functions
//--

function Story(containerId,idPrefix)
{
	this.container = containerId;
	this.idPrefix = idPrefix;
	this.highlightRegExp = null;
	this.tiddlerId = function(title) {
		title = title.replace(/_/g, "__").replace(/ /g, "_");
		var id = this.idPrefix + title;
		return id==this.container ? this.idPrefix + "_" + title : id;
	};
	this.containerId = function() {
		return this.container;
	};
}

Story.prototype.getTiddler = function(title)
{
	return document.getElementById(this.tiddlerId(title));
};

Story.prototype.getContainer = function()
{
	return document.getElementById(this.containerId());
};

Story.prototype.forEachTiddler = function(fn)
{
	var place = this.getContainer();
	if(!place)
		return;
	var e = place.firstChild;
	while(e) {
		var n = e.nextSibling;
		var title = e.getAttribute("tiddler");
		fn.call(this,title,e);
		e = n;
	}
};

Story.prototype.displayDefaultTiddlers = function()
{
	this.displayTiddlers(null,store.filterTiddlers(store.getTiddlerText("DefaultTiddlers")));
};

Story.prototype.displayTiddlers = function(srcElement,titles,template,animate,unused,customFields,toggle)
{
	var t;
	for(t = titles.length-1;t>=0;t--)
		this.displayTiddler(srcElement,titles[t],template,animate,unused,customFields);
};

Story.prototype.displayTiddler = function(srcElement,tiddler,template,animate,unused,customFields,toggle,animationSrc)
{
	var title = (tiddler instanceof Tiddler) ? tiddler.title : tiddler;
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem) {
		if(toggle) {
			if(tiddlerElem.getAttribute("dirty") != "true")
				this.closeTiddler(title,true);
		} else {
			this.refreshTiddler(title,template,false,customFields);
		}
	} else {
		var place = this.getContainer();
		var before = this.positionTiddler(srcElement);
		tiddlerElem = this.createTiddler(place,before,title,template,customFields);
	}
	if(animationSrc && typeof animationSrc !== "string") {
		srcElement = animationSrc;
	}
	if(srcElement && typeof srcElement !== "string") {
		if(config.options.chkAnimate && (animate == undefined || animate == true) && anim && typeof Zoomer == "function" && typeof Scroller == "function")
			anim.startAnimating(new Zoomer(title,srcElement,tiddlerElem),new Scroller(tiddlerElem));
		else
			window.scrollTo(0,ensureVisible(tiddlerElem));
	}
	return tiddlerElem;
};

Story.prototype.positionTiddler = function(srcElement)
{
	var place = this.getContainer();
	var before = null;
	if(typeof srcElement == "string") {
		switch(srcElement) {
		case "top":
			before = place.firstChild;
			break;
		case "bottom":
			before = null;
			break;
		}
	} else {
		var after = this.findContainingTiddler(srcElement);
		if(after == null) {
			before = place.firstChild;
		} else if(after.nextSibling) {
			before = after.nextSibling;
			if(before.nodeType != 1)
				before = null;
		}
	}
	return before;
};

Story.prototype.createTiddler = function(place,before,title,template,customFields)
{
	var tiddlerElem = createTiddlyElement(null,"div",this.tiddlerId(title),"tiddler");
	tiddlerElem.setAttribute("refresh","tiddler");
	if(customFields)
		tiddlerElem.setAttribute("tiddlyFields",customFields);
	place.insertBefore(tiddlerElem,before);
	var defaultText = null;
	if(!store.tiddlerExists(title) && !store.isShadowTiddler(title))
		defaultText = this.loadMissingTiddler(title,customFields);
	this.refreshTiddler(title,template,false,customFields,defaultText);
	return tiddlerElem;
};

Story.prototype.loadMissingTiddler = function(title,fields,callback)
{
	var getTiddlerCallback = function(context)
	{
		if(context.status) {
			var t = context.tiddler;
			if(!t.created)
				t.created = new Date();
			if(!t.modified)
				t.modified = t.created;
			context.tiddler = store.saveTiddler(t.title,t.title,t.text,t.modifier,t.modified,t.tags,t.fields,true,t.created,t.creator);
			autoSaveChanges();
		} else {
			story.refreshTiddler(context.title,null,true);
		}
		context.adaptor.close();
		if(callback) {
			callback(context);
		}
	};
	var tiddler = new Tiddler(title);
	tiddler.fields = typeof fields == "string" ? fields.decodeHashMap() : fields||{};
	var context = {serverType:tiddler.getServerType()};
	if(!context.serverType)
		return "";
	context.host = tiddler.fields['server.host'];
	context.workspace = tiddler.fields['server.workspace'];
	var adaptor = new config.adaptors[context.serverType]();
	adaptor.getTiddler(title,context,null,getTiddlerCallback);
	return config.messages.loadingMissingTiddler.format([title,context.serverType,context.host,context.workspace]);
};

Story.prototype.chooseTemplateForTiddler = function(title,template)
{
	if(!template)
		template = DEFAULT_VIEW_TEMPLATE;
	if(template == DEFAULT_VIEW_TEMPLATE || template == DEFAULT_EDIT_TEMPLATE)
		template = config.tiddlerTemplates[template];
	return template;
};

Story.prototype.getTemplateForTiddler = function(title,template,tiddler)
{
	return store.getRecursiveTiddlerText(template,null,10);
};

Story.prototype.refreshTiddler = function(title,template,force,customFields,defaultText)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem) {
		if(tiddlerElem.getAttribute("dirty") == "true" && !force)
			return tiddlerElem;
		template = this.chooseTemplateForTiddler(title,template);
		var currTemplate = tiddlerElem.getAttribute("template");
		if((template != currTemplate) || force) {
			var tiddler = store.getTiddler(title);
			if(!tiddler) {
				tiddler = new Tiddler();
				if(store.isShadowTiddler(title)) {
					var tags = [];
					tiddler.set(title,store.getTiddlerText(title),config.views.wikified.shadowModifier,version.date,tags,version.date);
				} else {
					var text = template=="EditTemplate" ?
								config.views.editor.defaultText.format([title]) :
								config.views.wikified.defaultText.format([title]);
					text = defaultText || text;
					var fields = customFields ? customFields.decodeHashMap() : null;
					tiddler.set(title,text,config.views.wikified.defaultModifier,version.date,[],version.date,fields);
				}
			}
			tiddlerElem.setAttribute("tags",tiddler.tags.join(" "));
			tiddlerElem.setAttribute("tiddler",title);
			tiddlerElem.setAttribute("template",template);
			tiddlerElem.onmouseover = this.onTiddlerMouseOver;
			tiddlerElem.onmouseout = this.onTiddlerMouseOut;
			tiddlerElem.ondblclick = this.onTiddlerDblClick;
			tiddlerElem[window.event?"onkeydown":"onkeypress"] = this.onTiddlerKeyPress;
			tiddlerElem.innerHTML = this.getTemplateForTiddler(title,template,tiddler);
			applyHtmlMacros(tiddlerElem,tiddler);
			if(store.getTaggedTiddlers(title).length > 0)
				jQuery(tiddlerElem).addClass("isTag");
			else
				jQuery(tiddlerElem).removeClass("isTag");
			if(store.tiddlerExists(title)) {
				jQuery(tiddlerElem).removeClass("shadow");
				jQuery(tiddlerElem).removeClass("missing");
			} else {
				jQuery(tiddlerElem).addClass(store.isShadowTiddler(title) ? "shadow" : "missing");
			}
			if(customFields)
				this.addCustomFields(tiddlerElem,customFields);
		}
	}
	return tiddlerElem;
};

Story.prototype.addCustomFields = function(place,customFields)
{
	var fields = customFields.decodeHashMap();
	var w = createTiddlyElement(place,"div",null,"customFields");
	w.style.display = "none";
	var t;
	for(t in fields) {
		var e = document.createElement("input");
		e.setAttribute("type","text");
		e.setAttribute("value",fields[t]);
		w.appendChild(e);
		e.setAttribute("edit",t);
	}
};

Story.prototype.refreshAllTiddlers = function(force)
{
	var e = this.getContainer().firstChild;
	while(e) {
		var template = e.getAttribute("template");
		if(template && e.getAttribute("dirty") != "true") {
			this.refreshTiddler(e.getAttribute("tiddler"),force ? null : template,true);
		}
		e = e.nextSibling;
	}
};

Story.prototype.onTiddlerMouseOver = function(e)
{
	jQuery(this).addClass("selected");
};

Story.prototype.onTiddlerMouseOut = function(e)
{
	jQuery(this).removeClass("selected");
};

Story.prototype.onTiddlerDblClick = function(ev)
{
	var e = ev || window.event;
	var target = resolveTarget(e);
	if(target && target.nodeName.toLowerCase() != "input" && target.nodeName.toLowerCase() != "textarea") {
		if(document.selection && document.selection.empty)
			document.selection.empty();
		config.macros.toolbar.invokeCommand(this,"defaultCommand",e);
		e.cancelBubble = true;
		if(e.stopPropagation) e.stopPropagation();
		return true;
	}
	return false;
};

Story.prototype.onTiddlerKeyPress = function(ev)
{
	var e = ev || window.event;
	clearMessage();
	var consume = false;
	var title = this.getAttribute("tiddler");
	var target = resolveTarget(e);
	switch(e.keyCode) {
	case 9: // Tab
		var ed = story.getTiddlerField(title,"text");
		if(target.tagName.toLowerCase() == "input" && ed.value==config.views.editor.defaultText.format([title])) {
			// moving from input field and editor still contains default text, so select it
			ed.focus();
			ed.select();
			consume = true;
		}
		if(config.options.chkInsertTabs && target.tagName.toLowerCase() == "textarea") {
			replaceSelection(target,String.fromCharCode(9));
			consume = true;
		}
		if(config.isOpera) {
			target.onblur = function() {
				this.focus();
				this.onblur = null;
			};
		}
		break;
	case 13: // Ctrl-Enter
	case 10: // Ctrl-Enter on IE PC
	case 77: // Ctrl-Enter is "M" on some platforms
		if(e.ctrlKey) {
			blurElement(this);
			config.macros.toolbar.invokeCommand(this,"defaultCommand",e);
			consume = true;
		}
		break;
	case 27: // Escape
		blurElement(this);
		config.macros.toolbar.invokeCommand(this,"cancelCommand",e);
		consume = true;
		break;
	}
	e.cancelBubble = consume;
	if(consume) {
		if(e.stopPropagation) e.stopPropagation(); // Stop Propagation
		e.returnValue = true; // Cancel The Event in IE
		if(e.preventDefault ) e.preventDefault(); // Cancel The Event in Moz
	}
	return !consume;
};

Story.prototype.getTiddlerField = function(title,field)
{
	var tiddlerElem = this.getTiddler(title);
	var e = null;
	if(tiddlerElem) {
		var t,children = tiddlerElem.getElementsByTagName("*");
		for(t=0; t<children.length; t++) {
			var c = children[t];
			if(c.tagName.toLowerCase() == "input" || c.tagName.toLowerCase() == "textarea") {
				if(!e)
					e = c;
				if(c.getAttribute("edit") == field)
					e = c;
			}
		}
	}
	return e;
};

Story.prototype.focusTiddler = function(title,field)
{
	var e = this.getTiddlerField(title,field);
	if(e) {
		e.focus();
		e.select();
	}
};

Story.prototype.blurTiddler = function(title)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem && tiddlerElem.focus && tiddlerElem.blur) {
		tiddlerElem.focus();
		tiddlerElem.blur();
	}
};

Story.prototype.setTiddlerField = function(title,tag,mode,field)
{
	var c = this.getTiddlerField(title,field);
	var tags = c.value.readBracketedList();
	tags.setItem(tag,mode);
	c.value = String.encodeTiddlyLinkList(tags);
};

Story.prototype.setTiddlerTag = function(title,tag,mode)
{
	this.setTiddlerField(title,tag,mode,"tags");
};

Story.prototype.closeTiddler = function(title,animate,unused)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem) {
		clearMessage();
		this.scrubTiddler(tiddlerElem);
		if(config.options.chkAnimate && animate && anim && typeof Slider == "function")
			anim.startAnimating(new Slider(tiddlerElem,false,null,"all"));
		else {
			jQuery(tiddlerElem).remove();
		}
	}
};

Story.prototype.scrubTiddler = function(tiddlerElem)
{
	tiddlerElem.id = null;
};

Story.prototype.setDirty = function(title,dirty)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem)
		tiddlerElem.setAttribute("dirty",dirty ? "true" : "false");
};

Story.prototype.isDirty = function(title)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem)
		return tiddlerElem.getAttribute("dirty") == "true";
	return null;
};

Story.prototype.areAnyDirty = function()
{
	var r = false;
	this.forEachTiddler(function(title,element) {
		if(this.isDirty(title))
			r = true;
	});
	return r;
};

Story.prototype.closeAllTiddlers = function(exclude)
{
	clearMessage();
	this.forEachTiddler(function(title,element) {
		if((title != exclude) && element.getAttribute("dirty") != "true")
			this.closeTiddler(title);
	});
	window.scrollTo(0,ensureVisible(this.container));
};

Story.prototype.isEmpty = function()
{
	var place = this.getContainer();
	return place && place.firstChild == null;
};

Story.prototype.search = function(text,useCaseSensitive,useRegExp)
{
	this.closeAllTiddlers();
	highlightHack = new RegExp(useRegExp ? text : text.escapeRegExp(),useCaseSensitive ? "mg" : "img");
	var matches = store.search(highlightHack,"title","excludeSearch");
	this.displayTiddlers(null,matches);
	highlightHack = null;
	var q = useRegExp ? "/" : "'";
	if(matches.length > 0)
		displayMessage(config.macros.search.successMsg.format([matches.length.toString(),q + text + q]));
	else
		displayMessage(config.macros.search.failureMsg.format([q + text + q]));
};

Story.prototype.findContainingTiddler = function(e)
{
	while(e && !jQuery(e).hasClass("tiddler")) {
		e = jQuery(e).hasClass("popup") && Popup.stack[0] ? Popup.stack[0].root : e.parentNode;
	}
	return e;
};

Story.prototype.gatherSaveFields = function(e,fields)
{
	if(e && e.getAttribute) {
		var f = e.getAttribute("edit");
		if(f)
			fields[f] = e.value.replace(/\r/mg,"");
		if(e.hasChildNodes()) {
			var t,c = e.childNodes;
			for(t=0; t<c.length; t++)
				this.gatherSaveFields(c[t],fields);
		}
	}
};

Story.prototype.hasChanges = function(title)
{
	var e = this.getTiddler(title);
	if(e) {
		var fields = {};
		this.gatherSaveFields(e,fields);
		if(store.fetchTiddler(title)) {
		    var n;
			for(n in fields) {
				if(store.getValue(title,n) != fields[n]) //# tiddler changed
					return true;
			}
		} else {
			if(store.isShadowTiddler(title) && store.getShadowTiddlerText(title) == fields.text) { //# not checking for title or tags
				return false;
			} else { //# changed shadow or new tiddler
				return true;
			}
		}
	}
	return false;
};

Story.prototype.saveTiddler = function(title,minorUpdate)
{
	var tiddlerElem = this.getTiddler(title);
	if(tiddlerElem) {
		var fields = {};
		this.gatherSaveFields(tiddlerElem,fields);
		var newTitle = fields.title || title;
		if(!store.tiddlerExists(newTitle)) {
			newTitle = newTitle.trim();
			var creator = config.options.txtUserName;
		}
		if(store.tiddlerExists(newTitle) && newTitle != title) {
			if(!confirm(config.messages.overwriteWarning.format([newTitle.toString()])))
				return null;
				title = newTitle;
		}
		if(newTitle != title)
			this.closeTiddler(newTitle,false);
		tiddlerElem.id = this.tiddlerId(newTitle);
		tiddlerElem.setAttribute("tiddler",newTitle);
		tiddlerElem.setAttribute("template",DEFAULT_VIEW_TEMPLATE);
		tiddlerElem.setAttribute("dirty","false");
		if(config.options.chkForceMinorUpdate)
			minorUpdate = !minorUpdate;
		if(!store.tiddlerExists(newTitle))
			minorUpdate = false;
		var newDate = new Date();
		if(store.tiddlerExists(title)) {
			var t = store.fetchTiddler(title);
			var extendedFields = t.fields;
			creator = t.creator;
		} else {
			extendedFields = merge({},config.defaultCustomFields);
		}
		var n;
		for(n in fields) {
			if(!TiddlyWiki.isStandardField(n))
				extendedFields[n] = fields[n];
		}
		var tiddler = store.saveTiddler(title,newTitle,fields.text,minorUpdate ? undefined : config.options.txtUserName,minorUpdate ? undefined : newDate,fields.tags,extendedFields,null,null,creator);
		autoSaveChanges(null,[tiddler]);
		return newTitle;
	}
	return null;
};

Story.prototype.permaView = function()
{
	var links = [];
	this.forEachTiddler(function(title,element) {
		links.push(String.encodeTiddlyLink(title));
	});
	var t = encodeURIComponent(links.join(" "));
	if(t == "")
		t = "#";
	if(window.location.hash != t)
		window.location.hash = t;
};

Story.prototype.switchTheme = function(theme)
{
	if(safeMode)
		return;

	var isAvailable = function(title) {
		var s = title ? title.indexOf(config.textPrimitives.sectionSeparator) : -1;
		if(s!=-1)
			title = title.substr(0,s);
		return store.tiddlerExists(title) || store.isShadowTiddler(title);
	};

	var getSlice = function(theme,slice) {
		var r;
		if(readOnly)
			r = store.getTiddlerSlice(theme,slice+"ReadOnly") || store.getTiddlerSlice(theme,"Web"+slice);
		r = r || store.getTiddlerSlice(theme,slice);
		if(r && r.indexOf(config.textPrimitives.sectionSeparator)==0)
			r = theme + r;
		return isAvailable(r) ? r : slice;
	};

	var replaceNotification = function(i,name,theme,slice) {
		var newName = getSlice(theme,slice);
		if(name!=newName && store.namedNotifications[i].name==name) {
			store.namedNotifications[i].name = newName;
			return newName;
		}
		return name;
	};

	var pt = config.refresherData.pageTemplate;
	var vi = DEFAULT_VIEW_TEMPLATE;
	var vt = config.tiddlerTemplates[vi];
	var ei = DEFAULT_EDIT_TEMPLATE;
	var et = config.tiddlerTemplates[ei];

	var i;
	for(i=0; i<config.notifyTiddlers.length; i++) {
		var name = config.notifyTiddlers[i].name;
		switch(name) {
		case "PageTemplate":
			config.refresherData.pageTemplate = replaceNotification(i,config.refresherData.pageTemplate,theme,name);
			break;
		case "StyleSheet":
			removeStyleSheet(config.refresherData.styleSheet);
			config.refresherData.styleSheet = replaceNotification(i,config.refresherData.styleSheet,theme,name);
			break;
		case "ColorPalette":
			config.refresherData.colorPalette = replaceNotification(i,config.refresherData.colorPalette,theme,name);
			break;
		default:
			break;
		}
	}
	config.tiddlerTemplates[vi] = getSlice(theme,"ViewTemplate");
	config.tiddlerTemplates[ei] = getSlice(theme,"EditTemplate");
	if(!startingUp) {
		if(config.refresherData.pageTemplate!=pt || config.tiddlerTemplates[vi]!=vt || config.tiddlerTemplates[ei]!=et) {
			refreshAll();
			this.refreshAllTiddlers(true);
		} else {
			setStylesheet(store.getRecursiveTiddlerText(config.refresherData.styleSheet,"",10),config.refreshers.styleSheet);
		}
		config.options.txtTheme = theme;
		saveOption("txtTheme");
	}
};

//--
//-- Backstage
//--
// Backstage tasks
config.tasks.save.action = saveChanges;

var backstage = {
	area: null,
	toolbar: null,
	button: null,
	showButton: null,
	hideButton: null,
	cloak: null,
	panel: null,
	panelBody: null,
	panelFooter: null,
	currTabName: null,
	currTabElem: null,
	content: null,

	init: function() {
		var cmb = config.messages.backstage;
		this.area = document.getElementById("backstageArea");
		this.toolbar = jQuery("#backstageToolbar").empty()[0];
		this.button = jQuery("#backstageButton").empty()[0];
		this.button.style.display = "block";
		var t = cmb.open.text + " " + glyph("bentArrowLeft");
		this.showButton = createTiddlyButton(this.button,t,cmb.open.tooltip,
						function(e) {backstage.show(); return false;},null,"backstageShow");
		t = glyph("bentArrowRight") + " " + cmb.close.text;
		this.hideButton = createTiddlyButton(this.button,t,cmb.close.tooltip,
						function(e) {backstage.hide(); return false;},null,"backstageHide");
		this.cloak = document.getElementById("backstageCloak");
		this.panel = document.getElementById("backstagePanel");
		this.panelFooter = createTiddlyElement(this.panel,"div",null,"backstagePanelFooter");
		this.panelBody = createTiddlyElement(this.panel,"div",null,"backstagePanelBody");
		this.cloak.onmousedown = function(e) {backstage.switchTab(null);};
		createTiddlyText(this.toolbar,cmb.prompt);
		for(t=0; t<config.backstageTasks.length; t++) {
			var taskName = config.backstageTasks[t];
			var task = config.tasks[taskName];
			var handler = task.action ? this.onClickCommand : this.onClickTab;
			var text = task.text + (task.action ? "" : glyph("downTriangle"));
			var btn = createTiddlyButton(this.toolbar,text,task.tooltip,handler,"backstageTab");
			jQuery(btn).addClass(task.action ? "backstageAction" : "backstageTask");
			btn.setAttribute("task", taskName);
			}
		this.content = document.getElementById("contentWrapper");
		if(config.options.chkBackstage)
			this.show();
		else
			this.hide();
	},

	isVisible: function() {
		return this.area ? this.area.style.display == "block" : false;
	},

	show: function() {
		this.area.style.display = "block";
		if(anim && config.options.chkAnimate) {
			backstage.toolbar.style.left = findWindowWidth() + "px";
			var p = [{style: "left", start: findWindowWidth(), end: 0, template: "%0px"}];
			anim.startAnimating(new Morpher(backstage.toolbar,config.animDuration,p));
		} else {
			backstage.area.style.left = "0px";
		}
		jQuery(this.showButton).hide();
		jQuery(this.hideButton).show();
		config.options.chkBackstage = true;
		saveOption("chkBackstage");
		jQuery(this.content).addClass("backstageVisible");
	},

	hide: function() {
		if(this.currTabElem) {
			this.switchTab(null);
		} else {
			backstage.toolbar.style.left = "0px";
			if(anim && config.options.chkAnimate) {
				var p = [{style: "left", start: 0, end: findWindowWidth(), template: "%0px"}];
				var c = function(element,properties) {backstage.area.style.display = "none";};
				anim.startAnimating(new Morpher(backstage.toolbar,config.animDuration,p,c));
			} else {
				this.area.style.display = "none";
			}
			this.showButton.style.display = "block";
			this.hideButton.style.display = "none";
			config.options.chkBackstage = false;
			saveOption("chkBackstage");
			jQuery(this.content).removeClass("backstageVisible");
		}
	},

	onClickCommand: function(e) {
		var task = config.tasks[this.getAttribute("task")];
		if(task.action) {
			backstage.switchTab(null);
			task.action();
		}
		return false;
	},

	onClickTab: function(e) {
		backstage.switchTab(this.getAttribute("task"));
		return false;
	},

	// Switch to a given tab, or none if null is passed
	switchTab: function(tabName) {
		var tabElem = null;
		var e = this.toolbar.firstChild;
		while(e) {
			if(e.getAttribute && e.getAttribute("task") == tabName)
				tabElem = e;
			e = e.nextSibling;
		}
		if(tabName == backstage.currTabName) {
			backstage.hidePanel();
			return;
		}
		if(backstage.currTabElem) {
			jQuery(this.currTabElem).removeClass("backstageSelTab");
		}
		if(tabElem && tabName) {
			backstage.preparePanel();
			jQuery(tabElem).addClass("backstageSelTab");
			var task = config.tasks[tabName];
			wikify(task.content,backstage.panelBody,null,null);
			backstage.showPanel();
		} else if(backstage.currTabElem) {
			backstage.hidePanel();
		}
		backstage.currTabName = tabName;
		backstage.currTabElem = tabElem;
	},

	isPanelVisible: function() {
		return backstage.panel ? backstage.panel.style.display == "block" : false;
	},

	preparePanel: function() {
		backstage.cloak.style.height = findWindowHeight() + "px";
		backstage.cloak.style.display = "block";
		jQuery(backstage.panelBody).empty();
		return backstage.panelBody;
	},

	showPanel: function() {
		backstage.panel.style.display = "block";
		if(anim && config.options.chkAnimate) {
			backstage.panel.style.top = (-backstage.panel.offsetHeight) + "px";
			var p = [{style: "top", start: -backstage.panel.offsetHeight, end: 0, template: "%0px"}];
			anim.startAnimating(new Morpher(backstage.panel,config.animDuration,p),new Scroller(backstage.panel,false));
		} else {
			backstage.panel.style.top = "0px";
		}
		return backstage.panelBody;
	},

	hidePanel: function() {
		if(backstage.currTabElem)
			jQuery(backstage.currTabElem).removeClass("backstageSelTab");
		backstage.currTabElem = null;
		backstage.currTabName = null;
		if(anim && config.options.chkAnimate) {
			var p = [
				{style: "top", start: 0, end: -(backstage.panel.offsetHeight), template: "%0px"},
				{style: "display", atEnd: "none"}
			];
			var c = function(element,properties) {backstage.cloak.style.display = "none";};
			anim.startAnimating(new Morpher(backstage.panel,config.animDuration,p,c));
		} else {
			jQuery([backstage.panel,backstage.cloak]).hide();
		}
	}
};

config.macros.backstage = {};

config.macros.backstage.handler = function(place,macroName,params)
{
	var backstageTask = config.tasks[params[0]];
	if(backstageTask)
		createTiddlyButton(place,backstageTask.text,backstageTask.tooltip,function(e) {backstage.switchTab(params[0]); return false;});
};

//--
//-- ImportTiddlers macro
//--

config.macros.importTiddlers.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if(readOnly) {
		createTiddlyElement(place,"div",null,"marked",this.readOnlyWarning);
		return;
	}
	var w = new Wizard();
	w.createWizard(place,this.wizardTitle);
	this.restart(w);
};

config.macros.importTiddlers.onCancel = function(e)
{
	var wizard = new Wizard(this);
	wizard.clear();
	config.macros.importTiddlers.restart(wizard);
	return false;
};

config.macros.importTiddlers.onClose = function(e)
{
	backstage.hidePanel();
	return false;
};

config.macros.importTiddlers.restart = function(wizard)
{
	var me = config.macros.importTiddlers;
	wizard.addStep(this.step1Title,this.step1Html);
	var t,s = wizard.getElement("selTypes");
	for(t in config.adaptors) {
		var e = createTiddlyElement(s,"option",null,null,config.adaptors[t].serverLabel || t);
		e.value = t;
	}
	if(config.defaultAdaptor)
		s.value = config.defaultAdaptor;
	s = wizard.getElement("selFeeds");
	var feeds = this.getFeeds();
	for(t in feeds) {
		e = createTiddlyElement(s,"option",null,null,t);
		e.value = t;
	}
	wizard.setValue("feeds",feeds);
	s.onchange = me.onFeedChange;
	var fileInput = wizard.getElement("txtBrowse");
	fileInput.onchange = me.onBrowseChange;
	fileInput.onkeyup = me.onBrowseChange;
	wizard.setButtons([{caption: this.openLabel, tooltip: this.openPrompt, onClick: me.onOpen}]);
	wizard.formElem.action = "javascript:;";
	wizard.formElem.onsubmit = function() {
		if(!this.txtPath || this.txtPath.value.length) //# check for manually entered path in first step
			this.lastChild.firstChild.onclick();
	};
};

config.macros.importTiddlers.getFeeds = function()
{
	var feeds = {};
	var t,tagged = store.getTaggedTiddlers("systemServer","title");
	for(t=0; t<tagged.length; t++) {
		var title = tagged[t].title;
		var serverType = store.getTiddlerSlice(title,"Type");
		if(!serverType)
			serverType = "file";
		feeds[title] = {title: title,
						url: store.getTiddlerSlice(title,"URL"),
						workspace: store.getTiddlerSlice(title,"Workspace"),
						workspaceList: store.getTiddlerSlice(title,"WorkspaceList"),
						tiddlerFilter: store.getTiddlerSlice(title,"TiddlerFilter"),
						serverType: serverType,
						description: store.getTiddlerSlice(title,"Description")};
	}
	return feeds;
};

config.macros.importTiddlers.onFeedChange = function(e)
{
	var wizard = new Wizard(this);
	var selTypes = wizard.getElement("selTypes");
	var fileInput = wizard.getElement("txtPath");
	var feeds = wizard.getValue("feeds");
	var f = feeds[this.value];
	if(f) {
		selTypes.value = f.serverType;
		fileInput.value = f.url;
		wizard.setValue("feedName",f.serverType);
		wizard.setValue("feedHost",f.url);
		wizard.setValue("feedWorkspace",f.workspace);
		wizard.setValue("feedWorkspaceList",f.workspaceList);
		wizard.setValue("feedTiddlerFilter",f.tiddlerFilter);
	}
	return false;
};

config.macros.importTiddlers.onBrowseChange = function(e)
{
	var wizard = new Wizard(this);
	var file = this.value;
	if(this.files && this.files[0]) {
		file = this.files[0].fileName;
		try {
			if(typeof(netscape) !== "undefined") {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");
			}
		} catch (ex) {
			showException(ex);
		}
	}
	var fileInput = wizard.getElement("txtPath");
	fileInput.value = config.macros.importTiddlers.getURLFromLocalPath(file);
	var serverType = wizard.getElement("selTypes");
	serverType.value = "file";
	return true;
};

config.macros.importTiddlers.getURLFromLocalPath = function(v)
{
	if(!v || !v.length)
		return v;
	v = v.replace(/\\/g,"/"); // use "/" for cross-platform consistency
	var u;
	var t = v.split(":");
	var p = t[1] || t[0]; // remove drive letter (if any)
	if(t[1] && (t[0] == "http" || t[0] == "https" || t[0] == "file")) {
		u = v;
	} else if(p.substr(0,1)=="/") {
		u = document.location.protocol + "//" + document.location.hostname + (t[1] ? "/" : "") + v;
	} else {
		var c = document.location.href.replace(/\\/g,"/");
		var pos = c.lastIndexOf("/");
		if(pos!=-1)
			c = c.substr(0,pos); // remove filename
		u = c + "/" + p;
	}
	return u;
};

config.macros.importTiddlers.onOpen = function(e)
{
	var me = config.macros.importTiddlers;
	var wizard = new Wizard(this);
	var fileInput = wizard.getElement("txtPath");
	var url = fileInput.value;
	var serverType = wizard.getElement("selTypes").value || config.defaultAdaptor;
	var adaptor = new config.adaptors[serverType]();
	wizard.setValue("adaptor",adaptor);
	wizard.setValue("serverType",serverType);
	wizard.setValue("host",url);
	adaptor.openHost(url,null,wizard,me.onOpenHost);
	wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],me.statusOpenHost);
	return false;
};

config.macros.importTiddlers.onOpenHost = function(context,wizard)
{
	var me = config.macros.importTiddlers;
	var adaptor = wizard.getValue("adaptor");
	if(context.status !== true)
		displayMessage("Error in importTiddlers.onOpenHost: " + context.statusText);
	adaptor.getWorkspaceList(context,wizard,me.onGetWorkspaceList);
	wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],me.statusGetWorkspaceList);
};

config.macros.importTiddlers.onGetWorkspaceList = function(context,wizard)
{
	var me = config.macros.importTiddlers;
	if(context.status !== true)
		displayMessage("Error in importTiddlers.onGetWorkspaceList: " + context.statusText);
	wizard.setValue("context",context);
	var workspace = wizard.getValue("feedWorkspace");
	if(!workspace && context.workspaces.length==1)
		workspace = context.workspaces[0].title;
	if(workspace) {
		context.adaptor.openWorkspace(workspace,context,wizard,me.onOpenWorkspace);
		wizard.setValue("workspace",workspace);
		wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],me.statusOpenWorkspace);
		return;
	}
	wizard.addStep(me.step2Title,me.step2Html);
	var t,s = wizard.getElement("selWorkspace");
	s.onchange = me.onWorkspaceChange;
	for(t=0; t<context.workspaces.length; t++) {
		var e = createTiddlyElement(s,"option",null,null,context.workspaces[t].title);
		e.value = context.workspaces[t].title;
	}
	var workspaceList = wizard.getValue("feedWorkspaceList");
	if(workspaceList) {
		var n,list = workspaceList.parseParams("workspace",null,false,true);
		for(n=1; n<list.length; n++) {
			if(context.workspaces.findByField("title",list[n].value) == null) {
				e = createTiddlyElement(s,"option",null,null,list[n].value);
				e.value = list[n].value;
			}
		}
	}
	if(workspace) {
		t = wizard.getElement("txtWorkspace");
		t.value = workspace;
	}
	wizard.setButtons([{caption: me.openLabel, tooltip: me.openPrompt, onClick: me.onChooseWorkspace}]);
};

config.macros.importTiddlers.onWorkspaceChange = function(e)
{
	var wizard = new Wizard(this);
	var t = wizard.getElement("txtWorkspace");
	t.value = this.value;
	this.selectedIndex = 0;
	return false;
};

config.macros.importTiddlers.onChooseWorkspace = function(e)
{
	var me = config.macros.importTiddlers;
	var wizard = new Wizard(this);
	var adaptor = wizard.getValue("adaptor");
	var workspace = wizard.getElement("txtWorkspace").value;
	wizard.setValue("workspace",workspace);
	var context = wizard.getValue("context");
	adaptor.openWorkspace(workspace,context,wizard,me.onOpenWorkspace);
	wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],me.statusOpenWorkspace);
	return false;
};

config.macros.importTiddlers.onOpenWorkspace = function(context,wizard)
{
	var me = config.macros.importTiddlers;
	if(context.status !== true)
		displayMessage("Error in importTiddlers.onOpenWorkspace: " + context.statusText);
	var adaptor = wizard.getValue("adaptor");
	adaptor.getTiddlerList(context,wizard,me.onGetTiddlerList,wizard.getValue("feedTiddlerFilter"));
	wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],me.statusGetTiddlerList);
};

config.macros.importTiddlers.onGetTiddlerList = function(context,wizard)
{
	var me = config.macros.importTiddlers;
	if(context.status !== true) {
		var error = context.statusText||me.errorGettingTiddlerList;
		if(context.host.indexOf("file://") === 0) {
			error = me.errorGettingTiddlerListFile;
		} else {
			error = context.xhr && context.xhr.status == 404 ? me.errorGettingTiddlerListHttp404 :
				me.errorGettingTiddlerListHttp;
		}
		wizard.setButtons([{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}],"");
		jQuery("span.status", wizard.footerEl).html(error); // so error message can be html
		return;
	}
	// Extract data for the listview
	var listedTiddlers = [];
	if(context.tiddlers) {
		var n;
		for(n=0; n<context.tiddlers.length; n++) {
			var tiddler = context.tiddlers[n];
			listedTiddlers.push({
				title: tiddler.title,
				modified: tiddler.modified,
				modifier: tiddler.modifier,
				text: tiddler.text ? wikifyPlainText(tiddler.text,100) : "",
				tags: tiddler.tags,
				size: tiddler.text ? tiddler.text.length : 0,
				tiddler: tiddler
			});
		}
	}
	listedTiddlers.sort(function(a,b) {return a.title < b.title ? -1 : (a.title == b.title ? 0 : +1);});
	// Display the listview
	wizard.addStep(me.step3Title,me.step3Html);
	var markList = wizard.getElement("markList");
	var listWrapper = document.createElement("div");
	markList.parentNode.insertBefore(listWrapper,markList);
	var listView = ListView.create(listWrapper,listedTiddlers,me.listViewTemplate);
	wizard.setValue("listView",listView);
	wizard.setValue("context",context);
	var txtSaveTiddler = wizard.getElement("txtSaveTiddler");
	txtSaveTiddler.value = me.generateSystemServerName(wizard);
	wizard.setButtons([
			{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel},
			{caption: me.importLabel, tooltip: me.importPrompt, onClick: me.doImport}
		]);
};

config.macros.importTiddlers.generateSystemServerName = function(wizard)
{
	var serverType = wizard.getValue("serverType");
	var host = wizard.getValue("host");
	var workspace = wizard.getValue("workspace");
	var pattern = config.macros.importTiddlers[workspace ? "systemServerNamePattern" : "systemServerNamePatternNoWorkspace"];
	return pattern.format([serverType,host,workspace]);
};

config.macros.importTiddlers.saveServerTiddler = function(wizard)
{
	var me = config.macros.importTiddlers;
	var txtSaveTiddler = wizard.getElement("txtSaveTiddler").value;
	if(store.tiddlerExists(txtSaveTiddler)) {
		if(!confirm(me.confirmOverwriteSaveTiddler.format([txtSaveTiddler])))
			return;
		store.suspendNotifications();
		store.removeTiddler(txtSaveTiddler);
		store.resumeNotifications();
	}
	var serverType = wizard.getValue("serverType");
	var host = wizard.getValue("host");
	var workspace = wizard.getValue("workspace");
	var text = me.serverSaveTemplate.format([serverType,host,workspace]);
	store.saveTiddler(txtSaveTiddler,txtSaveTiddler,text,me.serverSaveModifier,new Date(),["systemServer"]);
};

config.macros.importTiddlers.doImport = function(e)
{
	var me = config.macros.importTiddlers;
	var wizard = new Wizard(this);
	if(wizard.getElement("chkSave").checked)
		me.saveServerTiddler(wizard);
	var chkSync = wizard.getElement("chkSync").checked;
	wizard.setValue("sync",chkSync);
	var listView = wizard.getValue("listView");
	var rowNames = ListView.getSelectedRows(listView);
	var adaptor = wizard.getValue("adaptor");
	var overwrite = [];
	var t;
	for(t=0; t<rowNames.length; t++) {
		if(store.tiddlerExists(rowNames[t]))
			overwrite.push(rowNames[t]);
	}
	if(overwrite.length > 0) {
		if(!confirm(me.confirmOverwriteText.format([overwrite.join(", ")])))
			return false;
	}
	wizard.addStep(me.step4Title.format([rowNames.length]),me.step4Html);
	for(t=0; t<rowNames.length; t++) {
		var link = document.createElement("div");
		createTiddlyLink(link,rowNames[t],true);
		var place = wizard.getElement("markReport");
		place.parentNode.insertBefore(link,place);
	}
	wizard.setValue("remainingImports",rowNames.length);
	wizard.setButtons([
			{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}
		],me.statusDoingImport);
	var wizardContext = wizard.getValue("context");
	var tiddlers = wizardContext ? wizardContext.tiddlers : [];
	for(t=0; t<rowNames.length; t++) {
		var context = {
			allowSynchronous:true,
			tiddler:tiddlers[tiddlers.findByField("title",rowNames[t])]
		};
		adaptor.getTiddler(rowNames[t],context,wizard,me.onGetTiddler);
	}
	return false;
};

config.macros.importTiddlers.onGetTiddler = function(context,wizard)
{
	var me = config.macros.importTiddlers;
	if(!context.status)
		displayMessage("Error in importTiddlers.onGetTiddler: " + context.statusText);
	var tiddler = context.tiddler;
	store.suspendNotifications();
	store.saveTiddler(tiddler.title, tiddler.title, tiddler.text, tiddler.modifier, tiddler.modified, tiddler.tags, tiddler.fields, true, tiddler.created);
	if(!wizard.getValue("sync")) {
		store.setValue(tiddler.title,'server',null);
	}
	store.resumeNotifications();
	if(!context.isSynchronous)
		store.notify(tiddler.title,true);
	var remainingImports = wizard.getValue("remainingImports")-1;
	wizard.setValue("remainingImports",remainingImports);
	if(remainingImports == 0) {
		if(context.isSynchronous) {
			store.notifyAll();
			refreshDisplay();
		}
		wizard.setButtons([
				{caption: me.doneLabel, tooltip: me.donePrompt, onClick: me.onClose}
			],me.statusDoneImport);
		autoSaveChanges();
	}
};

//--
//-- Upgrade macro
//--

config.macros.upgrade.handler = function(place)
{
	var w = new Wizard();
	w.createWizard(place,this.wizardTitle);
	w.addStep(this.step1Title,this.step1Html.format([this.source,this.source]));
	w.setButtons([{caption: this.upgradeLabel, tooltip: this.upgradePrompt, onClick: this.onClickUpgrade}]);
};

config.macros.upgrade.onClickUpgrade = function(e)
{
	var me = config.macros.upgrade;
	var w = new Wizard(this);
	if(window.location.protocol != "file:") {
		alert(me.errorCantUpgrade);
		return false;
	}
	if(story.areAnyDirty() || store.isDirty()) {
		alert(me.errorNotSaved);
		return false;
	}
	var localPath = getLocalPath(document.location.toString());
	var backupPath = getBackupPath(localPath,me.backupExtension);
	w.setValue("backupPath",backupPath);
	w.setButtons([],me.statusPreparingBackup);
	var original = loadOriginal(localPath);
	w.setButtons([],me.statusSavingBackup);
	var backup = copyFile(backupPath,localPath);
	if(!backup)
		backup = saveFile(backupPath,original);
	if(!backup) {
		w.setButtons([],me.errorSavingBackup);
		alert(me.errorSavingBackup);
		return false;
	}
	w.setButtons([],me.statusLoadingCore);
	var options = {
		type:"GET",
		url:me.source,
		processData:false,
		success:function(data,textStatus,jqXHR) {
			me.onLoadCore(true,w,jqXHR.responseText,me.source,jqXHR);
		},
		error:function(jqXHR,textStatus,errorThrown) {
			me.onLoadCore(false,w,null,me.source,jqXHR);
		}
	};
	ajaxReq(options);
	return false;
};

config.macros.upgrade.onLoadCore = function(status,params,responseText,url,xhr)
{
	var me = config.macros.upgrade;
	var w = params;
	var errMsg;
	if(!status)
		errMsg = me.errorLoadingCore;
	var newVer = me.extractVersion(responseText);
	if(!newVer)
		errMsg = me.errorCoreFormat;
	if(errMsg) {
		w.setButtons([],errMsg);
		alert(errMsg);
		return;
	}
	var onStartUpgrade = function(e) {
		w.setButtons([],me.statusSavingCore);
		var localPath = getLocalPath(document.location.toString());
		saveFile(localPath,responseText);
		w.setButtons([],me.statusReloadingCore);
		var backupPath = w.getValue("backupPath");
		var newLoc = document.location.toString() + "?time=" + new Date().convertToYYYYMMDDHHMM() + "#upgrade:[[" + encodeURI(backupPath) + "]]";
		window.setTimeout(function () {window.location = newLoc;},10);
	};
	var step2 = [me.step2Html_downgrade,me.step2Html_restore,me.step2Html_upgrade][compareVersions(version,newVer) + 1];
	w.addStep(me.step2Title,step2.format([formatVersion(newVer),formatVersion(version)]));
	w.setButtons([{caption: me.startLabel, tooltip: me.startPrompt, onClick: onStartUpgrade},{caption: me.cancelLabel, tooltip: me.cancelPrompt, onClick: me.onCancel}]);
};

config.macros.upgrade.onCancel = function(e)
{
	var me = config.macros.upgrade;
	var w = new Wizard(this);
	w.addStep(me.step3Title,me.step3Html);
	w.setButtons([]);
	return false;
};

config.macros.upgrade.extractVersion = function(upgradeFile)
{
	var re = /^var version = \{title: "([^"]+)", major: (\d+), minor: (\d+), revision: (\d+)(, beta: (\d+)){0,1}, date: new Date\("([^"]+)"\)/mg;
	var m = re.exec(upgradeFile);
	return m ? {title: m[1], major: m[2], minor: m[3], revision: m[4], beta: m[6], date: new Date(m[7])} : null;
};

function upgradeFrom(path)
{
	var importStore = new TiddlyWiki();
	var tw = loadFile(path);
	if(window.netscape !== undefined)
		tw = convertUTF8ToUnicode(tw);
	importStore.importTiddlyWiki(tw);
	importStore.forEachTiddler(function(title,tiddler) {
		if(!store.getTiddler(title)) {
			store.addTiddler(tiddler);
		}
	});
	refreshDisplay();
	saveChanges(); //# To create appropriate Markup* sections
	alert(config.messages.upgradeDone.format([formatVersion()]));
	window.location = window.location.toString().substr(0,window.location.toString().lastIndexOf("?"));
}

//--
//-- Sync macro
//--

// Synchronisation handlers
config.syncers = {};

// Sync state.
var currSync = null;

// sync macro
config.macros.sync.handler = function(place,macroName,params,wikifier,paramString,tiddler)
{
	if(!wikifier.isStatic)
		this.startSync(place);
};

config.macros.sync.cancelSync = function()
{
	currSync = null;
};

config.macros.sync.startSync = function(place)
{
	if(currSync)
		config.macros.sync.cancelSync();
	currSync = {};
	currSync.syncList = this.getSyncableTiddlers();
	currSync.syncTasks = this.createSyncTasks(currSync.syncList);
	this.preProcessSyncableTiddlers(currSync.syncList);
	var wizard = new Wizard();
	currSync.wizard = wizard;
	wizard.createWizard(place,this.wizardTitle);
	wizard.addStep(this.step1Title,this.step1Html);
	var markList = wizard.getElement("markList");
	var listWrapper = document.createElement("div");
	markList.parentNode.insertBefore(listWrapper,markList);
	currSync.listView = ListView.create(listWrapper,currSync.syncList,this.listViewTemplate);
	this.processSyncableTiddlers(currSync.syncList);
	wizard.setButtons([{caption: this.syncLabel, tooltip: this.syncPrompt, onClick: this.doSync}]);
};

config.macros.sync.getSyncableTiddlers = function()
{
	var list = [];
	store.forEachTiddler(function(title,tiddler) {
		var syncItem = {};
		syncItem.serverType = tiddler.getServerType();
		syncItem.serverHost = tiddler.fields['server.host'];
		if(syncItem.serverType && syncItem.serverHost) {
			syncItem.adaptor = new config.adaptors[syncItem.serverType]();
			syncItem.serverHost = syncItem.adaptor.fullHostName(syncItem.serverHost);
			syncItem.serverWorkspace = tiddler.fields['server.workspace'];
			syncItem.tiddler = tiddler;
			syncItem.title = tiddler.title;
			syncItem.isTouched = tiddler.isTouched();
			syncItem.selected = syncItem.isTouched;
			syncItem.syncStatus = config.macros.sync.syncStatusList[syncItem.isTouched ? "changedLocally" : "none"];
			syncItem.status = syncItem.syncStatus.text;
			list.push(syncItem);
		}
		});
	list.sort(function(a,b) {return a.title < b.title ? -1 : (a.title == b.title ? 0 : +1);});
	return list;
};

config.macros.sync.preProcessSyncableTiddlers = function(syncList)
{
	var i;
	for(i=0; i<syncList.length; i++) {
		var si = syncList[i];
		si.serverUrl = si.adaptor.generateTiddlerInfo(si.tiddler).uri;
	}
};

config.macros.sync.processSyncableTiddlers = function(syncList)
{
	var i;
	for(i=0; i<syncList.length; i++) {
		var si = syncList[i];
		if(si.syncStatus.display)
			si.rowElement.style.display = si.syncStatus.display;
		if(si.syncStatus.className)
			si.rowElement.className = si.syncStatus.className;
	}
};

config.macros.sync.createSyncTasks = function(syncList)
{
	var i,syncTasks = [];
	for(i=0; i<syncList.length; i++) {
		var si = syncList[i];
		var j,r = null;
		for(j=0; j<syncTasks.length; j++) {
			var cst = syncTasks[j];
			if(si.serverType == cst.serverType && si.serverHost == cst.serverHost && si.serverWorkspace == cst.serverWorkspace)
				r = cst;
		}
		if(r) {
			si.syncTask = r;
			r.syncItems.push(si);
		} else {
			si.syncTask = this.createSyncTask(si);
			syncTasks.push(si.syncTask);
		}
	}
	return syncTasks;
};

config.macros.sync.createSyncTask = function(syncItem)
{
	var st = {};
	st.serverType = syncItem.serverType;
	st.serverHost = syncItem.serverHost;
	st.serverWorkspace = syncItem.serverWorkspace;
	st.syncItems = [syncItem];

	var getTiddlerListCallback = function(context,sycnItems) {
		var me = config.macros.sync;
		if(!context.status) {
			displayMessage(context.statusText);
			return false;
		}
		syncItems = context.userParams;
		var i,tiddlers = context.tiddlers;
		for(i=0; i<syncItems.length; i++) {
			var si = syncItems[i];
			var f = tiddlers.findByField("title",si.title);
			if(f !== null) {
				if(tiddlers[f].fields['server.page.revision'] > si.tiddler.fields['server.page.revision']) {
					si.syncStatus = me.syncStatusList[si.isTouched ? 'changedBoth' : 'changedServer'];
				}
			} else {
				si.syncStatus = me.syncStatusList.notFound;
			}
			me.updateSyncStatus(si);
		}
		return true;
	};

	var openWorkspaceCallback = function(context,syncItems) {
		if(context.status) {
			context.adaptor.getTiddlerList(context,syncItems,getTiddlerListCallback);
			return true;
		}
		displayMessage(context.statusText);
		return false;
	};

	var context = {host:st.serverHost,workspace:st.serverWorkspace};
	syncItem.adaptor.openHost(st.serverHost);
	syncItem.adaptor.openWorkspace(st.serverWorkspace,context,st.syncItems,openWorkspaceCallback);
	return st;
};

config.macros.sync.updateSyncStatus = function(syncItem)
{
	var e = syncItem.colElements["status"];
	jQuery(e).empty();
	createTiddlyText(e,syncItem.syncStatus.text);
	syncItem.rowElement.style.display = syncItem.syncStatus.display;
	if(syncItem.syncStatus.className)
		syncItem.rowElement.className = syncItem.syncStatus.className;
};

config.macros.sync.doSync = function(e)
{
	var me = config.macros.sync;
	var getTiddlerCallback = function(context,syncItem) {
		if(syncItem) {
			var tiddler = context.tiddler;
			store.saveTiddler(tiddler.title,tiddler.title,tiddler.text,tiddler.modifier,tiddler.modified,tiddler.tags,tiddler.fields,true,tiddler.created);
			syncItem.syncStatus = me.syncStatusList.gotFromServer;
			me.updateSyncStatus(syncItem);
		}
	};
	var putTiddlerCallback = function(context,syncItem) {
		if(syncItem) {
			store.resetTiddler(context.title);
			syncItem.syncStatus = me.syncStatusList.putToServer;
			me.updateSyncStatus(syncItem);
		}
	};

	var rowNames = ListView.getSelectedRows(currSync.listView);
	var i,sl = me.syncStatusList;
	for(i=0; i<currSync.syncList.length; i++) {
		var si = currSync.syncList[i];
		if(rowNames.indexOf(si.title) != -1) {
			var errorMsg = "Error in doSync: ";
			try {
				var r = true;
				switch(si.syncStatus) {
				case sl.changedServer:
					var context = {"workspace": si.serverWorkspace};
					r = si.adaptor.getTiddler(si.title,context,si,getTiddlerCallback);
					break;
				case sl.notFound:
				case sl.changedLocally:
				case sl.changedBoth:
					r = si.adaptor.putTiddler(si.tiddler,null,si,putTiddlerCallback);
					break;
				default:
					break;
				}
				if(!r)
					displayMessage(errorMsg + r);
			} catch(ex) {
				if(ex.name == "TypeError")
					displayMessage("sync operation unsupported: " + ex.message);
				else
					displayMessage(errorMsg + ex.message);
			}
		}
	}
	return false;
};

//--
//-- Manager UI for groups of tiddlers
//--

config.macros.plugins.handler = function(place,macroName,params,wikifier,paramString)
{
	var wizard = new Wizard();
	wizard.createWizard(place,this.wizardTitle);
	wizard.addStep(this.step1Title,this.step1Html);
	var markList = wizard.getElement("markList");
	var listWrapper = document.createElement("div");
	markList.parentNode.insertBefore(listWrapper,markList);
	listWrapper.setAttribute("refresh","macro");
	listWrapper.setAttribute("macroName","plugins");
	listWrapper.setAttribute("params",paramString);
	this.refresh(listWrapper,paramString);
};

config.macros.plugins.refresh = function(listWrapper,params)
{
	var me = config.macros.plugins;
	var wizard = new Wizard(listWrapper);
	var selectedRows = [];
	ListView.forEachSelector(listWrapper,function(e,rowName) {
			if(e.checked)
				selectedRows.push(e.getAttribute("rowName"));
		});
	jQuery(listWrapper).empty();
	params = params.parseParams("anon");
	var plugins = installedPlugins.slice(0);
	var t,tiddler,p;
	var configTiddlers = store.getTaggedTiddlers("systemConfig");
	for(t=0; t<configTiddlers.length; t++) {
		tiddler = configTiddlers[t];
		if(plugins.findByField("title",tiddler.title) == null) {
			p = getPluginInfo(tiddler);
			p.executed = false;
			p.log.splice(0,0,this.skippedText);
			plugins.push(p);
		}
	}
	for(t=0; t<plugins.length; t++) {
		p = plugins[t];
		p.size = p.tiddler.text ? p.tiddler.text.length : 0;
		p.forced = p.tiddler.isTagged("systemConfigForce");
		p.disabled = p.tiddler.isTagged("systemConfigDisable");
		p.Selected = selectedRows.indexOf(plugins[t].title) != -1;
	}
	if(plugins.length == 0) {
		createTiddlyElement(listWrapper,"em",null,null,this.noPluginText);
		wizard.setButtons([]);
	} else {
		var template = readOnly ? this.listViewTemplateReadOnly : this.listViewTemplate;
		var listView = ListView.create(listWrapper,plugins,template,this.onSelectCommand);
		wizard.setValue("listView",listView);
		if(!readOnly) {
			wizard.setButtons([
				{caption: me.removeLabel, tooltip: me.removePrompt, onClick: me.doRemoveTag},
				{caption: me.deleteLabel, tooltip: me.deletePrompt, onClick: me.doDelete}
			]);
		}
	}
};

config.macros.plugins.doRemoveTag = function(e)
{
	var wizard = new Wizard(this);
	var listView = wizard.getValue("listView");
	var rowNames = ListView.getSelectedRows(listView);
	if(rowNames.length == 0) {
		alert(config.messages.nothingSelected);
	} else {
		var t;
		for(t=0; t<rowNames.length; t++) {
			store.setTiddlerTag(rowNames[t],false,"systemConfig");
		}
		autoSaveChanges();
	}
};

config.macros.plugins.doDelete = function(e)
{
	var wizard = new Wizard(this);
	var listView = wizard.getValue("listView");
	var rowNames = ListView.getSelectedRows(listView);
	if(rowNames.length == 0) {
		alert(config.messages.nothingSelected);
	} else {
		if(confirm(config.macros.plugins.confirmDeleteText.format([rowNames.join(", ")]))) {
			var t;
			for(t=0; t<rowNames.length; t++) {
				store.removeTiddler(rowNames[t]);
				story.closeTiddler(rowNames[t],true);
			}
		}
		autoSaveChanges();
	}
};

//--
//-- Message area
//--

function getMessageDiv()
{
	var msgArea = document.getElementById("messageArea");
	if(!msgArea)
		return null;
	if(!msgArea.hasChildNodes())
		createTiddlyButton(createTiddlyElement(msgArea,"div",null,"messageToolbar"),
			config.messages.messageClose.text,
			config.messages.messageClose.tooltip,
			clearMessage);
	msgArea.style.display = "block";
	return createTiddlyElement(msgArea,"div");
}

function displayMessage(text,linkText)
{
	var e = getMessageDiv();
	if(!e) {
		alert(text);
		return;
	}
	if(linkText) {
		var link = createTiddlyElement(e,"a",null,null,text);
		link.href = linkText;
		link.target = "_blank";
	} else {
		e.appendChild(document.createTextNode(text));
	}
}

function clearMessage()
{
	var msgArea = document.getElementById("messageArea");
	if(msgArea) {
		jQuery(msgArea).empty();
		msgArea.style.display = "none";
	}
	return false;
}

//--
//-- Refresh mechanism
//--

config.notifyTiddlers = [
	{name: "SystemSettings", notify: onSystemSettingsChange},
	{name: "StyleSheetLayout", notify: refreshStyles},
	{name: "StyleSheetColors", notify: refreshStyles},
	{name: "StyleSheet", notify: refreshStyles},
	{name: "StyleSheetPrint", notify: refreshStyles},
	{name: "PageTemplate", notify: refreshPageTemplate},
	{name: "SiteTitle", notify: refreshPageTitle},
	{name: "SiteSubtitle", notify: refreshPageTitle},
	{name: "WindowTitle", notify: refreshPageTitle},
	{name: "ColorPalette", notify: refreshColorPalette},
	{name: null, notify: refreshDisplay}
];

config.refreshers = {
	link: function(e,changeList)
		{
		var title = e.getAttribute("tiddlyLink");
		refreshTiddlyLink(e,title);
		return true;
		},

	tiddler: function(e,changeList)
		{
		var title = e.getAttribute("tiddler");
		var template = e.getAttribute("template");
		if(changeList && (changeList.indexOf && changeList.indexOf(title) != -1) && !story.isDirty(title))
			story.refreshTiddler(title,template,true);
		else
			refreshElements(e,changeList);
		return true;
		},

	content: function(e,changeList)
		{
		var title = e.getAttribute("tiddler");
		var force = e.getAttribute("force");
		var args = e.getAttribute("args");
		if(force != null || changeList == null || (changeList.indexOf && changeList.indexOf(title) != -1)) {
			jQuery(e).empty();
			config.macros.tiddler.transclude(e,title,args);
			return true;
		} else
			return false;
		},

	macro: function(e,changeList)
		{
		var macro = e.getAttribute("macroName");
		var params = e.getAttribute("params");
		if(macro)
			macro = config.macros[macro];
		if(macro && macro.refresh)
			macro.refresh(e,params);
		return true;
		}
};

config.refresherData = {
	styleSheet: "StyleSheet",
	defaultStyleSheet: "StyleSheet",
	pageTemplate: "PageTemplate",
	defaultPageTemplate: "PageTemplate",
	colorPalette: "ColorPalette",
	defaultColorPalette: "ColorPalette"
};

function refreshElements(root,changeList)
{
	var c,nodes = root.childNodes;
	for(c=0; c<nodes.length; c++) {
		var e = nodes[c], type = null;
		if(e.getAttribute && (e.tagName ? e.tagName != "IFRAME" : true))
			type = e.getAttribute("refresh");
		var refresher = config.refreshers[type];
		var refreshed = false;
		if(refresher != undefined)
			refreshed = refresher(e,changeList);
		if(e.hasChildNodes() && !refreshed)
			refreshElements(e,changeList);
	}
}

function applyHtmlMacros(root,tiddler)
{
	var e = root.firstChild;
	while(e) {
		var nextChild = e.nextSibling;
		if(e.getAttribute) {
			var macro = e.getAttribute("macro");
			if(macro) {
				e.removeAttribute("macro");
				var params = "";
				var p = macro.indexOf(" ");
				if(p != -1) {
					params = macro.substr(p+1);
					macro = macro.substr(0,p);
				}
				invokeMacro(e,macro,params,null,tiddler);
			}
		}
		if(e.hasChildNodes())
			applyHtmlMacros(e,tiddler);
		e = nextChild;
	}
}

function refreshPageTemplate(title)
{
	var stash = jQuery("<div/>").appendTo("body").hide()[0];
	var display = story.getContainer();
	var nodes,t;
	if(display) {
		nodes = display.childNodes;
		for(t=nodes.length-1; t>=0; t--)
			stash.appendChild(nodes[t]);
	}
	var wrapper = document.getElementById("contentWrapper");

	var isAvailable = function(title) {
		var s = title ? title.indexOf(config.textPrimitives.sectionSeparator) : -1;
		if(s!=-1)
			title = title.substr(0,s);
		return store.tiddlerExists(title) || store.isShadowTiddler(title);
	};
	if(!title || !isAvailable(title))
		title = config.refresherData.pageTemplate;
	if(!isAvailable(title))
		title = config.refresherData.defaultPageTemplate; //# this one is always avaialable
	wrapper.innerHTML = store.getRecursiveTiddlerText(title,null,10);
	applyHtmlMacros(wrapper);
	refreshElements(wrapper);
	display = story.getContainer();
	jQuery(display).empty();
	if(!display)
		display = createTiddlyElement(wrapper,"div",story.containerId());
	nodes = stash.childNodes;
	for(t=nodes.length-1; t>=0; t--)
		display.appendChild(nodes[t]);
	jQuery(stash).remove();
}

function refreshDisplay(hint)
{
	if(typeof hint == "string")
		hint = [hint];
	var e = document.getElementById("contentWrapper");
	refreshElements(e,hint);
	if(backstage.isPanelVisible()) {
		e = document.getElementById("backstage");
		refreshElements(e,hint);
	}
}

function refreshPageTitle()
{
	document.title = getPageTitle();
}

function getPageTitle()
{
	return wikifyPlainText(store.getTiddlerText("WindowTitle",""),null,tiddler);
}

function refreshStyles(title,doc)
{
	setStylesheet(title == null ? "" : store.getRecursiveTiddlerText(title,"",10),title,doc || document);
}

function refreshColorPalette(title)
{
	if(!startingUp)
		refreshAll();
}

function refreshAll()
{
	refreshPageTemplate();
	refreshDisplay();
	refreshStyles("StyleSheetLayout");
	refreshStyles("StyleSheetColors");
	refreshStyles(config.refresherData.styleSheet);
	refreshStyles("StyleSheetPrint");
}

//--
//-- Option handling
//--

config.optionHandlers = {
	'txt': {
		get: function(name) {return encodeCookie(config.options[name].toString());},
		set: function(name,value) {config.options[name] = decodeCookie(value);}
	},
	'chk': {
		get: function(name) {return config.options[name] ? 'true' : 'false';},
		set: function(name,value) {config.options[name] = value == 'true';}
	}
};

function setOption(name,value)
{
	var optType = name.substr(0,3);
	if(config.optionHandlers[optType] && config.optionHandlers[optType].set)
		config.optionHandlers[optType].set(name,value);
}

// Gets the value of an option as a string. Most code should just read from config.options.* directly
function getOption(name)
{
	var optType = name.substr(0,3);
	return config.optionHandlers[optType] && config.optionHandlers[optType].get ? config.optionHandlers[optType].get(name) : null;
}

function loadOptions()
{
	if(safeMode)
		return;
	loadCookies();
	loadSystemSettings();
}
// @Deprecated; retained for backwards compatibility
var loadOptionsCookie = loadOptions;

function getCookies()
{
	var cookieList = document.cookie.split(';');
	var i,cookies = {};
	for(i=0; i<cookieList.length; i++) {
		var p = cookieList[i].indexOf('=');
		if(p != -1) {
			var name = cookieList[i].substr(0,p).trim();
			var value = cookieList[i].substr(p+1).trim();
			cookies[name] = value;
		}
	}
	return cookies;
}

function loadCookies()
{
	var i,cookies = getCookies();
	if(cookies['TiddlyWiki']) {
		cookies = cookies['TiddlyWiki'].decodeHashMap();
	}
	for(i in cookies) {
		if(config.optionsSource[i] != 'setting') {
			setOption(i,cookies[i]);
		}
	}
}

function loadSystemSettings()
{
	var key,settings = store.calcAllSlices('SystemSettings');
	config.optionsSource = {};
	for(key in settings) {
		setOption(key,settings[key]);
		config.optionsSource[key] = 'setting';
	}
}

function onSystemSettingsChange()
{
	if(!startingUp) {
		loadSystemSettings();
	}
}

function saveOption(name)
{
	if(safeMode)
		return;
	if(name.match(/[()\s]/g, '_')) {
		alert(config.messages.invalidCookie.format([name]));
		return;
	}
	saveCookie(name);
	if(config.optionsSource[name] == 'setting') {
		saveSystemSetting(name,true);
	}
}
// @Deprecated; retained for backwards compatibility
var saveOptionCookie = saveOption;

function removeCookie(name)
{
	document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 UTC; path=/;';
}

function saveCookie(name)
{
	var key,cookies = {};
	for(key in config.options) {
		var value = getOption(key);
		value = value == null ? 'false' : value;
		cookies[key] = value;
	}
	document.cookie = 'TiddlyWiki=' + String.encodeHashMap(cookies) + '; expires=Fri, 1 Jan 2038 12:00:00 UTC; path=/';
	cookies = getCookies();
	var c;
	for(c in cookies) {
		var optType = c.substr(0,3);
		if(config.optionHandlers[optType])
			removeCookie(c);
	}
}

var systemSettingSave;
function commitSystemSettings(storeWasDirty)
{
	if(systemSettingSave) {
		window.clearTimeout(systemSettingSave);
	}
	systemSettingSave = window.setTimeout(function() {
		var tiddler = store.getTiddler('SystemSettings');
		if(storeWasDirty == false && story.areAnyDirty() == false) {
			saveChanges(null,[tiddler]);
		} else {
			autoSaveChanges(null,[tiddler]);
		}
	}, 1000);
}

function saveSystemSetting(name,saveFile)
{
	var title = 'SystemSettings';
	var slice = store.getTiddlerSlice(title,name);
	if(readOnly || slice === getOption(name)) {
		return; //# don't save if read-only or the option hasn't changed
	}
	var slices = store.calcAllSlices(title);
	var key;
	for(key in config.optionsSource) {
		var value = getOption(key) || '';
		if(slices[key] !== value) {
			slices[key] = value;
		}
	}
	var text = [];
	for(key in slices) {
		text.push('%0: %1'.format([key,slices[key]]));
	}
	text = text.sort().join('\n');
	var storeWasDirty = store.isDirty();
	var tiddler = store.getTiddler(title);
	if(tiddler) {
		tiddler.text = text;
		tiddler = store.saveTiddler(tiddler);
	} else {
		tiddler = store.saveTiddler(title,title,text,'System',new Date(),['excludeLists'],config.defaultCustomFields);
	}
	if(saveFile) {
		commitSystemSettings(storeWasDirty);
	}
}

function encodeCookie(s)
{
	return escape(convertUnicodeToHtmlEntities(s));
}

function decodeCookie(s)
{
	s = unescape(s);
	var re = /&#[0-9]{1,5};/g;
	return s.replace(re,function($0) {return String.fromCharCode(eval($0.replace(/[&#;]/g,'')));});
}

config.macros.option.genericCreate = function(place,type,opt,className,desc)
{
	var typeInfo = config.macros.option.types[type];
	var c = document.createElement(typeInfo.elementType);
	if(typeInfo.typeValue)
		c.setAttribute('type',typeInfo.typeValue);
	c[typeInfo.eventName] = typeInfo.onChange;
	c.setAttribute('option',opt);
	c.className = className || typeInfo.className;
	if(config.optionsDesc[opt])
		c.setAttribute('title',config.optionsDesc[opt]);
	place.appendChild(c);
	if(desc != 'no')
		createTiddlyText(place,config.optionsDesc[opt] || opt);
	c[typeInfo.valueField] = config.options[opt];
	return c;
};

config.macros.option.genericOnChange = function(e)
{
	var opt = this.getAttribute('option');
	if(opt) {
		var optType = opt.substr(0,3);
		var handler = config.macros.option.types[optType];
		if(handler.elementType && handler.valueField)
			config.macros.option.propagateOption(opt,handler.valueField,this[handler.valueField],handler.elementType,this);
	}
	return true;
};

config.macros.option.types = {
	'txt': {
		elementType: 'input',
		valueField: 'value',
		eventName: 'onchange',
		className: 'txtOptionInput',
		create: config.macros.option.genericCreate,
		onChange: config.macros.option.genericOnChange
	},
	'chk': {
		elementType: 'input',
		valueField: 'checked',
		eventName: 'onclick',
		className: 'chkOptionInput',
		typeValue: 'checkbox',
		create: config.macros.option.genericCreate,
		onChange: config.macros.option.genericOnChange
	}
};

config.macros.option.propagateOption = function(opt,valueField,value,elementType,elem)
{
	config.options[opt] = value;
	saveOption(opt);
	var t,nodes = document.getElementsByTagName(elementType);
	for(t=0; t<nodes.length; t++) {
		var optNode = nodes[t].getAttribute('option');
		if(opt == optNode && nodes[t]!=elem)
			nodes[t][valueField] = value;
	}
};

config.macros.option.handler = function(place,macroName,params,wikifier,paramString)
{
	params = paramString.parseParams('anon',null,true,false,false);
	var opt = (params[1] && params[1].name == 'anon') ? params[1].value : getParam(params,'name',null);
	var className = (params[2] && params[2].name == 'anon') ? params[2].value : getParam(params,'class',null);
	var desc = getParam(params,'desc','no');
	var type = opt.substr(0,3);
	var h = config.macros.option.types[type];
	if(h && h.create)
		h.create(place,type,opt,className,desc);
};

config.macros.options.handler = function(place,macroName,params,wikifier,paramString)
{
	params = paramString.parseParams('anon',null,true,false,false);
	var showUnknown = getParam(params,'showUnknown','no');
	var wizard = new Wizard();
	wizard.createWizard(place,this.wizardTitle);
	wizard.addStep(this.step1Title,this.step1Html);
	var markList = wizard.getElement('markList');
	var chkUnknown = wizard.getElement('chkUnknown');
	chkUnknown.checked = showUnknown == 'yes';
	chkUnknown.onchange = this.onChangeUnknown;
	var listWrapper = document.createElement('div');
	markList.parentNode.insertBefore(listWrapper,markList);
	wizard.setValue('listWrapper',listWrapper);
	this.refreshOptions(listWrapper,showUnknown == 'yes');
};

config.macros.options.refreshOptions = function(listWrapper,showUnknown)
{
	var n,opts = [];
	for(n in config.options) {
		var opt = {};
		opt.option = '';
		opt.name = n;
		opt.lowlight = !config.optionsDesc[n];
		opt.description = opt.lowlight ? this.unknownDescription : config.optionsDesc[n];
		if(!opt.lowlight || showUnknown)
			opts.push(opt);
	}
	opts.sort(function(a,b) {return a.name.substr(3) < b.name.substr(3) ? -1 : (a.name.substr(3) == b.name.substr(3) ? 0 : +1);});
	ListView.create(listWrapper,opts,this.listViewTemplate);
	for(n=0; n<opts.length; n++) {
		var type = opts[n].name.substr(0,3);
		var h = config.macros.option.types[type];
		if(h && h.create) {
			h.create(opts[n].colElements['option'],type,opts[n].name,null,'no');
		}
	}
};

config.macros.options.onChangeUnknown = function(e)
{
	var wizard = new Wizard(this);
	var listWrapper = wizard.getValue('listWrapper');
	jQuery(listWrapper).empty();
	config.macros.options.refreshOptions(listWrapper,this.checked);
	return false;
};

//--
//-- Saving
//--

var saveUsingSafari = false;

var startSaveArea = '<div id="' + 'storeArea">'; // Split up into two so that indexOf() of this source doesn't find it
var startSaveAreaRE = /<((div)|(DIV)) ((id)|(ID))=["']?storeArea['"]?>/; // Used for IE6
var endSaveArea = '</d' + 'iv>';
var endSaveAreaCaps = '</D' + 'IV>';

// If there are unsaved changes, force the user to confirm before exitting
function confirmExit()
{
	hadConfirmExit = true;
	if((store && store.isDirty && store.isDirty()) || (story && story.areAnyDirty && story.areAnyDirty()))
		return config.messages.confirmExit;
}

// Give the user a chance to save changes before exitting
function checkUnsavedChanges()
{
	if(store && store.isDirty && store.isDirty() && window.hadConfirmExit === false) {
		if(confirm(config.messages.unsavedChangesWarning))
			saveChanges();
	}
}

function updateLanguageAttribute(s)
{
	if(config.locale) {
		var mRE = /(<html(?:.*?)?)(?: xml:lang\="([a-z]+)")?(?: lang\="([a-z]+)")?>/;
		var m = mRE.exec(s);
		if(m) {
			var t = m[1];
			if(m[2])
				t += ' xml:lang="' + config.locale + '"';
			if(m[3])
				t += ' lang="' + config.locale + '"';
			t += ">";
			s = s.substr(0,m.index) + t + s.substr(m.index+m[0].length);
		}
	}
	return s;
}

function updateMarkupBlock(s,blockName,tiddlerName)
{
	return s.replaceChunk(
			"<!--%0-START-->".format([blockName]),
			"<!--%0-END-->".format([blockName]),
			"\n" + convertUnicodeToFileFormat(store.getRecursiveTiddlerText(tiddlerName,"")) + "\n");
}

function updateOriginal(original,posDiv,localPath)
{
	if(!posDiv)
		posDiv = locateStoreArea(original);
	if(!posDiv) {
		alert(config.messages.invalidFileError.format([localPath]));
		return null;
	}
	var revised = original.substr(0,posDiv[0] + startSaveArea.length) + "\n" +
				convertUnicodeToFileFormat(store.allTiddlersAsHtml()) + "\n" +
				original.substr(posDiv[1]);
	var newSiteTitle = convertUnicodeToFileFormat(getPageTitle()).htmlEncode();
	revised = revised.replaceChunk("<title"+">","</title"+">"," " + newSiteTitle + " ");
	revised = updateLanguageAttribute(revised);
	revised = updateMarkupBlock(revised,"PRE-HEAD","MarkupPreHead");
	revised = updateMarkupBlock(revised,"POST-HEAD","MarkupPostHead");
	revised = updateMarkupBlock(revised,"PRE-BODY","MarkupPreBody");
	revised = updateMarkupBlock(revised,"POST-SCRIPT","MarkupPostBody");
	return revised;
}

function locateStoreArea(original)
{
	// Locate the storeArea divs
	if(!original)
		return null;
	var posOpeningDiv = original.search(startSaveAreaRE);
	var limitClosingDiv = original.indexOf("<"+"!--POST-STOREAREA--"+">");
	if(limitClosingDiv == -1)
		limitClosingDiv = original.indexOf("<"+"!--POST-BODY-START--"+">");
	var start = limitClosingDiv == -1 ? original.length : limitClosingDiv;
	var posClosingDiv = original.lastIndexOf(endSaveArea,start);
	if(posClosingDiv == -1)
		posClosingDiv = original.lastIndexOf(endSaveAreaCaps,start);
	return (posOpeningDiv != -1 && posClosingDiv != -1) ? [posOpeningDiv,posClosingDiv] : null;
}

function autoSaveChanges(onlyIfDirty,tiddlers)
{
	if(config.options.chkAutoSave)
		saveChanges(onlyIfDirty,tiddlers);
}

function loadOriginal(localPath)
{
	return loadFile(localPath);
}

// Save this tiddlywiki with the pending changes
function saveChanges(onlyIfDirty,tiddlers)
{
	if(onlyIfDirty && !store.isDirty())
		return;
	clearMessage();
	var t0 = new Date();
	var msg = config.messages;
	var originalPath = document.location.toString();
	if(originalPath.substr(0,5) != "file:") {
		alert(msg.notFileUrlError);
		if(store.tiddlerExists(msg.saveInstructions))
			story.displayTiddler(null,msg.saveInstructions);
		return;
	}
	var localPath = getLocalPath(originalPath);
	var original = loadOriginal(localPath);
	if(original == null) {
		alert(msg.cantSaveError);
		if(store.tiddlerExists(msg.saveInstructions))
			story.displayTiddler(null,msg.saveInstructions);
		return;
	}
	var posDiv = locateStoreArea(original);
	if(!posDiv) {
		alert(msg.invalidFileError.format([localPath]));
		return;
	}
	saveMain(localPath,original,posDiv);
	if(config.options.chkSaveBackups)
		saveBackup(localPath,original);
	if(config.options.chkSaveEmptyTemplate)
		saveEmpty(localPath,original,posDiv);
	if(config.options.chkGenerateAnRssFeed && saveRss instanceof Function)
		saveRss(localPath);
	if(config.options.chkDisplayInstrumentation)
		displayMessage("saveChanges " + (new Date()-t0) + " ms");
}

function saveMain(localPath,original,posDiv)
{
	var save;
	try {
		var revised = updateOriginal(original,posDiv,localPath);
		save = saveFile(localPath,revised);
	} catch (ex) {
		showException(ex);
	}
	if(save) {
		displayMessage(config.messages.mainSaved,"file://" + localPath);
		store.setDirty(false);
	} else {
		alert(config.messages.mainFailed);
	}
}

function saveBackup(localPath,original)
{
	var backupPath = getBackupPath(localPath);
	var backup = copyFile(backupPath,localPath);
	if(!backup)
		backup = saveFile(backupPath,original);
	if(backup)
		displayMessage(config.messages.backupSaved,"file://" + backupPath);
	else
		alert(config.messages.backupFailed);
}

function saveEmpty(localPath,original,posDiv)
{
	var emptyPath,p;
	if((p = localPath.lastIndexOf("/")) != -1)
		emptyPath = localPath.substr(0,p) + "/";
	else if((p = localPath.lastIndexOf("\\")) != -1)
		emptyPath = localPath.substr(0,p) + "\\";
	else
		emptyPath = localPath + ".";
	emptyPath += "empty.html";
	var empty = original.substr(0,posDiv[0] + startSaveArea.length) + original.substr(posDiv[1]);
	var emptySave = saveFile(emptyPath,empty);
	if(emptySave)
		displayMessage(config.messages.emptySaved,"file://" + emptyPath);
	else
		alert(config.messages.emptyFailed);
}

function getLocalPath(origPath)
{
	var originalPath = convertUriToUTF8(origPath,config.options.txtFileSystemCharSet);
	// Remove any location or query part of the URL
	var argPos = originalPath.indexOf("?");
	if(argPos != -1)
		originalPath = originalPath.substr(0,argPos);
	var hashPos = originalPath.indexOf("#");
	if(hashPos != -1)
		originalPath = originalPath.substr(0,hashPos);
	// Convert file://localhost/ to file:///
	if(originalPath.indexOf("file://localhost/") == 0)
		originalPath = "file://" + originalPath.substr(16);
	// Convert to a native file format
	var localPath;
	if(originalPath.charAt(9) == ":") // pc local file
		localPath = unescape(originalPath.substr(8)).replace(new RegExp("/","g"),"\\");
	else if(originalPath.indexOf("file://///") == 0) // FireFox pc network file
		localPath = "\\\\" + unescape(originalPath.substr(10)).replace(new RegExp("/","g"),"\\");
	else if(originalPath.indexOf("file:///") == 0) // mac/unix local file
		localPath = unescape(originalPath.substr(7));
	else if(originalPath.indexOf("file:/") == 0) // mac/unix local file
		localPath = unescape(originalPath.substr(5));
	else // pc network file
		localPath = "\\\\" + unescape(originalPath.substr(7)).replace(new RegExp("/","g"),"\\");
	return localPath;
}

function getBackupPath(localPath,title,extension)
{
	var slash = "\\";
	var dirPathPos = localPath.lastIndexOf("\\");
	if(dirPathPos == -1) {
		dirPathPos = localPath.lastIndexOf("/");
		slash = "/";
	}
	var backupFolder = config.options.txtBackupFolder;
	if(!backupFolder || backupFolder == "")
		backupFolder = ".";
	var backupPath = localPath.substr(0,dirPathPos) + slash + backupFolder + localPath.substr(dirPathPos);
	backupPath = backupPath.substr(0,backupPath.lastIndexOf(".")) + ".";
	if(title)
		backupPath += title.replace(/[\\\/\*\?\":<> ]/g,"_") + ".";
	backupPath += (new Date()).convertToYYYYMMDDHHMMSSMMM() + "." + (extension || "html");
	return backupPath;
}

//--
//-- RSS Saving
//--

function saveRss(localPath)
{
	var rssPath = localPath.substr(0,localPath.lastIndexOf(".")) + ".xml";
	if(saveFile(rssPath,convertUnicodeToFileFormat(generateRss())))
		displayMessage(config.messages.rssSaved,"file://" + rssPath);
	else
		alert(config.messages.rssFailed);
}

tiddlerToRssItem = function(tiddler,uri)
{
	var s = "<title" + ">" + tiddler.title.htmlEncode() + "</title" + ">\n";
	s += "<description>" + wikifyStatic(tiddler.text,null,tiddler).htmlEncode() + "</description>\n";
	var i;
	for(i=0; i<tiddler.tags.length; i++)
		s += "<category>" + tiddler.tags[i] + "</category>\n";
	s += "<link>" + uri + "#" + encodeURIComponent(String.encodeTiddlyLink(tiddler.title)) + "</link>\n";
	s +="<pubDate>" + tiddler.modified.toGMTString() + "</pubDate>\n";
	return s;
};

function generateRss()
{
	var s = [];
	var d = new Date();
	var u = store.getTiddlerText("SiteUrl");
	// Assemble the header
	s.push("<" + "?xml version=\"1.0\"?" + ">");
	s.push("<rss version=\"2.0\">");
	s.push("<channel>");
	s.push("<title" + ">" + wikifyPlainText(store.getTiddlerText("SiteTitle",""),null,tiddler).htmlEncode() + "</title" + ">");
	if(u)
		s.push("<link>" + u.htmlEncode() + "</link>");
	s.push("<description>" + wikifyPlainText(store.getTiddlerText("SiteSubtitle",""),null,tiddler).htmlEncode() + "</description>");
	s.push("<language>" + config.locale + "</language>");
	s.push("<copyright>Copyright " + d.getFullYear() + " " + config.options.txtUserName.htmlEncode() + "</copyright>");
	s.push("<pubDate>" + d.toGMTString() + "</pubDate>");
	s.push("<lastBuildDate>" + d.toGMTString() + "</lastBuildDate>");
	s.push("<docs>http://blogs.law.harvard.edu/tech/rss</docs>");
	s.push("<generator>TiddlyWiki " + formatVersion() + "</generator>");
	// The body
	var tiddlers = store.getTiddlers("modified","excludeLists");
	var i,n = config.numRssItems > tiddlers.length ? 0 : tiddlers.length-config.numRssItems;
	for(i=tiddlers.length-1; i>=n; i--) {
		s.push("<item>\n" + tiddlerToRssItem(tiddlers[i],u) + "\n</item>");
	}
	// And footer
	s.push("</channel>");
	s.push("</rss>");
	// Save it all
	return s.join("\n");
}

//--
//-- Filesystem code
//--

function convertUTF8ToUnicode(u)
{
	return config.browser.isOpera || !window.netscape ? manualConvertUTF8ToUnicode(u) : mozConvertUTF8ToUnicode(u);
}

function manualConvertUTF8ToUnicode(utf)
{
	var uni = utf;
	var src = 0;
	var dst = 0;
	var b1, b2, b3;
	var c;
	while(src < utf.length) {
		b1 = utf.charCodeAt(src++);
		if(b1 < 0x80) {
			dst++;
		} else if(b1 < 0xE0) {
			b2 = utf.charCodeAt(src++);
			c = String.fromCharCode(((b1 & 0x1F) << 6) | (b2 & 0x3F));
			uni = uni.substring(0,dst++).concat(c,utf.substr(src));
		} else {
			b2 = utf.charCodeAt(src++);
			b3 = utf.charCodeAt(src++);
			c = String.fromCharCode(((b1 & 0xF) << 12) | ((b2 & 0x3F) << 6) | (b3 & 0x3F));
			uni = uni.substring(0,dst++).concat(c,utf.substr(src));
		}
	}
	return uni;
}

function mozConvertUTF8ToUnicode(u)
{
	try {
		netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
		converter.charset = "UTF-8";
	} catch(ex) {
		return manualConvertUTF8ToUnicode(u);
	} // fallback
	var s = converter.ConvertToUnicode(u);
	var fin = converter.Finish();
	return fin.length > 0 ? s+fin : s;
}

function convertUnicodeToFileFormat(s)
{
	return config.browser.isOpera || !window.netscape ? (config.browser.isIE ? convertUnicodeToHtmlEntities(s) : s) : mozConvertUnicodeToUTF8(s);
}

function convertUnicodeToHtmlEntities(s)
{
	var re = /[^\u0000-\u007F]/g;
	return s.replace(re,function($0) {return "&#" + $0.charCodeAt(0).toString() + ";";});
}

function convertUnicodeToUTF8(s)
{
// return convertUnicodeToFileFormat to allow plugin migration
	return convertUnicodeToFileFormat(s);
}

function manualConvertUnicodeToUTF8(s)
{
	return unescape(encodeURIComponent(s));
}

function mozConvertUnicodeToUTF8(s)
{
	try {
		netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		var converter = Components.classes["@mozilla.org/intl/scriptableunicodeconverter"].createInstance(Components.interfaces.nsIScriptableUnicodeConverter);
		converter.charset = "UTF-8";
	} catch(ex) {
		return manualConvertUnicodeToUTF8(s);
	} // fallback
	var u = converter.ConvertFromUnicode(s);
	var fin = converter.Finish();
	return fin.length > 0 ? u + fin : u;
}

function convertUriToUTF8(uri,charSet)
{
	if(window.netscape == undefined || charSet == undefined || charSet == "")
		return uri;
	try {
		netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		var converter = Components.classes["@mozilla.org/intl/utf8converterservice;1"].getService(Components.interfaces.nsIUTF8ConverterService);
	} catch(ex) {
		return uri;
	}
	return converter.convertURISpecToUTF8(uri,charSet);
}

function copyFile(dest,source)
{
	return config.browser.isIE ? ieCopyFile(dest,source) : false;
}

function saveFile(fileUrl,content)
{
	var r = mozillaSaveFile(fileUrl,content);
	if(!r)
		r = ieSaveFile(fileUrl,content);
	if(!r)
		r = javaSaveFile(fileUrl,content);
	return r;
}

function loadFile(fileUrl)
{
	var r = mozillaLoadFile(fileUrl);
	if((r == null) || (r == false))
		r = ieLoadFile(fileUrl);
	if((r == null) || (r == false))
		r = javaLoadFile(fileUrl);
	return r;
}

function ieCreatePath(path)
{
	try {
		var fso = new ActiveXObject("Scripting.FileSystemObject");
	} catch(ex) {
		return null;
	}

	var pos = path.lastIndexOf("\\");
	if(pos==-1)
		pos = path.lastIndexOf("/");
	if(pos!=-1)
		path = path.substring(0,pos+1);

	var scan = [path];
	var parent = fso.GetParentFolderName(path);
	while(parent && !fso.FolderExists(parent)) {
		scan.push(parent);
		parent = fso.GetParentFolderName(parent);
	}

	for(i=scan.length-1;i>=0;i--) {
		if(!fso.FolderExists(scan[i])) {
			fso.CreateFolder(scan[i]);
		}
	}
	return true;
}

// Returns null if it can't do it, false if there's an error, true if it saved OK
function ieSaveFile(filePath,content)
{
	ieCreatePath(filePath);
	try {
		var fso = new ActiveXObject("Scripting.FileSystemObject");
	} catch(ex) {
		return null;
	}
	var file = fso.OpenTextFile(filePath,2,-1,0);
	file.Write(content);
	file.Close();
	return true;
}

// Returns null if it can't do it, false if there's an error, or a string of the content if successful
function ieLoadFile(filePath)
{
	try {
		var fso = new ActiveXObject("Scripting.FileSystemObject");
		var file = fso.OpenTextFile(filePath,1);
		var content = file.ReadAll();
		file.Close();
	} catch(ex) {
		return null;
	}
	return content;
}

function ieCopyFile(dest,source)
{
	ieCreatePath(dest);
	try {
		var fso = new ActiveXObject("Scripting.FileSystemObject");
		fso.GetFile(source).Copy(dest);
	} catch(ex) {
		return false;
	}
	return true;
}

// Returns null if it can't do it, false if there's an error, true if it saved OK
function mozillaSaveFile(filePath,content)
{
	if(window.Components) {
		try {
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
			file.initWithPath(filePath);
			if(!file.exists())
				file.create(0,0x01B4);// 0x01B4 = 0664
			var out = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
			out.init(file,0x22,0x04,null);
			out.write(content,content.length);
			out.flush();
			out.close();
			return true;
		} catch(ex) {
			return false;
		}
	}
	return null;
}

// Returns null if it can't do it, false if there's an error, or a string of the content if successful
function mozillaLoadFile(filePath)
{
	if(window.Components) {
		try {
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
			file.initWithPath(filePath);
			if(!file.exists())
				return null;
			var inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
			inputStream.init(file,0x01,0x04,null);
			var sInputStream = Components.classes["@mozilla.org/scriptableinputstream;1"].createInstance(Components.interfaces.nsIScriptableInputStream);
			sInputStream.init(inputStream);
			var contents = sInputStream.read(sInputStream.available());
			sInputStream.close();
			inputStream.close();
			return contents;
		} catch(ex) {
			return false;
		}
	}
	return null;
}

function javaUrlToFilename(url)
{
	var f = "//localhost";
	if(url.indexOf(f) == 0)
		return url.substring(f.length);
	var i = url.indexOf(":");
	return i > 0 ? url.substring(i-1) : url;
}

function javaSaveFile(filePath,content)
{
	try {
		if(document.applets["TiddlySaver"])
			return document.applets["TiddlySaver"].saveFile(javaUrlToFilename(filePath),"UTF-8",content);
	} catch(ex) {
	}
	try {
		var s = new java.io.PrintStream(new java.io.FileOutputStream(javaUrlToFilename(filePath)));
		s.print(content);
		s.close();
	} catch(ex2) {
		return null;
	}
	return true;
}

function javaLoadFile(filePath)
{
	try {
		if(document.applets["TiddlySaver"]) {
			var ret = document.applets["TiddlySaver"].loadFile(javaUrlToFilename(filePath),"UTF-8");
			if(!ret)
				return null;
			return String(ret);
		}
	} catch(ex) {
	}
	var content = [];
	try {
		var r = new java.io.BufferedReader(new java.io.FileReader(javaUrlToFilename(filePath)));
		var line;
		while((line = r.readLine()) != null)
			content.push(String(line));
		r.close();
	} catch(ex2) {
		return null;
	}
	return content.join("\n");
}

//--
//-- Server adaptor base class
//--

function AdaptorBase()
{
	this.host = null;
	this.store = null;
	return this;
}

AdaptorBase.prototype.close = function()
{
	return true;
};

AdaptorBase.prototype.fullHostName = function(host)
{
	if(!host)
		return '';
	host = host.trim();
	if(!host.match(/:\/\//))
		host = 'http://' + host;
	if(host.substr(host.length-1) == '/')
		host = host.substr(0,host.length-1);
	return host;
};

AdaptorBase.minHostName = function(host)
{
	return host;
};

AdaptorBase.prototype.setContext = function(context,userParams,callback)
{
	if(!context) context = {};
	context.userParams = userParams;
	if(callback) context.callback = callback;
	context.adaptor = this;
	if(!context.host)
		context.host = this.host;
	context.host = this.fullHostName(context.host);
	if(!context.workspace)
		context.workspace = this.workspace;
	return context;
};

// Open the specified host
AdaptorBase.prototype.openHost = function(host,context,userParams,callback)
{
	this.host = host;
	context = this.setContext(context,userParams,callback);
	context.status = true;
	if(callback)
		window.setTimeout(function() {context.callback(context,userParams);},10);
	return true;
};

// Open the specified workspace
AdaptorBase.prototype.openWorkspace = function(workspace,context,userParams,callback)
{
	this.workspace = workspace;
	context = this.setContext(context,userParams,callback);
	context.status = true;
	if(callback)
		window.setTimeout(function() {callback(context,userParams);},10);
	return true;
};

//--
//-- Server adaptor for talking to static TiddlyWiki files
//--

function FileAdaptor()
{
}

FileAdaptor.prototype = new AdaptorBase();

FileAdaptor.serverType = 'file';
FileAdaptor.serverLabel = 'TiddlyWiki';

FileAdaptor.loadTiddlyWikiSuccess = function(context,jqXHR)
{
	context.status = true;
	context.adaptor.store = new TiddlyWiki();
	if(!context.adaptor.store.importTiddlyWiki(jqXHR.responseText)) {
		context.statusText = config.messages.invalidFileError.format([context.host]);
		context.status = false;
	}
	context.complete(context,context.userParams);
};

FileAdaptor.loadTiddlyWikiError = function(context,jqXHR)
{
	context.status = false;
	context.statusText = jqXHR.message;
	context.complete(context,context.userParams);
};

// Get the list of workspaces on a given server
FileAdaptor.prototype.getWorkspaceList = function(context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	context.workspaces = [{title:"(default)"}];
	context.status = true;
	if(callback)
		window.setTimeout(function() {callback(context,userParams);},10);
	return true;
};

// Gets the list of tiddlers within a given workspace
FileAdaptor.prototype.getTiddlerList = function(context,userParams,callback,filter)
{
	context = this.setContext(context,userParams,callback);
	if(!context.filter)
		context.filter = filter;
	context.complete = FileAdaptor.getTiddlerListComplete;
	if(this.store) {
		return context.complete(context,context.userParams);
	}
	var options = {
		type:"GET",
		url:context.host,
		processData:false,
		success:function(data,textStatus,jqXHR) {
			FileAdaptor.loadTiddlyWikiSuccess(context,jqXHR);
		},
		error:function(jqXHR,textStatus,errorThrown) {
			context.xhr = jqXHR;
			FileAdaptor.loadTiddlyWikiError(context,jqXHR);
		}
	};
	return ajaxReq(options);
};

FileAdaptor.getTiddlerListComplete = function(context,userParams)
{
	if(context.status) {
		if(context.filter) {
			context.tiddlers = context.adaptor.store.filterTiddlers(context.filter);
		} else {
			context.tiddlers = [];
			context.adaptor.store.forEachTiddler(function(title,tiddler) {context.tiddlers.push(tiddler);});
		}
		var i;
		for(i=0; i<context.tiddlers.length; i++) {
			context.tiddlers[i].fields['server.type'] = FileAdaptor.serverType;
			context.tiddlers[i].fields['server.host'] = AdaptorBase.minHostName(context.host);
			context.tiddlers[i].fields['server.page.revision'] = context.tiddlers[i].modified.convertToYYYYMMDDHHMM();
		}
		context.status = true;
	}
	if(context.callback) {
		window.setTimeout(function() {context.callback(context,userParams);},10);
	}
	return true;
};

FileAdaptor.prototype.generateTiddlerInfo = function(tiddler)
{
	var info = {};
	info.uri = tiddler.fields['server.host'] + "#" + tiddler.title;
	return info;
};

// Retrieve a tiddler from a given workspace on a given server
FileAdaptor.prototype.getTiddler = function(title,context,userParams,callback)
{
	context = this.setContext(context,userParams,callback);
	context.title = title;
	context.complete = FileAdaptor.getTiddlerComplete;
	if(context.adaptor.store) {
		return context.complete(context,context.userParams);
	}
	var options = {
		type:"GET",
		url:context.host,
		processData:false,
		success:function(data,textStatus,jqXHR) {
			FileAdaptor.loadTiddlyWikiSuccess(context,jqXHR);
		},
		error:function(jqXHR,textStatus,errorThrown) {
			FileAdaptor.loadTiddlyWikiError(context,jqXHR);
		}
	};
	return ajaxReq(options);
};

FileAdaptor.getTiddlerComplete = function(context,userParams)
{
	var t = context.adaptor.store.fetchTiddler(context.title);
	if(t) {
		t.fields['server.type'] = FileAdaptor.serverType;
		t.fields['server.host'] = AdaptorBase.minHostName(context.host);
		t.fields['server.page.revision'] = t.modified.convertToYYYYMMDDHHMM();
		context.tiddler = t;
		context.status = true;
	} else { //# tiddler does not exist in document
		context.status = false;
	}
	if(context.allowSynchronous) {
		context.isSynchronous = true;
		context.callback(context,userParams);
	} else {
		window.setTimeout(function() {context.callback(context,userParams);},10);
	}
	return true;
};

FileAdaptor.prototype.close = function()
{
	this.store = null;
};

config.adaptors[FileAdaptor.serverType] = FileAdaptor;

config.defaultAdaptor = FileAdaptor.serverType;

//--
//-- HTTP request code
//--

function ajaxReq(args)
{
	if(window.Components && window.netscape && window.netscape.security && document.location.protocol.indexOf("http") == -1)
		window.netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	return jQuery.ajax(args);
}

function httpReq(type,url,callback,params,headers,data,contentType,username,password,allowCache)
{
	var httpSuccess = function(xhr) {
		try {
			// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450
			return (!xhr.status && location.protocol === "file:") ||
				(xhr.status >= 200 && xhr.status < 300) ||
				xhr.status === 304 || xhr.status === 1223;
		} catch(e) {}
		return false;
	};

	var options = {
		type:type,
		url:url,
		processData:false,
		data:data,
		cache:!!allowCache,
		beforeSend: function(xhr) {
			var i;
			for(i in headers)
				xhr.setRequestHeader(i,headers[i]);
			xhr.setRequestHeader("X-Requested-With", "TiddlyWiki " + formatVersion());
		}
	};

	if(callback) {
		options.complete = function(xhr,textStatus) {
			if(httpSuccess(xhr))
				callback(true,params,xhr.responseText,url,xhr);
			else
				callback(false,params,null,url,xhr);
		};
	}
	if(contentType)
		options.contentType = contentType;
	if(username)
		options.username = username;
	if(password)
		options.password = password;
	if(window.Components && window.netscape && window.netscape.security && document.location.protocol.indexOf("http") == -1)
		window.netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	return jQuery.ajax(options);
}
//--
//-- TiddlyWiki-specific utility functions
//--

// Returns TiddlyWiki version string
function formatVersion(v)
{
	v = v || version;
	return v.major + "." + v.minor + "." + v.revision +
		(v.alpha ? " (alpha " + v.alpha + ")" : "") +
		(v.beta ? " (beta " + v.beta + ")" : "");
}

function compareVersions(v1,v2)
{
	var x1,x2,i,a = ["major","minor","revision"];
	for(i = 0; i<a.length; i++) {
		x1 = v1[a[i]] || 0;
		x2 = v2[a[i]] || 0;
		if(x1<x2)
			return 1;
		if(x1>x2)
			return -1;
	}
	x1 = v1.beta || 9999;
	x2 = v2.beta || 9999;
	if(x1<x2)
		return 1;
	return x1 > x2 ? -1 : 0;
}

function merge(dst,src,preserveExisting)
{
	var i;
	for(i in src) {
		if(!preserveExisting || dst[i] === undefined)
			dst[i] = src[i];
	}
	return dst;
}

// Resolve the target object of an event
function resolveTarget(e)
{
	var obj;
	if(e.target)
		obj = e.target;
	else if(e.srcElement)
		obj = e.srcElement;
	if(obj.nodeType == 3) // defeat Safari bug
		obj = obj.parentNode;
	return obj;
}

// Returns a string containing the description of an exception, optionally prepended by a message
function exceptionText(e,message)
{
	var s = e.description || e.toString();
	return message ? "%0:\n%1".format([message,s]) : s;
}

// Displays an alert of an exception description with optional message
function showException(e,message)
{
	alert(exceptionText(e,message));
}

function alertAndThrow(m)
{
	alert(m);
	throw(m);
}

function glyph(name)
{
	var g = config.glyphs;
	var b = g.currBrowser;
	if(b == null) {
		b = 0;
		while(b < g.browsers.length-1 && !g.browsers[b]())
			b++;
		g.currBrowser = b;
	}
	if(!g.codes[name])
		return "";
	return g.codes[name][b];
}

function createTiddlyText(parent,text)
{
	return parent.appendChild(document.createTextNode(text));
}

function createTiddlyCheckbox(parent,caption,checked,onChange)
{
	var cb = document.createElement("input");
	cb.setAttribute("type","checkbox");
	cb.onclick = onChange;
	parent.appendChild(cb);
	cb.checked = checked;
	cb.className = "chkOptionInput";
	if(caption)
		wikify(caption,parent);
	return cb;
}

function createTiddlyElement(parent,element,id,className,text,attribs)
{
	var n,e = document.createElement(element);
	if(className != null)
		e.className = className;
	if(id != null)
		e.setAttribute("id",id);
	if(text != null)
		e.appendChild(document.createTextNode(text));
	if(attribs) {
		for(n in attribs) {
			e.setAttribute(n,attribs[n]);
		}
	}
	if(parent != null)
		parent.appendChild(e);
	return e;
}

function createTiddlyButton(parent,text,tooltip,action,className,id,accessKey,attribs)
{
	var i,btn = document.createElement("a");
	btn.setAttribute("href","javascript:;");
	if(action) {
		btn.onclick = action;
	}
	if(tooltip)
		btn.setAttribute("title",tooltip);
	if(text)
		btn.appendChild(document.createTextNode(text));
	btn.className = className || "button";
	if(id)
		btn.id = id;
	if(attribs) {
		for(i in attribs) {
			btn.setAttribute(i,attribs[i]);
		}
	}
	if(parent)
		parent.appendChild(btn);
	if(accessKey)
		btn.setAttribute("accessKey",accessKey);
	return btn;
}

function createExternalLink(place,url,label)
{
	var link = document.createElement("a");
	link.className = "externalLink";
	link.href = url;
	var f = config.messages.externalLinkTooltip;
	link.title = f ? f.format([url]) : url;
	if(config.options.chkOpenInNewWindow)
		link.target = "_blank";
	place.appendChild(link);
	if(label)
		createTiddlyText(link, label);
	return link;
}

function getTiddlyLinkInfo(title,currClasses)
{
	var classes = currClasses ? currClasses.split(" ") : [];
	classes.pushUnique("tiddlyLink");
	var tiddler = store.fetchTiddler(title);
	var subTitle;
	if(tiddler) {
		subTitle = tiddler.getSubtitle();
		classes.pushUnique("tiddlyLinkExisting");
		classes.remove("tiddlyLinkNonExisting");
		classes.remove("shadow");
	} else {
	    var f;
		classes.remove("tiddlyLinkExisting");
		classes.pushUnique("tiddlyLinkNonExisting");
		if(store.isShadowTiddler(title)) {
			f = config.messages.shadowedTiddlerToolTip;
			classes.pushUnique("shadow");
		} else {
			f = config.messages.undefinedTiddlerToolTip;
			classes.remove("shadow");
		}
		subTitle = f ? f.format([title]) : "";
	}
	if(typeof config.annotations[title]=="string")
		subTitle = config.annotations[title];
	return {classes: classes.join(" "),subTitle: subTitle};
}

// Event handler for clicking on a tiddly link
function onClickTiddlerLink(ev)
{
	var e = ev || window.event;
	var target = resolveTarget(e);
	var link = target;
	var title = null;
	var fields = null;
	var noToggle = null;
	do {
		title = link.getAttribute("tiddlyLink");
		fields = link.getAttribute("tiddlyFields");
		noToggle = link.getAttribute("noToggle");
		link = link.parentNode;
	} while(title == null && link != null);
	if(!store.isShadowTiddler(title)) {
		var f = fields ? fields.decodeHashMap() : {};
		fields = String.encodeHashMap(merge(f,config.defaultCustomFields,true));
	}
	if(title) {
		var toggling = e.metaKey || e.ctrlKey;
		if(config.options.chkToggleLinks)
			toggling = !toggling;
		if(noToggle)
			toggling = false;
		if(store.getTiddler(title))
			fields = null;
		story.displayTiddler(target,title,null,true,null,fields,toggling);
	}
	clearMessage();
	return false;
}

function createTiddlyLink(place,title,includeText,className,isStatic,linkedFromTiddler,noToggle)
{
	var title = jQuery.trim(title);
	var text = includeText ? title : null;
	var i = getTiddlyLinkInfo(title,className);
	var btn = isStatic ? createExternalLink(place,store.getTiddlerText("SiteUrl",null) + "#" + title) : createTiddlyButton(place,text,i.subTitle,onClickTiddlerLink,i.classes);
	if(isStatic)
		btn.className += ' ' + className;
	btn.setAttribute("refresh","link");
	btn.setAttribute("tiddlyLink",title);
	if(noToggle)
		btn.setAttribute("noToggle","true");
	if(linkedFromTiddler) {
		var fields = linkedFromTiddler.getInheritedFields();
		if(fields)
			btn.setAttribute("tiddlyFields",fields);
	}
	return btn;
}

function refreshTiddlyLink(e,title)
{
	var i = getTiddlyLinkInfo(title,e.className);
	e.className = i.classes;
	e.title = i.subTitle;
}

function createTiddlyDropDown(place,onchange,options,defaultValue)
{
	var sel = createTiddlyElement(place,"select");
	sel.onchange = onchange;
	var t;
	for(t=0; t<options.length; t++) {
		var e = createTiddlyElement(sel,"option",null,null,options[t].caption);
		e.value = options[t].name;
		if(options[t].name == defaultValue)
			e.selected = true;
	}
	return sel;
}

//--
//-- TiddlyWiki-specific popup utility functions
//--

// Event handler for 'open all' on a tiddler popup
function onClickTagOpenAll(ev)
{
	var tiddlers = store.getTaggedTiddlers(this.getAttribute("tag"));
	var sortby = this.getAttribute("sortby");
	if(sortby&&sortby.length) {
		store.sortTiddlers(tiddlers,sortby);
	}
	story.displayTiddlers(this,tiddlers);
	return false;
}

// Event handler for clicking on a tiddler tag
function onClickTag(ev)
{
	var e = ev || window.event;
	var popup = Popup.create(this);
	jQuery(popup).addClass("taggedTiddlerList");
	var tag = this.getAttribute("tag");
	var title = this.getAttribute("tiddler");
	if(popup && tag) {
		var tagged = tag.indexOf("[")==-1 ? store.getTaggedTiddlers(tag) : store.filterTiddlers(tag);
		var sortby = this.getAttribute("sortby");
		if(sortby&&sortby.length) {
			store.sortTiddlers(tagged,sortby);
		}
		var titles = [];
		var r;
		for(r=0;r<tagged.length;r++) {
			if(tagged[r].title != title)
				titles.push(tagged[r].title);
		}
		var lingo = config.views.wikified.tag;
		if(titles.length > 0) {
			var openAll = createTiddlyButton(createTiddlyElement(popup,"li"),lingo.openAllText.format([tag]),lingo.openAllTooltip,onClickTagOpenAll);
			openAll.setAttribute("tag",tag);
			openAll.setAttribute("sortby",sortby);
			createTiddlyElement(createTiddlyElement(popup,"li",null,"listBreak"),"div");
			for(r=0; r<titles.length; r++) {
				createTiddlyLink(createTiddlyElement(popup,"li"),titles[r],true);
			}
		} else {
			createTiddlyElement(popup,"li",null,"disabled",lingo.popupNone.format([tag]));
		}
		createTiddlyElement(createTiddlyElement(popup,"li",null,"listBreak"),"div");
		var h = createTiddlyLink(createTiddlyElement(popup,"li"),tag,false);
		createTiddlyText(h,lingo.openTag.format([tag]));
	}
	Popup.show();
	e.cancelBubble = true;
	if(e.stopPropagation) e.stopPropagation();
	return false;
}

// Create a button for a tag with a popup listing all the tiddlers that it tags
function createTagButton(place,tag,excludeTiddler,title,tooltip)
{
	var btn = createTiddlyButton(place,title||tag,(tooltip||config.views.wikified.tag.tooltip).format([tag]),onClickTag);
	btn.setAttribute("tag",tag);
	if(excludeTiddler)
		btn.setAttribute("tiddler",excludeTiddler);
	return btn;
}

function onClickTiddlyPopup(ev)
{
	var e = ev || window.event;
	var tiddler = this.tiddler;
	if(tiddler.text) {
		var popup = Popup.create(this,"div","popupTiddler");
		wikify(tiddler.text,popup,null,tiddler);
		Popup.show();
	}
	if(e) e.cancelBubble = true;
	if(e && e.stopPropagation) e.stopPropagation();
	return false;
}

function createTiddlyPopup(place,caption,tooltip,tiddler)
{
	if(tiddler.text) {
		createTiddlyLink(place,caption,true);
		var btn = createTiddlyButton(place,glyph("downArrow"),tooltip,onClickTiddlyPopup,"tiddlerPopupButton");
		btn.tiddler = tiddler;
	} else {
		createTiddlyText(place,caption);
	}
}

function onClickError(ev)
{
	var e = ev || window.event;
	var popup = Popup.create(this);
	var lines = this.getAttribute("errorText").split("\n");
	var t;
	for(t=0; t<lines.length; t++)
		createTiddlyElement(popup,"li",null,null,lines[t]);
	Popup.show();
	e.cancelBubble = true;
	if(e.stopPropagation) e.stopPropagation();
	return false;
}

function createTiddlyError(place,title,text)
{
	var btn = createTiddlyButton(place,title,null,onClickError,"errorButton");
	if(text) btn.setAttribute("errorText",text);
}
//-
//- Animation engine
//-

function Animator()
{
	this.running = 0; // Incremented at start of each animation, decremented afterwards. If zero, the interval timer is disabled
	this.timerID = 0; // ID of the timer used for animating
	this.animations = []; // List of animations in progress
	return this;
}

// Start animation engine
Animator.prototype.startAnimating = function() //# Variable number of arguments
{
	var t;
	for(t=0; t<arguments.length; t++)
		this.animations.push(arguments[t]);
	if(this.running == 0) {
		var me = this;
		this.timerID = window.setInterval(function() {me.doAnimate(me);},10);
	}
	this.running += arguments.length;
};

// Perform an animation engine tick, calling each of the known animation modules
Animator.prototype.doAnimate = function(me)
{
	var a = 0;
	while(a < me.animations.length) {
		var animation = me.animations[a];
		if(animation.tick()) {
			a++;
		} else {
			me.animations.splice(a,1);
			if(--me.running == 0)
				window.clearInterval(me.timerID);
		}
	}
};

Animator.slowInSlowOut = function(progress)
{
	return(1-((Math.cos(progress * Math.PI)+1)/2));
};

//--
//-- Morpher animation
//--

// Animate a set of properties of an element
function Morpher(element,duration,properties,callback)
{
	this.element = element;
	this.duration = duration;
	this.properties = properties;
	this.startTime = new Date();
	this.endTime = Number(this.startTime) + duration;
	this.callback = callback;
	this.tick();
	return this;
}

Morpher.prototype.assignStyle = function(element,style,value)
{
	switch(style) {
	case "-tw-vertScroll":
		window.scrollTo(findScrollX(),value);
		break;
	case "-tw-horizScroll":
		window.scrollTo(value,findScrollY());
		break;
	default:
		element.style[style] = value;
		break;
	}
};

Morpher.prototype.stop = function()
{
	var t;
	for(t=0; t<this.properties.length; t++) {
		var p = this.properties[t];
		if(p.atEnd !== undefined) {
			this.assignStyle(this.element,p.style,p.atEnd);
		}
	}
	if(this.callback)
		this.callback(this.element,this.properties);
};

Morpher.prototype.tick = function()
{
	var currTime = Number(new Date());
	var t,progress = Animator.slowInSlowOut(Math.min(1,(currTime-this.startTime)/this.duration));
	for(t=0; t<this.properties.length; t++) {
		var p = this.properties[t];
		if(p.start !== undefined && p.end !== undefined) {
			var template = p.template || "%0";
			switch(p.format) {
			case undefined:
			case "style":
				var v = p.start + (p.end-p.start) * progress;
				this.assignStyle(this.element,p.style,template.format([v]));
				break;
			case "color":
				break;
			}
		}
	}
	if(currTime >= this.endTime) {
		this.stop();
		return false;
	}
	return true;
};

//--
//-- Zoomer animation
//--

function Zoomer(text,startElement,targetElement,unused)
{
	var e = createTiddlyElement(document.body,"div",null,"zoomer");
	createTiddlyElement(e,"div",null,null,text);
	var winWidth = findWindowWidth();
	var winHeight = findWindowHeight();
	var p = [
		{style: 'left', start: findPosX(startElement), end: findPosX(targetElement), template: '%0px'},
		{style: 'top', start: findPosY(startElement), end: findPosY(targetElement), template: '%0px'},
		{style: 'width', start: Math.min(startElement.scrollWidth,winWidth), end: Math.min(targetElement.scrollWidth,winWidth), template: '%0px', atEnd: 'auto'},
		{style: 'height', start: Math.min(startElement.scrollHeight,winHeight), end: Math.min(targetElement.scrollHeight,winHeight), template: '%0px', atEnd: 'auto'},
		{style: 'fontSize', start: 8, end: 24, template: '%0pt'}
	];
	var c = function(element,properties) {jQuery(element).remove();};
	return new Morpher(e,config.animDuration,p,c);
}

//--
//-- Scroller animation
//--

function Scroller(targetElement)
{
	var p = [{style: '-tw-vertScroll', start: findScrollY(), end: ensureVisible(targetElement)}];
	return new Morpher(targetElement,config.animDuration,p);
}

//--
//-- Slider animation
//--

// deleteMode - "none", "all" [delete target element and it's children], [only] "children" [but not the target element]
function Slider(element,opening,unused,deleteMode)
{
	element.style.overflow = 'hidden';
	if(opening)
		element.style.height = '0px'; // Resolves a Firefox flashing bug
	element.style.display = 'block';
	var height = element.scrollHeight;
	var p = [];
	var c = null;
	if(opening) {
		p.push({style: 'height', start: 0, end: height, template: '%0px', atEnd: 'auto'});
		p.push({style: 'opacity', start: 0, end: 1, template: '%0'});
		p.push({style: 'filter', start: 0, end: 100, template: 'alpha(opacity:%0)'});
	} else {
		p.push({style: 'height', start: height, end: 0, template: '%0px'});
		p.push({style: 'display', atEnd: 'none'});
		p.push({style: 'opacity', start: 1, end: 0, template: '%0'});
		p.push({style: 'filter', start: 100, end: 0, template: 'alpha(opacity:%0)'});
		switch(deleteMode) {
		case "all":
			c = function(element,properties) {jQuery(element).remove();};
			break;
		case "children":
			c = function(element,properties) {jQuery(element).empty();};
			break;
		}
	}
	return new Morpher(element,config.animDuration,p,c);
}

//--
//-- Popup menu
//--

var Popup = {
	stack: [] // Array of objects with members root: and popup:
	};

Popup.create = function(root,elem,className)
{
	var stackPosition = this.find(root,"popup");
	Popup.remove(stackPosition+1);
	var popup = createTiddlyElement(document.body,elem || "ol","popup",className || "popup");
	popup.stackPosition = stackPosition;
	Popup.stack.push({root: root, popup: popup});
	return popup;
};

Popup.onDocumentClick = function(ev)
{
	var e = ev || window.event;
	if(e.eventPhase == undefined)
		Popup.remove();
	else if(e.eventPhase == Event.BUBBLING_PHASE || e.eventPhase == Event.AT_TARGET)
		Popup.remove();
	return true;
};

Popup.show = function(valign,halign,offset)
{
	var curr = Popup.stack[Popup.stack.length-1];
	this.place(curr.root,curr.popup,valign,halign,offset);
	jQuery(curr.root).addClass("highlight");
	if(config.options.chkAnimate && anim && typeof Scroller == "function")
		anim.startAnimating(new Scroller(curr.popup));
	else
		window.scrollTo(0,ensureVisible(curr.popup));
};

Popup.place = function(root,popup,valign,halign,offset)
{
	if(!offset)
		offset = {x:0,y:0};
	if(popup.stackPosition >= 0 && !valign && !halign) {
		offset.x = offset.x + root.offsetWidth;
	} else {
		offset.x = (halign == "right") ? offset.x + root.offsetWidth : offset.x;
		offset.y = (valign == "top") ? offset.y : offset.y + root.offsetHeight;
	}
	var rootLeft = findPosX(root);
	var rootTop = findPosY(root);
	var popupLeft = rootLeft + offset.x;
	var popupTop = rootTop + offset.y;
	var winWidth = findWindowWidth();
	if(popup.offsetWidth > winWidth*0.75)
		popup.style.width = winWidth*0.75 + "px";
	var popupWidth = popup.offsetWidth;
	var scrollWidth = winWidth - document.body.offsetWidth;
	if(popupLeft + popupWidth > winWidth - scrollWidth - 1) {
		if(halign == "right")
			popupLeft = popupLeft - root.offsetWidth - popupWidth;
		else
			popupLeft = winWidth - popupWidth - scrollWidth - 1;
	}
	popup.style.left = popupLeft + "px";
	popup.style.top = popupTop + "px";
	popup.style.display = "block";
};

Popup.find = function(e)
{
	var t,pos = -1;
	for(t=this.stack.length-1; t>=0; t--) {
		if(isDescendant(e,this.stack[t].popup))
			pos = t;
	}
	return pos;
};

Popup.remove = function(pos)
{
	if(!pos) pos = 0;
	if(Popup.stack.length > pos) {
		Popup.removeFrom(pos);
	}
};

Popup.removeFrom = function(from)
{
	var t;
	for(t=Popup.stack.length-1; t>=from; t--) {
		var p = Popup.stack[t];
		jQuery(p.root).removeClass("highlight");
		jQuery(p.popup).remove();
	}
	Popup.stack = Popup.stack.slice(0,from);
};

//--
//-- Wizard support
//--

function Wizard(elem)
{
	if(elem) {
		this.formElem = findRelated(elem,"wizard","className");
		this.bodyElem = findRelated(this.formElem.firstChild,"wizardBody","className","nextSibling");
		this.footElem = findRelated(this.formElem.firstChild,"wizardFooter","className","nextSibling");
	} else {
		this.formElem = null;
		this.bodyElem = null;
		this.footElem = null;
	}
}

Wizard.prototype.setValue = function(name,value)
{
	jQuery(this.formElem).data(name, value);
};

Wizard.prototype.getValue = function(name)
{
	return this.formElem ? jQuery(this.formElem).data(name) : null;
};

Wizard.prototype.createWizard = function(place,title)
{
	this.formElem = createTiddlyElement(place,"form",null,"wizard");
	createTiddlyElement(this.formElem,"h1",null,null,title);
	this.bodyElem = createTiddlyElement(this.formElem,"div",null,"wizardBody");
	this.footElem = createTiddlyElement(this.formElem,"div",null,"wizardFooter");
	return this.formElem;
};

Wizard.prototype.clear = function()
{
	jQuery(this.bodyElem).empty();
};

Wizard.prototype.setButtons = function(buttonInfo,status)
{
	jQuery(this.footElem).empty();
	var t;
	for(t=0; t<buttonInfo.length; t++) {
		createTiddlyButton(this.footElem,buttonInfo[t].caption,buttonInfo[t].tooltip,buttonInfo[t].onClick);
		insertSpacer(this.footElem);
		}
	if(typeof status == "string") {
		createTiddlyElement(this.footElem,"span",null,"status",status);
	}
};

Wizard.prototype.addStep = function(stepTitle,html)
{
	jQuery(this.bodyElem).empty();
	var w = createTiddlyElement(this.bodyElem,"div");
	createTiddlyElement(w,"h2",null,null,stepTitle);
	var step = createTiddlyElement(w,"div",null,"wizardStep");
	step.innerHTML = html;
	applyHtmlMacros(step,tiddler);
};

Wizard.prototype.getElement = function(name)
{
	return this.formElem.elements[name];
};

//--
//-- ListView gadget
//--

var ListView = {};

// Create a listview
ListView.create = function(place,listObject,listTemplate,callback,className)
{
	var table = createTiddlyElement(place,"table",null,className || "listView twtable");
	var thead = createTiddlyElement(table,"thead");
	var t,r = createTiddlyElement(thead,"tr");
	for(t=0; t<listTemplate.columns.length; t++) {
		var columnTemplate = listTemplate.columns[t];
		var c = createTiddlyElement(r,"th");
		var colType = ListView.columnTypes[columnTemplate.type];
		if(colType && colType.createHeader) {
			colType.createHeader(c,columnTemplate,t);
			if(columnTemplate.className)
				jQuery(c).addClass(columnTemplate.className);
		}
	}
	var rc,tbody = createTiddlyElement(table,"tbody");
	for(rc=0; rc<listObject.length; rc++) {
		var rowObject = listObject[rc];
		r = createTiddlyElement(tbody,"tr");
		for(c=0; c<listTemplate.rowClasses.length; c++) {
			if(rowObject[listTemplate.rowClasses[c].field])
				jQuery(r).addClass(listTemplate.rowClasses[c].className);
		}
		rowObject.rowElement = r;
		rowObject.colElements = {};
		var cc;
		for(cc=0; cc<listTemplate.columns.length; cc++) {
			c = createTiddlyElement(r,"td");
			columnTemplate = listTemplate.columns[cc];
			var field = columnTemplate.field;
			colType = ListView.columnTypes[columnTemplate.type];
			if(colType && colType.createItem) {
				colType.createItem(c,rowObject,field,columnTemplate,cc,rc);
				if(columnTemplate.className)
					jQuery(c).addClass(columnTemplate.className);
			}
			rowObject.colElements[field] = c;
		}
	}
	if(callback && listTemplate.actions)
		createTiddlyDropDown(place,ListView.getCommandHandler(callback),listTemplate.actions);
	if(callback && listTemplate.buttons) {
		for(t=0; t<listTemplate.buttons.length; t++) {
			var a = listTemplate.buttons[t];
			if(a && a.name != "")
				createTiddlyButton(place,a.caption,null,ListView.getCommandHandler(callback,a.name,a.allowEmptySelection));
		}
	}
	return table;
};

ListView.getCommandHandler = function(callback,name,allowEmptySelection)
{
	return function(e) {
		var view = findRelated(this,"TABLE",null,"previousSibling");
		var tiddlers = [];
		ListView.forEachSelector(view,function(e,rowName) {
					if(e.checked)
						tiddlers.push(rowName);
					});
		if(tiddlers.length == 0 && !allowEmptySelection) {
			alert(config.messages.nothingSelected);
		} else {
			if(this.nodeName.toLowerCase() == "select") {
				callback(view,this.value,tiddlers);
				this.selectedIndex = 0;
			} else {
				callback(view,name,tiddlers);
			}
		}
	};
};

// Invoke a callback for each selector checkbox in the listview
ListView.forEachSelector = function(view,callback)
{
	var checkboxes = view.getElementsByTagName("input");
	var t,hadOne = false;
	for(t=0; t<checkboxes.length; t++) {
		var cb = checkboxes[t];
		if(cb.getAttribute("type") == "checkbox") {
			var rn = cb.getAttribute("rowName");
			if(rn) {
				callback(cb,rn);
				hadOne = true;
			}
		}
	}
	return hadOne;
};

ListView.getSelectedRows = function(view)
{
	var rowNames = [];
	ListView.forEachSelector(view,function(e,rowName) {
				if(e.checked)
					rowNames.push(rowName);
				});
	return rowNames;
};

ListView.columnTypes = {};

ListView.columnTypes.String = {
	createHeader: function(place,columnTemplate,col)
		{
			createTiddlyText(place,columnTemplate.title);
		},
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined)
				createTiddlyText(place,v);
		}
};

ListView.columnTypes.WikiText = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined)
				wikify(v,place,null,null);
		}
};

ListView.columnTypes.Tiddler = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined && v.title)
				createTiddlyPopup(place,v.title,config.messages.listView.tiddlerTooltip,v);
		}
};

ListView.columnTypes.Size = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var msg = config.messages.sizeTemplates;
			var v = listObject[field];
			if(v != undefined) {
				var t = 0;
				while(t<msg.length-1 && v<msg[t].unit)
					t++;
				createTiddlyText(place,msg[t].template.format([Math.round(v/msg[t].unit)]));
			}
		}
};

ListView.columnTypes.Link = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			var c = columnTemplate.text;
			if(v != undefined)
				createExternalLink(place,v,c || v);
		}
};

ListView.columnTypes.Date = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined)
				createTiddlyText(place,v.formatString(columnTemplate.dateFormat));
		}
};

ListView.columnTypes.StringList = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined) {
				var t;
				for(t=0; t<v.length; t++) {
					createTiddlyText(place,v[t]);
					createTiddlyElement(place,"br");
				}
			}
		}
};

ListView.columnTypes.Selector = {
	createHeader: function(place,columnTemplate,col)
		{
			createTiddlyCheckbox(place,null,false,this.onHeaderChange);
		},
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var e = createTiddlyCheckbox(place,null,listObject[field],null);
			e.setAttribute("rowName",listObject[columnTemplate.rowName]);
		},
	onHeaderChange: function(e)
		{
			var state = this.checked;
			var view = findRelated(this,"TABLE");
			if(!view)
				return;
			ListView.forEachSelector(view,function(e,rowName) {
								e.checked = state;
							});
		}
};

ListView.columnTypes.Tags = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var tags = listObject[field];
			createTiddlyText(place,String.encodeTiddlyLinkList(tags));
		}
};

ListView.columnTypes.Boolean = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			if(listObject[field] == true)
				createTiddlyText(place,columnTemplate.trueText);
			if(listObject[field] == false)
				createTiddlyText(place,columnTemplate.falseText);
		}
};

ListView.columnTypes.TagCheckbox = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var e = createTiddlyCheckbox(place,null,listObject[field],this.onChange);
			e.setAttribute("tiddler",listObject.title);
			e.setAttribute("tag",columnTemplate.tag);
		},
	onChange : function(e)
		{
			var tag = this.getAttribute("tag");
			var tiddler = this.getAttribute("tiddler");
			store.setTiddlerTag(tiddler,this.checked,tag);
		}
};

ListView.columnTypes.TiddlerLink = {
	createHeader: ListView.columnTypes.String.createHeader,
	createItem: function(place,listObject,field,columnTemplate,col,row)
		{
			var v = listObject[field];
			if(v != undefined) {
				var link = createTiddlyLink(place,listObject[columnTemplate.tiddlerLink],false,null);
				createTiddlyText(link,listObject[field]);
			}
		}
};

//--
//-- Augmented methods for the JavaScript Array() object
//--

// Add indexOf function if browser does not support it
if(!Array.indexOf) {
Array.prototype.indexOf = function(item,from)
{
	if(!from)
		from = 0;
	var i;
	for(i=from; i<this.length; i++) {
		if(this[i] === item)
			return i;
	}
	return -1;
};}

// Find an entry in a given field of the members of an array
Array.prototype.findByField = function(field,value)
{
	var t;
	for(t=0; t<this.length; t++) {
		if(this[t][field] === value)
			return t;
	}
	return null;
};

// Return whether an entry exists in an array
Array.prototype.contains = function(item)
{
	return this.indexOf(item) != -1;
};

// Adds, removes or toggles a particular value within an array
//  value - value to add
//  mode - +1 to add value, -1 to remove value, 0 to toggle it
Array.prototype.setItem = function(value,mode)
{
	var p = this.indexOf(value);
	if(mode == 0)
		mode = (p == -1) ? +1 : -1;
	if(mode == +1) {
		if(p == -1)
			this.push(value);
	} else if(mode == -1) {
		if(p != -1)
			this.splice(p,1);
	}
};

// Return whether one of a list of values exists in an array
Array.prototype.containsAny = function(items)
{
	var i;
	for(i=0; i<items.length; i++) {
		if(this.indexOf(items[i]) != -1)
			return true;
	}
	return false;
};

// Return whether all of a list of values exists in an array
Array.prototype.containsAll = function(items)
{
	var i;
	for(i = 0; i<items.length; i++) {
		if(this.indexOf(items[i]) == -1)
			return false;
	}
	return true;
};

// Push a new value into an array only if it is not already present in the array. If the optional unique parameter is false, it reverts to a normal push
Array.prototype.pushUnique = function(item,unique)
{
	if(unique === false) {
		this.push(item);
	} else {
		if(this.indexOf(item) == -1)
			this.push(item);
	}
};

Array.prototype.remove = function(item)
{
	var p = this.indexOf(item);
	if(p != -1)
		this.splice(p,1);
};

if(!Array.prototype.map) {
Array.prototype.map = function(fn,thisObj)
{
	var scope = thisObj || window;
	var i,j,a = [];
	for(i=0, j=this.length; i < j; ++i) {
		a.push(fn.call(scope,this[i],i,this));
	}
	return a;
};}

//--
//-- Augmented methods for the JavaScript String() object
//--

// Get characters from the right end of a string
String.prototype.right = function(n)
{
	return n < this.length ? this.slice(this.length-n) : this;
};

// Trim whitespace from both ends of a string
String.prototype.trim = function()
{
	return this.replace(/^\s*|\s*$/g,"");
};

// Convert a string from a CSS style property name to a JavaScript style name ("background-color" -> "backgroundColor")
String.prototype.unDash = function()
{
	var t,s = this.split("-");
	if(s.length > 1) {
		for(t=1; t<s.length; t++)
			s[t] = s[t].substr(0,1).toUpperCase() + s[t].substr(1);
	}
	return s.join("");
};

// Substitute substrings from an array into a format string that includes '%1'-type specifiers
String.prototype.format = function(s)
{
	var substrings = s && s.constructor == Array ? s : arguments;
	var subRegExp = /(?:%(\d+))/mg;
	var currPos = 0;
	var match,r = [];
	do {
		match = subRegExp.exec(this);
		if(match && match[1]) {
			if(match.index > currPos)
				r.push(this.substring(currPos,match.index));
			r.push(substrings[parseInt(match[1],10)]);
			currPos = subRegExp.lastIndex;
		}
	} while(match);
	if(currPos < this.length)
		r.push(this.substring(currPos,this.length));
	return r.join("");
};

// Escape any special RegExp characters with that character preceded by a backslash
String.prototype.escapeRegExp = function()
{
	var s = "\\^$*+?()=!|,{}[].";
	var t,c = this;
	for(t=0; t<s.length; t++)
		c = c.replace(new RegExp("\\" + s.substr(t,1),"g"),"\\" + s.substr(t,1));
	return c;
};

// Convert "\" to "\s", newlines to "\n" (and remove carriage returns)
String.prototype.escapeLineBreaks = function()
{
	return this.replace(/\\/mg,"\\s").replace(/\n/mg,"\\n").replace(/\r/mg,"");
};

// Convert "\n" to newlines, "\b" to " ", "\s" to "\" (and remove carriage returns)
String.prototype.unescapeLineBreaks = function()
{
	return this.replace(/\\n/mg,"\n").replace(/\\b/mg," ").replace(/\\s/mg,"\\").replace(/\r/mg,"");
};

// Convert & to "&amp;", < to "&lt;", > to "&gt;" and " to "&quot;"
String.prototype.htmlEncode = function()
{
	return this.replace(/&/mg,"&amp;").replace(/</mg,"&lt;").replace(/>/mg,"&gt;").replace(/\"/mg,"&quot;");
};

// Convert "&amp;" to &, "&lt;" to <, "&gt;" to > and "&quot;" to "
String.prototype.htmlDecode = function()
{
	return this.replace(/&lt;/mg,"<").replace(/&gt;/mg,">").replace(/&quot;/mg,"\"").replace(/&amp;/mg,"&");
};

// Parse a space-separated string of name:value parameters
// The result is an array of objects:
//   result[0] = object with a member for each parameter name, value of that member being an array of values
//   result[1..n] = one object for each parameter, with 'name' and 'value' members
String.prototype.parseParams = function(defaultName,defaultValue,allowEval,noNames,cascadeDefaults)
{
	var parseToken = function(match,p) {
		var n;
		if(match[p]) // Double quoted
			n = match[p];
		else if(match[p+1]) // Single quoted
			n = match[p+1];
		else if(match[p+2]) // Double-square-bracket quoted
			n = match[p+2];
		else if(match[p+3]) // Double-brace quoted
			try {
				n = match[p+3];
				if(allowEval && config.evaluateMacroParameters != "none") {
					if(config.evaluateMacroParameters == "restricted") {
						if(window.restrictedEval) {
							n = window.restrictedEval(n);
						}
					} else {
						n = window.eval(n);
					}
				}
			} catch(ex) {
				throw "Unable to evaluate {{" + match[p+3] + "}}: " + exceptionText(ex);
			}
		else if(match[p+4]) // Unquoted
			n = match[p+4];
		else if(match[p+5]) // empty quote
			n = "";
		return n;
	};
	var r = [{}];
	var dblQuote = "(?:\"((?:(?:\\\\\")|[^\"])+)\")";
	var sngQuote = "(?:'((?:(?:\\\\\')|[^'])+)')";
	var dblSquare = "(?:\\[\\[((?:\\s|\\S)*?)\\]\\])";
	var dblBrace = "(?:\\{\\{((?:\\s|\\S)*?)\\}\\})";
	var unQuoted = noNames ? "([^\"'\\s]\\S*)" : "([^\"':\\s][^\\s:]*)";
	var emptyQuote = "((?:\"\")|(?:''))";
	var skipSpace = "(?:\\s*)";
	var token = "(?:" + dblQuote + "|" + sngQuote + "|" + dblSquare + "|" + dblBrace + "|" + unQuoted + "|" + emptyQuote + ")";
	var re = noNames ? new RegExp(token,"mg") : new RegExp(skipSpace + token + skipSpace + "(?:(\\:)" + skipSpace + token + ")?","mg");
	var match;
	do {
		match = re.exec(this);
		if(match) {
			var n = parseToken(match,1);
			if(noNames) {
				r.push({name:"",value:n});
			} else {
				var v = parseToken(match,8);
				if(v == null && defaultName) {
					v = n;
					n = defaultName;
				} else if(v == null && defaultValue) {
					v = defaultValue;
				}
				r.push({name:n,value:v});
				if(cascadeDefaults) {
					defaultName = n;
					defaultValue = v;
				}
			}
		}
	} while(match);
	// Summarise parameters into first element
	var t;
	for(t=1; t<r.length; t++) {
		if(r[0][r[t].name])
			r[0][r[t].name].push(r[t].value);
		else
			r[0][r[t].name] = [r[t].value];
	}
	return r;
};

// Process a string list of macro parameters into an array. Parameters can be quoted with "", '',
// [[]], {{ }} or left unquoted (and therefore space-separated). Double-braces {{}} results in
// an *evaluated* parameter: e.g. {{config.options.txtUserName}} results in the current user's name.
String.prototype.readMacroParams = function(notAllowEval)
{
	var p = this.parseParams("list",null,!notAllowEval,true);
	var t,n = [];
	for(t=1; t<p.length; t++)
		n.push(p[t].value);
	return n;
};

// Process a string list of unique tiddler names into an array. Tiddler names that have spaces in them must be [[bracketed]]
String.prototype.readBracketedList = function(unique)
{
	var p = this.parseParams("list",null,false,true);
	var t,n = [];
	for(t=1; t<p.length; t++) {
		if(p[t].value)
			n.pushUnique(p[t].value,unique);
	}
	return n;
};

// Returns array with start and end index of chunk between given start and end marker, or undefined.
String.prototype.getChunkRange = function(start,end)
{
	var s = this.indexOf(start);
	if(s != -1) {
		s += start.length;
		var e = this.indexOf(end,s);
		if(e != -1)
			return [s,e];
	}
};

// Replace a chunk of a string given start and end markers
String.prototype.replaceChunk = function(start,end,sub)
{
	var r = this.getChunkRange(start,end);
	return r ? this.substring(0,r[0]) + sub + this.substring(r[1]) : this;
};

// Returns a chunk of a string between start and end markers, or undefined
String.prototype.getChunk = function(start,end)
{
	var r = this.getChunkRange(start,end);
	if(r)
		return this.substring(r[0],r[1]);
};


// Static method to bracket a string with double square brackets if it contains a space
String.encodeTiddlyLink = function(title)
{
	return title.indexOf(" ") == -1 ? title : "[[" + title + "]]";
};

// Static method to encodeTiddlyLink for every item in an array and join them with spaces
String.encodeTiddlyLinkList = function(list)
{
	if(list) {
		var t,results = [];
		for(t=0; t<list.length; t++)
			results.push(String.encodeTiddlyLink(list[t]));
		return results.join(" ");
	} else {
		return "";
	}
};

// Convert a string as a sequence of name:"value" pairs into a hashmap
String.prototype.decodeHashMap = function()
{
	var fields = this.parseParams("anon","",false);
	var t,r = {};
	for(t=1; t<fields.length; t++)
		r[fields[t].name] = fields[t].value;
	return r;
};

// Static method to encode a hashmap into a name:"value"... string
String.encodeHashMap = function(hashmap)
{
	var t,r = [];
	for(t in hashmap)
		r.push(t + ':"' + hashmap[t] + '"');
	return r.join(" ");
};

// Static method to left-pad a string with 0s to a certain width
String.zeroPad = function(n,d)
{
	var s = n.toString();
	if(s.length < d)
		s = "000000000000000000000000000".substr(0,d-s.length) + s;
	return s;
};

String.prototype.startsWith = function(prefix)
{
	return !prefix || this.substring(0,prefix.length) == prefix;
};

// Returns the first value of the given named parameter.
function getParam(params,name,defaultValue)
{
	if(!params)
		return defaultValue;
	var p = params[0][name];
	return p ? p[0] : defaultValue;
}

// Returns the first value of the given boolean named parameter.
function getFlag(params,name,defaultValue)
{
	return !!getParam(params,name,defaultValue);
}

//--
//-- Augmented methods for the JavaScript Date() object
//--

// Substitute date components into a string
Date.prototype.formatString = function(template)
{
	var t = template.replace(/0hh12/g,String.zeroPad(this.getHours12(),2));
	t = t.replace(/hh12/g,this.getHours12());
	t = t.replace(/0hh/g,String.zeroPad(this.getHours(),2));
	t = t.replace(/hh/g,this.getHours());
	t = t.replace(/mmm/g,config.messages.dates.shortMonths[this.getMonth()]);
	t = t.replace(/0mm/g,String.zeroPad(this.getMinutes(),2));
	t = t.replace(/mm/g,this.getMinutes());
	t = t.replace(/0ss/g,String.zeroPad(this.getSeconds(),2));
	t = t.replace(/ss/g,this.getSeconds());
	t = t.replace(/[ap]m/g,this.getAmPm().toLowerCase());
	t = t.replace(/[AP]M/g,this.getAmPm().toUpperCase());
	t = t.replace(/wYYYY/g,this.getYearForWeekNo());
	t = t.replace(/wYY/g,String.zeroPad(this.getYearForWeekNo()-2000,2));
	t = t.replace(/YYYY/g,this.getFullYear());
	t = t.replace(/YY/g,String.zeroPad(this.getFullYear()-2000,2));
	t = t.replace(/MMM/g,config.messages.dates.months[this.getMonth()]);
	t = t.replace(/0MM/g,String.zeroPad(this.getMonth()+1,2));
	t = t.replace(/MM/g,this.getMonth()+1);
	t = t.replace(/0WW/g,String.zeroPad(this.getWeek(),2));
	t = t.replace(/WW/g,this.getWeek());
	t = t.replace(/DDD/g,config.messages.dates.days[this.getDay()]);
	t = t.replace(/ddd/g,config.messages.dates.shortDays[this.getDay()]);
	t = t.replace(/0DD/g,String.zeroPad(this.getDate(),2));
	t = t.replace(/DDth/g,this.getDate()+this.daySuffix());
	t = t.replace(/DD/g,this.getDate());
	var tz = this.getTimezoneOffset();
	var atz = Math.abs(tz);
	t = t.replace(/TZD/g,(tz < 0 ? '+' : '-') + String.zeroPad(Math.floor(atz / 60),2) + ':' + String.zeroPad(atz % 60,2));
	t = t.replace(/\\/g,"");
	return t;
};

Date.prototype.getWeek = function()
{
	var dt = new Date(this.getTime());
	var d = dt.getDay();
	if(d==0) d=7;// JavaScript Sun=0, ISO Sun=7
	dt.setTime(dt.getTime()+(4-d)*86400000);// shift day to Thurs of same week to calculate weekNo
	var n = Math.floor((dt.getTime()-new Date(dt.getFullYear(),0,1)+3600000)/86400000);
	return Math.floor(n/7)+1;
};

Date.prototype.getYearForWeekNo = function()
{
	var dt = new Date(this.getTime());
	var d = dt.getDay();
	if(d==0) d=7;// JavaScript Sun=0, ISO Sun=7
	dt.setTime(dt.getTime()+(4-d)*86400000);// shift day to Thurs of same week
	return dt.getFullYear();
};

Date.prototype.getHours12 = function()
{
	var h = this.getHours();
	return h > 12 ? h-12 : ( h > 0 ? h : 12 );
};

Date.prototype.getAmPm = function()
{
	return this.getHours() >= 12 ? config.messages.dates.pm : config.messages.dates.am;
};

Date.prototype.daySuffix = function()
{
	return config.messages.dates.daySuffixes[this.getDate()-1];
};

// Convert a date to local YYYYMMDDHHMM string format
Date.prototype.convertToLocalYYYYMMDDHHMM = function()
{
	return this.getFullYear() + String.zeroPad(this.getMonth()+1,2) + String.zeroPad(this.getDate(),2) + String.zeroPad(this.getHours(),2) + String.zeroPad(this.getMinutes(),2);
};

// Convert a date to UTC YYYYMMDDHHMM string format
Date.prototype.convertToYYYYMMDDHHMM = function()
{
	return this.getUTCFullYear() + String.zeroPad(this.getUTCMonth()+1,2) + String.zeroPad(this.getUTCDate(),2) + String.zeroPad(this.getUTCHours(),2) + String.zeroPad(this.getUTCMinutes(),2);
};

// Convert a date to UTC YYYYMMDD.HHMMSSMMM string format
Date.prototype.convertToYYYYMMDDHHMMSSMMM = function()
{
	return this.getUTCFullYear() + String.zeroPad(this.getUTCMonth()+1,2) + String.zeroPad(this.getUTCDate(),2) + "." + String.zeroPad(this.getUTCHours(),2) + String.zeroPad(this.getUTCMinutes(),2) + String.zeroPad(this.getUTCSeconds(),2) + String.zeroPad(this.getUTCMilliseconds(),3) +"0";
};

// Static method to create a date from a UTC YYYYMMDDHHMM format string
Date.convertFromYYYYMMDDHHMM = function(d)
{
	d = d?d.replace(/[^0-9]/g, ""):"";
	return Date.convertFromYYYYMMDDHHMMSSMMM(d.substr(0,12));
};

// Static method to create a date from a UTC YYYYMMDDHHMMSS format string
Date.convertFromYYYYMMDDHHMMSS = function(d)
{
	d = d?d.replace(/[^0-9]/g, ""):"";
	return Date.convertFromYYYYMMDDHHMMSSMMM(d.substr(0,14));
};

// Static method to create a date from a UTC YYYYMMDDHHMMSSMMM format string
Date.convertFromYYYYMMDDHHMMSSMMM = function(d)
{
	d = d ? d.replace(/[^0-9]/g, "") : "";
	return new Date(Date.UTC(parseInt(d.substr(0,4),10),
			parseInt(d.substr(4,2),10)-1,
			parseInt(d.substr(6,2),10),
			parseInt(d.substr(8,2)||"00",10),
			parseInt(d.substr(10,2)||"00",10),
			parseInt(d.substr(12,2)||"00",10),
			parseInt(d.substr(14,3)||"000",10)));
};

//--
//-- RGB colour object
//--

// Construct an RGB colour object from a '#rrggbb', '#rgb' or 'rgb(n,n,n)' string or from separate r,g,b values
function RGB(r,g,b)
{
	this.r = 0;
	this.g = 0;
	this.b = 0;
	if(typeof r == "string") {
		if(r.substr(0,1) == "#") {
			if(r.length == 7) {
				this.r = parseInt(r.substr(1,2),16)/255;
				this.g = parseInt(r.substr(3,2),16)/255;
				this.b = parseInt(r.substr(5,2),16)/255;
			} else {
				this.r = parseInt(r.substr(1,1),16)/15;
				this.g = parseInt(r.substr(2,1),16)/15;
				this.b = parseInt(r.substr(3,1),16)/15;
			}
		} else {
			var rgbPattern = /rgb\s*\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/;
			var c = r.match(rgbPattern);
			if(c) {
				this.r = parseInt(c[1],10)/255;
				this.g = parseInt(c[2],10)/255;
				this.b = parseInt(c[3],10)/255;
			}
		}
	} else {
		this.r = r;
		this.g = g;
		this.b = b;
	}
	return this;
}

// Mixes this colour with another in a specified proportion
// c = other colour to mix
// f = 0..1 where 0 is this colour and 1 is the new colour
// Returns an RGB object
RGB.prototype.mix = function(c,f)
{
	return new RGB(this.r + (c.r-this.r) * f,this.g + (c.g-this.g) * f,this.b + (c.b-this.b) * f);
};

// Return an rgb colour as a #rrggbb format hex string
RGB.prototype.toString = function()
{
	var clamp = function(x,min,max) {
		return x < min ? min : (x > max ? max : x);
	};
	return "#" +
			("0" + Math.floor(clamp(this.r,0,1) * 255).toString(16)).right(2) +
			("0" + Math.floor(clamp(this.g,0,1) * 255).toString(16)).right(2) +
			("0" + Math.floor(clamp(this.b,0,1) * 255).toString(16)).right(2);
};

//--
//-- DOM utilities - many derived from www.quirksmode.org
//--

function drawGradient(place,horiz,locolors,hicolors)
{
	if(!hicolors)
		hicolors = locolors;
	var t;
	for(t=0; t<= 100; t+=2) {
		var bar = document.createElement("div");
		place.appendChild(bar);
		bar.style.position = "absolute";
		bar.style.left = horiz ? t + "%" : 0;
		bar.style.top = horiz ? 0 : t + "%";
		bar.style.width = horiz ? (101-t) + "%" : "100%";
		bar.style.height = horiz ? "100%" : (101-t) + "%";
		bar.style.zIndex = -1;
		var p = t/100*(locolors.length-1);
		var hc = hicolors[Math.floor(p)];
		if(typeof hc == "string")
			hc = new RGB(hc);
		var lc = locolors[Math.ceil(p)];
		if(typeof lc == "string")
			lc = new RGB(lc);
		bar.style.backgroundColor = hc.mix(lc,p-Math.floor(p)).toString();
	}
}

function addEvent(obj,type,fn)
{
	if(obj.attachEvent) {
		obj["e"+type+fn] = fn;
		obj[type+fn] = function(){obj["e"+type+fn](window.event);};
		obj.attachEvent("on"+type,obj[type+fn]);
	} else {
		obj.addEventListener(type,fn,false);
	}
}

function removeEvent(obj,type,fn)
{
	if(obj.detachEvent) {
		obj.detachEvent("on"+type,obj[type+fn]);
		obj[type+fn] = null;
	} else {
		obj.removeEventListener(type,fn,false);
	}
}

// Find the closest relative with a given property value (property defaults to tagName, relative defaults to parentNode)
function findRelated(e,value,name,relative)
{
	name = name || "tagName";
	relative = relative || "parentNode";
	if(name == "className") {
		while(e && !jQuery(e).hasClass(value)) {
			e = e[relative];
		}
	} else {
		while(e && e[name] != value) {
			e = e[relative];
		}
	}
	return e;
}

// Get the scroll position for window.scrollTo necessary to scroll a given element into view
function ensureVisible(e)
{
	var posTop = findPosY(e);
	var posBot = posTop + e.offsetHeight;
	var winTop = findScrollY();
	var winHeight = findWindowHeight();
	var winBot = winTop + winHeight;
	if(posTop < winTop) {
		return posTop;
	} else if(posBot > winBot) {
		if(e.offsetHeight < winHeight)
			return posTop - (winHeight - e.offsetHeight);
		else
			return posTop;
	} else {
		return winTop;
	}
}

// Get the current width of the display window
function findWindowWidth()
{
	return window.innerWidth || document.documentElement.clientWidth;
}

// Get the current height of the display window
function findWindowHeight()
{
	return window.innerHeight || document.documentElement.clientHeight;
}

// Get the current horizontal page scroll position
function findScrollX()
{
	return window.scrollX || document.documentElement.scrollLeft;
}

// Get the current vertical page scroll position
function findScrollY()
{
	return window.scrollY || document.documentElement.scrollTop;
}

function findPosX(obj)
{
	var curleft = 0;
	while(obj.offsetParent) {
		curleft += obj.offsetLeft;
		obj = obj.offsetParent;
	}
	return curleft;
}

function findPosY(obj)
{
	var curtop = 0;
	while(obj.offsetParent) {
		curtop += obj.offsetTop;
		obj = obj.offsetParent;
	}
	return curtop;
}

// Blur a particular element
function blurElement(e)
{
	if(e && e.focus && e.blur) {
		e.focus();
		e.blur();
	}
}

// Create a non-breaking space
function insertSpacer(place)
{
	var e = document.createTextNode(String.fromCharCode(160));
	if(place)
		place.appendChild(e);
	return e;
}

// Replace the current selection of a textarea or text input and scroll it into view
function replaceSelection(e,text)
{
	if(e.setSelectionRange) {
		var oldpos = e.selectionStart;
		var isRange = e.selectionEnd > e.selectionStart;
		e.value = e.value.substr(0,e.selectionStart) + text + e.value.substr(e.selectionEnd);
		e.setSelectionRange(isRange ? oldpos : oldpos + text.length,oldpos + text.length);
		var linecount = e.value.split("\n").length;
		var thisline = e.value.substr(0,e.selectionStart).split("\n").length-1;
		e.scrollTop = Math.floor((thisline - e.rows / 2) * e.scrollHeight / linecount);
	} else if(document.selection) {
		var range = document.selection.createRange();
		if(range.parentElement() == e) {
			var isCollapsed = range.text == "";
			range.text = text;
			if(!isCollapsed) {
				range.moveStart("character", -text.length);
				range.select();
			}
		}
	}
}

// Set the caret position in a text area
function setCaretPosition(e,pos)
{
	if(e.selectionStart || e.selectionStart == '0') {
		e.selectionStart = pos;
		e.selectionEnd = pos;
		e.focus();
	} else if(document.selection) {
		// IE support
		e.focus ();
		var sel = document.selection.createRange();
		sel.moveStart('character', -e.value.length);
		sel.moveStart('character',pos);
		sel.moveEnd('character',0);
		sel.select();
	}
}

// Returns the text of the given (text) node, possibly merging subsequent text nodes
function getNodeText(e)
{
	var t = "";
	while(e && e.nodeName == "#text") {
		t += e.nodeValue;
		e = e.nextSibling;
	}
	return t;
}

// Returns true if the element e has a given ancestor element
function isDescendant(e,ancestor)
{
	while(e) {
		if(e === ancestor)
			return true;
		e = e.parentNode;
	}
	return false;
}


// deprecate the following...

// Prevent an event from bubbling
function stopEvent(e)
{
	var ev = e || window.event;
	ev.cancelBubble = true;
	if(ev.stopPropagation) ev.stopPropagation();
	return false;
}

// Remove any event handlers or non-primitve custom attributes
function scrubNode(e)
{
	if(!config.browser.isIE)
		return;
	var att = e.attributes;
	if(att) {
		var t;
		for(t=0; t<att.length; t++) {
			var n = att[t].name;
			if(n !== "style" && (typeof e[n] === "function" || (typeof e[n] === "object" && e[n] != null))) {
				try {
					e[n] = null;
				} catch(ex) {
				}
			}
		}
	}
	var c = e.firstChild;
	while(c) {
		scrubNode(c);
		c = c.nextSibling;
	}
}

function setStylesheet(s,id,doc)
{
	jQuery.twStylesheet(s,{id:id,doc:doc});
}

function removeStyleSheet(id)
{
	jQuery.twStylesheet.remove({id:id});
}

//--
//-- LoaderBase and SaverBase
//--

function LoaderBase() {}

LoaderBase.prototype.loadTiddler = function(store,node,tiddlers)
{
	var title = this.getTitle(store,node);
	if(safeMode && store.isShadowTiddler(title))
		return;
	if(title) {
		var tiddler = store.createTiddler(title);
		this.internalizeTiddler(store,tiddler,title,node);
		tiddlers.push(tiddler);
	}
};

LoaderBase.prototype.loadTiddlers = function(store,nodes)
{
	var t,tiddlers = [];
	for(t = 0; t < nodes.length; t++) {
		try {
			this.loadTiddler(store,nodes[t],tiddlers);
		} catch(ex) {
			showException(ex,config.messages.tiddlerLoadError.format([this.getTitle(store,nodes[t])]));
		}
	}
	return tiddlers;
};

function SaverBase() {}

SaverBase.prototype.externalize = function(store)
{
	var results = [];
	var t,tiddlers = store.getTiddlers("title");
	for(t = 0; t < tiddlers.length; t++) {
		if(!tiddlers[t].doNotSave())
			results.push(this.externalizeTiddler(store, tiddlers[t]));
	}
	return results.join("\n");
};

//--
//-- TW21Loader (inherits from LoaderBase)
//--

function TW21Loader() {}

TW21Loader.prototype = new LoaderBase();

TW21Loader.prototype.getTitle = function(store,node)
{
	var title = null;
	if(node.getAttribute) {
		title = node.getAttribute("title");
		if(!title)
			title = node.getAttribute("tiddler");
	}
	if(!title && node.id) {
		var lenPrefix = store.idPrefix.length;
		if(node.id.substr(0,lenPrefix) == store.idPrefix)
			title = node.id.substr(lenPrefix);
	}
	return title;
};

TW21Loader.prototype.internalizeTiddler = function(store,tiddler,title,node)
{
	var e = node.firstChild;
	var text = null;
	if(node.getAttribute("tiddler")) {
		text = getNodeText(e).unescapeLineBreaks();
	} else {
		while(e.nodeName!="PRE" && e.nodeName!="pre") {
			e = e.nextSibling;
		}
		text = e.innerHTML.replace(/\r/mg,"").htmlDecode();
	}
	var creator = node.getAttribute("creator");
	var modifier = node.getAttribute("modifier");
	var c = node.getAttribute("created");
	var m = node.getAttribute("modified");
	var created = c ? Date.convertFromYYYYMMDDHHMMSS(c) : version.date;
	var modified = m ? Date.convertFromYYYYMMDDHHMMSS(m) : created;
	var tags = node.getAttribute("tags");
	var fields = {};
	var i,attrs = node.attributes;
	for(i = attrs.length-1; i >= 0; i--) {
		var name = attrs[i].name;
		if(attrs[i].specified && !TiddlyWiki.isStandardField(name)) {
			fields[name] = attrs[i].value.unescapeLineBreaks();
		}
	}
	tiddler.assign(title,text,modifier,modified,tags,created,fields,creator);
	return tiddler;
};

//--
//-- TW21Saver (inherits from SaverBase)
//--

function TW21Saver() {}

TW21Saver.prototype = new SaverBase();

TW21Saver.prototype.externalizeTiddler = function(store,tiddler)
{
	try {
		var extendedAttributes = "";
		var usePre = config.options.chkUsePreForStorage;
		store.forEachField(tiddler,
			function(tiddler,fieldName,value) {
				// don't store stuff from the temp namespace
				if(typeof value != "string")
					value = "";
				if(!fieldName.match(/^temp\./))
					extendedAttributes += ' %0="%1"'.format([fieldName,value.escapeLineBreaks().htmlEncode()]);
			},true);
		var created = tiddler.created;
		var modified = tiddler.modified;
		var attributes = tiddler.creator ? ' creator="' + tiddler.creator.htmlEncode() + '"' : "";
		attributes += tiddler.modifier ? ' modifier="' + tiddler.modifier.htmlEncode() + '"' : "";
		attributes += (usePre && created == version.date) ? "" :' created="' + created.convertToYYYYMMDDHHMM() + '"';
		attributes += (usePre && modified == created) ? "" : ' modified="' + modified.convertToYYYYMMDDHHMM() +'"';
		var tags = tiddler.getTags();
		if(!usePre || tags)
			attributes += ' tags="' + tags.htmlEncode() + '"';
		return ('<div %0="%1"%2%3>%4</'+'div>').format([
				usePre ? "title" : "tiddler",
				tiddler.title.htmlEncode(),
				attributes,
				extendedAttributes,
				usePre ? "\n<pre>" + tiddler.text.htmlEncode() + "</pre>\n" : tiddler.text.escapeLineBreaks().htmlEncode()
			]);
	} catch (ex) {
		throw exceptionText(ex,config.messages.tiddlerSaveError.format([tiddler.title]));
	}
};

//]]>
</script>
<script id="jsdeprecatedArea" type="text/javascript">
//<![CDATA[
//--
//-- Deprecated Crypto functions and associated conversion routines.
//-- Use the jQuery.encoding functions directly instead.
//--

// Crypto 'namespace'
function Crypto() {}

// Convert a string to an array of big-endian 32-bit words
Crypto.strToBe32s = function(str)
{
	return jQuery.encoding.strToBe32s(str);
};

// Convert an array of big-endian 32-bit words to a string
Crypto.be32sToStr = function(be)
{
	return jQuery.encoding.be32sToStr(be);
};

// Convert an array of big-endian 32-bit words to a hex string
Crypto.be32sToHex = function(be)
{
	return jQuery.encoding.be32sToHex(be);
};

// Return, in hex, the SHA-1 hash of a string
Crypto.hexSha1Str = function(str)
{
	return jQuery.encoding.digests.hexSha1Str(str);
};

// Return the SHA-1 hash of a string
Crypto.sha1Str = function(str)
{
	return jQuery.encoding.digests.sha1Str(str);
};

// Calculate the SHA-1 hash of an array of blen bytes of big-endian 32-bit words
Crypto.sha1 = function(x,blen)
{
	return jQuery.encoding.digests.sha1(x,blen);
};

//--
//-- Deprecated code
//--

// @Deprecated: Use createElementAndWikify and this.termRegExp instead
config.formatterHelpers.charFormatHelper = function(w)
{
	w.subWikify(createTiddlyElement(w.output,this.element),this.terminator);
};

// @Deprecated: Use enclosedTextHelper and this.lookaheadRegExp instead
config.formatterHelpers.monospacedByLineHelper = function(w)
{
	var lookaheadRegExp = new RegExp(this.lookahead,"mg");
	lookaheadRegExp.lastIndex = w.matchStart;
	var lookaheadMatch = lookaheadRegExp.exec(w.source);
	if(lookaheadMatch && lookaheadMatch.index == w.matchStart) {
		var text = lookaheadMatch[1];
		if(config.browser.isIE)
			text = text.replace(/\n/g,"\r");
		createTiddlyElement(w.output,"pre",null,null,text);
		w.nextMatch = lookaheadRegExp.lastIndex;
	}
};

// @Deprecated: Use <br> or <br /> instead of <<br>>
config.macros.br = {};
config.macros.br.handler = function(place)
{
	createTiddlyElement(place,"br");
};

// Find an entry in an array. Returns the array index or null
// @Deprecated: Use indexOf instead
Array.prototype.find = function(item)
{
	var i = this.indexOf(item);
	return i == -1 ? null : i;
};

// Load a tiddler from an HTML DIV. The caller should make sure to later call Tiddler.changed()
// @Deprecated: Use store.getLoader().internalizeTiddler instead
Tiddler.prototype.loadFromDiv = function(divRef,title)
{
	return store.getLoader().internalizeTiddler(store,this,title,divRef);
};

// Format the text for storage in an HTML DIV
// @Deprecated Use store.getSaver().externalizeTiddler instead.
Tiddler.prototype.saveToDiv = function()
{
	return store.getSaver().externalizeTiddler(store,this);
};

// @Deprecated: Use store.allTiddlersAsHtml() instead
function allTiddlersAsHtml()
{
	return store.allTiddlersAsHtml();
}

// @Deprecated: Use refreshPageTemplate instead
function applyPageTemplate(title)
{
	refreshPageTemplate(title);
}

// @Deprecated: Use story.displayTiddlers instead
function displayTiddlers(srcElement,titles,template,unused1,unused2,animate,unused3)
{
	story.displayTiddlers(srcElement,titles,template,animate);
}

// @Deprecated: Use story.displayTiddler instead
function displayTiddler(srcElement,title,template,unused1,unused2,animate,unused3)
{
	story.displayTiddler(srcElement,title,template,animate);
}

// @Deprecated: Use functions on right hand side directly instead
var createTiddlerPopup = Popup.create;
var scrollToTiddlerPopup = Popup.show;
var hideTiddlerPopup = Popup.remove;

// @Deprecated: Use right hand side directly instead
var regexpBackSlashEn = new RegExp("\\\\n","mg");
var regexpBackSlash = new RegExp("\\\\","mg");
var regexpBackSlashEss = new RegExp("\\\\s","mg");
var regexpNewLine = new RegExp("\n","mg");
var regexpCarriageReturn = new RegExp("\r","mg");

//--
//-- Deprecated FileAdaptor functions
//--

FileAdaptor.loadTiddlyWikiCallback = function(status,context,responseText,url,xhr)
{
	context.status = status;
	if(!status) {
		context.statusText = "Error reading file";
	} else {
		context.adaptor.store = new TiddlyWiki();
		if(!context.adaptor.store.importTiddlyWiki(responseText)) {
			context.statusText = config.messages.invalidFileError.format([url]);
			context.status = false;
		}
	}
	context.complete(context,context.userParams);
};

//--
//-- Deprecated HTTP request code
//-- Use the jQuery ajax functions directly instead
//--

function loadRemoteFile(url,callback,params)
{
	return httpReq("GET",url,callback,params);
}

function doHttp(type,url,data,contentType,username,password,callback,params,headers,allowCache)
{
	return httpReq(type,url,callback,params,headers,data,contentType,username,password,allowCache);
}

//--
//-- Deprecated String functions
//--

// @Deprecated: no direct replacement, since not used in core code
String.prototype.toJSONString = function()
{
	// Convert a string to it's JSON representation by encoding control characters, double quotes and backslash. See json.org
	var m = {
		'\b': '\\b',
		'\f': '\\f',
		'\n': '\\n',
		'\r': '\\r',
		'\t': '\\t',
		'"' : '\\"',
		'\\': '\\\\'
		};
	var replaceFn = function(a,b) {
		var c = m[b];
		if(c)
			return c;
		c = b.charCodeAt();
		return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
		};
	if(/["\\\x00-\x1f]/.test(this))
		return '"' + this.replace(/([\x00-\x1f\\"])/g,replaceFn) + '"';
	return '"' + this + '"';
};

//--
//-- Deprecated Tiddler code
//--

// @Deprecated: Use tiddlerToRssItem(tiddler,uri) instead
Tiddler.prototype.toRssItem = function(uri)
{
	return tiddlerToRssItem(this,uri);
};

// @Deprecated: Use "<item>\n" + tiddlerToRssItem(tiddler,uri)  + "\n</item>" instead
Tiddler.prototype.saveToRss = function(uri)
{
	return "<item>\n" + tiddlerToRssItem(this,uri) + "\n</item>";
};

// @Deprecated: Use jQuery.encoding.digests.hexSha1Str instead
Tiddler.prototype.generateFingerprint = function()
{
	return "0x" + Crypto.hexSha1Str(this.text);
};

//--
//-- Deprecated Number functions
//--

// @Deprecated: no direct replacement, since not used in core code
// Clamp a number to a range
Number.prototype.clamp = function(min,max)
{
	var c = this;
	if(c < min)
		c = min;
	if(c > max)
		c = max;
	return Number(c);
};

//--
//-- Deprecated utility functions
//-- Use the jQuery functions directly instead
//--

// Remove all children of a node
function removeChildren(e)
{
	jQuery(e).empty();
}

// Remove a node and all it's children
function removeNode(e)
{
	jQuery(e).remove();
}

// Return the content of an element as plain text with no formatting
function getPlainText(e)
{
	return jQuery(e).text();
}

function addClass(e,className)
{
	jQuery(e).addClass(className);
}

function removeClass(e,className)
{
	jQuery(e).removeClass(className);
}

function hasClass(e,className)
{
	return jQuery(e).hasClass(className);
}

//--
//-- Deprecated Wikifier code
//--

function wikifyPlain(title,theStore,limit)
{
	if(!theStore)
		theStore = store;
	if(theStore.tiddlerExists(title) || theStore.isShadowTiddler(title)) {
		return wikifyPlainText(theStore.getTiddlerText(title),limit,tiddler);
	} else {
		return "";
	}
}

//]]>
</script>
<script id="jslibArea" type="text/javascript">
//<![CDATA[
/*! jQuery v1.6.4 http://jquery.com/ | http://jquery.org/license */
(function(a,b){function cu(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cr(a){if(!cg[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ch||(ch=c.createElement("iframe"),ch.frameBorder=ch.width=ch.height=0),b.appendChild(ch);if(!ci||!ch.createElement)ci=(ch.contentWindow||ch.contentDocument).document,ci.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),ci.close();d=ci.createElement(a),ci.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ch)}cg[a]=e}return cg[a]}function cq(a,b){var c={};f.each(cm.concat.apply([],cm.slice(0,b)),function(){c[this]=a});return c}function cp(){cn=b}function co(){setTimeout(cp,0);return cn=f.now()}function cf(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ce(){try{return new a.XMLHttpRequest}catch(b){}}function b$(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bZ(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bY(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bA.test(a)?d(a,e):bY(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)bY(a+"["+e+"]",b[e],c,d);else d(a,b)}function bX(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function bW(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bP,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bW(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bW(a,c,d,e,"*",g));return l}function bV(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bL),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function by(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bt:bu;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bv(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function bl(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bd,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bk(a){f.nodeName(a,"input")?bj(a):"getElementsByTagName"in a&&f.grep(a.getElementsByTagName("input"),bj)}function bj(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bi(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function bh(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bg(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c=f.expando,d=f.data(a),e=f.data(b,d);if(d=d[c]){var g=d.events;e=e[c]=f.extend({},d);if(g){delete e.handle,e.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)f.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function bf(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function V(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(Q.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function U(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function M(a,b){return(a&&a!=="*"?a+".":"")+b.replace(y,"`").replace(z,"&")}function L(a){var b,c,d,e,g,h,i,j,k,l,m,n,o,p=[],q=[],r=f._data(this,"events");if(!(a.liveFired===this||!r||!r.live||a.target.disabled||a.button&&a.type==="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var s=r.live.slice(0);for(i=0;i<s.length;i++)g=s[i],g.origType.replace(w,"")===a.type?q.push(g.selector):s.splice(i--,1);e=f(a.target).closest(q,a.currentTarget);for(j=0,k=e.length;j<k;j++){m=e[j];for(i=0;i<s.length;i++){g=s[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,d=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,d=f(a.relatedTarget).closest(g.selector)[0],d&&f.contains(h,d)&&(d=h);(!d||d!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){e=p[j];if(c&&e.level>c)break;a.currentTarget=e.elem,a.data=e.handleObj.data,a.handleObj=e.handleObj,o=e.handleObj.origHandler.apply(e.elem,arguments);if(o===!1||a.isPropagationStopped()){c=e.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function J(a,c,d){var e=f.extend({},d[0]);e.type=a,e.originalEvent={},e.liveFired=b,f.event.handle.call(c,e),e.isDefaultPrevented()&&d[0].preventDefault()}function D(){return!0}function C(){return!1}function m(a,c,d){var e=c+"defer",g=c+"queue",h=c+"mark",i=f.data(a,e,b,!0);i&&(d==="queue"||!f.data(a,g,b,!0))&&(d==="mark"||!f.data(a,h,b,!0))&&setTimeout(function(){!f.data(a,g,b,!0)&&!f.data(a,h,b,!0)&&(f.removeData(a,e,!0),i.resolve())},0)}function l(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function k(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(j,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNaN(d)?i.test(d)?f.parseJSON(d):d:parseFloat(d)}catch(g){}f.data(a,c,d)}else d=b}return d}var c=a.document,d=a.navigator,e=a.location,f=function(){function K(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(K,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z]|[0-9])/ig,x=/^-ms-/,y=function(a,b){return(b+"").toUpperCase()},z=d.userAgent,A,B,C,D=Object.prototype.toString,E=Object.prototype.hasOwnProperty,F=Array.prototype.push,G=Array.prototype.slice,H=String.prototype.trim,I=Array.prototype.indexOf,J={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.6.4",length:0,size:function(){return this.length},toArray:function(){return G.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?F.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),B.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(G.apply(this,arguments),"slice",G.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:F,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;B.resolveWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!B){B=e._Deferred();if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",C,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",C),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&K()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNaN:function(a){return a==null||!m.test(a)||isNaN(a)},type:function(a){return a==null?String(a):J[D.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!E.call(a,"constructor")&&!E.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||E.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(x,"ms-").replace(w,y)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:H?function(a){return a==null?"":H.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?F.call(c,a):e.merge(c,a)}return c},inArray:function(a,b){if(!b)return-1;if(I)return I.call(b,a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=G.call(arguments,2),g=function(){return a.apply(c,f.concat(G.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){J["[object "+b+"]"]=b.toLowerCase()}),A=e.uaMatch(z),A.browser&&(e.browser[A.browser]=!0,e.browser.version=A.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?C=function(){c.removeEventListener("DOMContentLoaded",C,!1),e.ready()}:c.attachEvent&&(C=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",C),e.ready())});return e}(),g="done fail isResolved isRejected promise then always pipe".split(" "),h=[].slice;f.extend({_Deferred:function(){var a=[],b,c,d,e={done:function(){if(!d){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=f.type(i),j==="array"?e.done.apply(e,i):j==="function"&&a.push(i);k&&e.resolveWith(k[0],k[1])}return this},resolveWith:function(e,f){if(!d&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(e,f)}finally{b=[e,f],c=0}}return this},resolve:function(){e.resolveWith(this,arguments);return this},isResolved:function(){return!!c||!!b},cancel:function(){d=1,a=[];return this}};return e},Deferred:function(a){var b=f._Deferred(),c=f._Deferred(),d;f.extend(b,{then:function(a,c){b.done(a).fail(c);return this},always:function(){return b.done.apply(b,arguments).fail.apply(this,arguments)},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,pipe:function(a,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[c,"reject"]},function(a,c){var e=c[0],g=c[1],h;f.isFunction(e)?b[a](function(){h=e.apply(this,arguments),h&&f.isFunction(h.promise)?h.promise().then(d.resolve,d.reject):d[g+"With"](this===b?d:this,[h])}):b[a](d[g])})}).promise()},promise:function(a){if(a==null){if(d)return d;d=a={}}var c=g.length;while(c--)a[g[c]]=b[g[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?h.call(arguments,0):c,--e||g.resolveWith(g,h.call(b,0))}}var b=arguments,c=0,d=b.length,e=d,g=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred();if(d>1){for(;c<d;c++)b[c]&&f.isFunction(b[c].promise)?b[c].promise().then(i(c),g.reject):--e;e||g.resolveWith(g,b)}else g!==a&&g.resolveWith(g,d?[a]:[]);return g.promise()}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55$/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.firstChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},m&&f.extend(p,{position:"absolute",left:"-1000px",top:"-1000px"});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0),o.innerHTML="",n.removeChild(o);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var i=/^(?:\{.*\}|\[.*\])$/,j=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!l(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i=f.expando,j=typeof c=="string",k=a.nodeType,l=k?f.cache:a,m=k?a[f.expando]:a[f.expando]&&f.expando;if((!m||e&&m&&l[m]&&!l[m][i])&&j&&d===b)return;m||(k?a[f.expando]=m=++f.uuid:m=f.expando),l[m]||(l[m]={},k||(l[m].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?l[m][i]=f.extend(l[m][i],c):l[m]=f.extend(l[m],c);g=l[m],e&&(g[i]||(g[i]={}),g=g[i]),d!==b&&(g[f.camelCase(c)]=d);if(c==="events"&&!g[c])return g[i]&&g[i].events;j?(h=g[c],h==null&&(h=g[f.camelCase(c)])):h=g;return h}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e=f.expando,g=a.nodeType,h=g?f.cache:a,i=g?a[f.expando]:f.expando;if(!h[i])return;if(b){d=c?h[i][e]:h[i];if(d){d[b]||(b=f.camelCase(b)),delete d[b];if(!l(d))return}}if(c){delete h[i][e];if(!l(h[i]))return}var j=h[i][e];f.support.deleteExpando||!h.setInterval?delete h[i]:h[i]=null,j?(h[i]={},g||(h[i].toJSON=f.noop),h[i][e]=j):g&&(f.support.deleteExpando?delete a[f.expando]:a.removeAttribute?a.removeAttribute(f.expando):a[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d=null;if(typeof a=="undefined"){if(this.length){d=f.data(this[0]);if(this[0].nodeType===1){var e=this[0].attributes,g;for(var h=0,i=e.length;h<i;h++)g=e[h].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),k(this[0],g,d[g]))}}return d}if(typeof a=="object")return this.each(function(){f.data(this,a)});var j=a.split(".");j[1]=j[1]?"."+j[1]:"";if(c===b){d=this.triggerHandler("getData"+j[1]+"!",[j[0]]),d===b&&this.length&&(d=f.data(this[0],a),d=k(this[0],a,d));return d===b&&j[1]?this.data(j[0]):d}return this.each(function(){var b=f(this),d=[j[0],c];b.triggerHandler("setData"+j[1]+"!",d),f.data(this,a,c),b.triggerHandler("changeData"+j[1]+"!",d)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,c){a&&(c=(c||"fx")+"mark",f.data(a,c,(f.data(a,c,b,!0)||0)+1,!0))},_unmark:function(a,c,d){a!==!0&&(d=c,c=a,a=!1);if(c){d=d||"fx";var e=d+"mark",g=a?0:(f.data(c,e,b,!0)||1)-1;g?f.data(c,e,g,!0):(f.removeData(c,e,!0),m(c,d,"mark"))}},queue:function(a,c,d){if(a){c=(c||"fx")+"queue";var e=f.data(a,c,b,!0);d&&(!e||f.isArray(d)?e=f.data(a,c,f.makeArray(d),!0):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e;d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),d.call(a,function(){f.dequeue(a,b)})),c.length||(f.removeData(a,b+"queue",!0),m(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){f.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f._Deferred(),!0))h++,l.done(m);m();return d.promise()}});var n=/[\n\t\r]/g,o=/\s+/,p=/\r/g,q=/^(?:button|input)$/i,r=/^(?:button|input|object|select|textarea)$/i,s=/^a(?:rea)?$/i,t=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,u,v;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(o);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(o);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(n," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(o);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(n," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e=this[0];if(!arguments.length){if(e){c=f.valHooks[e.nodeName.toLowerCase()]||f.valHooks[e.type];if(c&&"get"in c&&(d=c.get(e,"value"))!==b)return d;d=e.value;return typeof d=="string"?d.replace(p,""):d==null?"":d}return b}var g=f.isFunction(a);return this.each(function(d){var e=f(this),h;if(this.nodeType===1){g?h=a.call(this,d,e.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c=a.selectedIndex,d=[],e=a.options,g=a.type==="select-one";if(c<0)return null;for(var h=g?c:0,i=g?c+1:e.length;h<i;h++){var j=e[h];if(j.selected&&(f.support.optDisabled?!j.disabled:j.getAttribute("disabled")===null)&&(!j.parentNode.disabled||!f.nodeName(j.parentNode,"optgroup"))){b=f(j).val();if(g)return b;d.push(b)}}if(g&&!d.length&&e.length)return f(e[c]).val();return d},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attrFix:{tabindex:"tabIndex"},attr:function(a,c,d,e){var g=a.nodeType;if(!a||g===3||g===8||g===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);var h,i,j=g!==1||!f.isXMLDoc(a);j&&(c=f.attrFix[c]||c,i=f.attrHooks[c],i||(t.test(c)?i=v:u&&(i=u)));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(i&&"set"in i&&j&&(h=i.set(a,d,c))!==b)return h;a.setAttribute(c,""+d);return d}if(i&&"get"in i&&j&&(h=i.get(a,c))!==null)return h;h=a.getAttribute(c);return h===null?b:h},removeAttr:function(a,b){var c;a.nodeType===1&&(b=f.attrFix[b]||b,f.attr(a,b,""),a.removeAttribute(b),t.test(b)&&(c=f.propFix[b]||b)in a&&(a[c]=!1))},attrHooks:{type:{set:function(a,b){if(q.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(u&&f.nodeName(a,"button"))return u.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(u&&f.nodeName(a,"button"))return u.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e=a.nodeType;if(!a||e===3||e===8||e===2)return b;var g,h,i=e!==1||!f.isXMLDoc(a);i&&(c=f.propFix[c]||c,h=f.propHooks[c]);return d!==b?h&&"set"in h&&(g=h.set(a,d,c))!==b?g:a[c]=d:h&&"get"in h&&(g=h.get(a,c))!==null?g:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):r.test(a.nodeName)||s.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabIndex=f.propHooks.tabIndex,v={get:function(a,c){var d;return f.prop(a,c)===!0||(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},f.support.getSetAttribute||(u=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&d.nodeValue!==""?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})})),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var w=/\.(.*)$/,x=/^(?:textarea|input|select)$/i,y=/\./g,z=/ /g,A=/[^\w\s.|`]/g,B=function(a){return a.replace(A,"\\$&")};f.event={add:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){if(d===!1)d=C;else if(!d)return;var g,h;d.handler&&(g=d,d=g.handler),d.guid||(d.guid=f.guid++);var i=f._data(a);if(!i)return;var j=i.events,k=i.handle;j||(i.events=j={}),k||(i.handle=k=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.handle.apply(k.elem,arguments):b}),k.elem=a,c=c.split(" ");var l,m=0,n;while(l=c[m++]){h=g?f.extend({},g):{handler:d,data:e},l.indexOf(".")>-1?(n=l.split("."),l=n.shift(),h.namespace=n.slice(0).sort().join(".")):(n=[],h.namespace=""),h.type=l,h.guid||(h.guid=d.guid);var o=j[l],p=f.event.special[l]||{};if(!o){o=j[l]=[];if(!p.setup||p.setup.call(a,e,n,k)===!1)a.addEventListener?a.addEventListener(l,k,!1):a.attachEvent&&a.attachEvent("on"+l,k)}p.add&&(p.add.call(a,h),h.handler.guid||(h.handler.guid=d.guid)),o.push(h),f.event.global[l]=!0}a=null}},global:{},remove:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){d===!1&&(d=C);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=f.hasData(a)&&f._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(d=c.handler,c=c.type);if(!c||typeof c=="string"&&c.charAt(0)==="."){c=c||"";for(h in t)f.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+f.map(m.slice(0).sort(),B).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!d){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))f.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=f.event.special[h]||{};for(j=e||0;j<p.length;j++){q=p[j];if(d.guid===q.guid){if(l||n.test(q.namespace))e==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(e!=null)break}}if(p.length===0||e!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&f.removeEvent(a,h,s.handle),g=null,delete 
t[h]}if(f.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,f.isEmptyObject(s)&&f.removeData(a,b,!0)}}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){var h=c.type||c,i=[],j;h.indexOf("!")>=0&&(h=h.slice(0,-1),j=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if(!!e&&!f.event.customEvent[h]||!!f.event.global[h]){c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.exclusive=j,c.namespace=i.join("."),c.namespace_re=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(g||!e)c.preventDefault(),c.stopPropagation();if(!e){f.each(f.cache,function(){var a=f.expando,b=this[a];b&&b.events&&b.events[h]&&f.event.trigger(c,d,b.handle.elem)});return}if(e.nodeType===3||e.nodeType===8)return;c.result=b,c.target=e,d=d!=null?f.makeArray(d):[],d.unshift(c);var k=e,l=h.indexOf(":")<0?"on"+h:"";do{var m=f._data(k,"handle");c.currentTarget=k,m&&m.apply(k,d),l&&f.acceptData(k)&&k[l]&&k[l].apply(k,d)===!1&&(c.result=!1,c.preventDefault()),k=k.parentNode||k.ownerDocument||k===c.target.ownerDocument&&a}while(k&&!c.isPropagationStopped());if(!c.isDefaultPrevented()){var n,o=f.event.special[h]||{};if((!o._default||o._default.call(e.ownerDocument,c)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)){try{l&&e[h]&&(n=e[l],n&&(e[l]=null),f.event.triggered=h,e[h]())}catch(p){}n&&(e[l]=n),f.event.triggered=b}}return c.result}},handle:function(c){c=f.event.fix(c||a.event);var d=((f._data(this,"events")||{})[c.type]||[]).slice(0),e=!c.exclusive&&!c.namespace,g=Array.prototype.slice.call(arguments,0);g[0]=c,c.currentTarget=this;for(var h=0,i=d.length;h<i;h++){var j=d[h];if(e||c.namespace_re.test(j.namespace)){c.handler=j.handler,c.data=j.data,c.handleObj=j;var k=j.handler.apply(this,g);k!==b&&(c.result=k,k===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[f.expando])return a;var d=a;a=f.Event(d);for(var e=this.props.length,g;e;)g=this.props[--e],a[g]=d[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=a.target.ownerDocument||c,i=h.documentElement,j=h.body;a.pageX=a.clientX+(i&&i.scrollLeft||j&&j.scrollLeft||0)-(i&&i.clientLeft||j&&j.clientLeft||0),a.pageY=a.clientY+(i&&i.scrollTop||j&&j.scrollTop||0)-(i&&i.clientTop||j&&j.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:f.proxy,special:{ready:{setup:f.bindReady,teardown:f.noop},live:{add:function(a){f.event.add(this,M(a.origType,a.selector),f.extend({},a,{handler:L,guid:a.handler.guid}))},remove:function(a){f.event.remove(this,M(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!this.preventDefault)return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?D:C):this.type=a,b&&f.extend(this,b),this.timeStamp=f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=D;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=D;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=D,this.stopPropagation()},isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C};var E=function(a){var b=a.relatedTarget,c=!1,d=a.type;a.type=a.data,b!==this&&(b&&(c=f.contains(this,b)),c||(f.event.handle.apply(this,arguments),a.type=d))},F=function(a){a.type=a.data,f.event.handle.apply(this,arguments)};f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={setup:function(c){f.event.add(this,b,c&&c.selector?F:E,a)},teardown:function(a){f.event.remove(this,b,a&&a.selector?F:E)}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(a,b){if(!f.nodeName(this,"form"))f.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=f.nodeName(b,"input")||f.nodeName(b,"button")?b.type:"";(c==="submit"||c==="image")&&f(b).closest("form").length&&J("submit",this,arguments)}),f.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=f.nodeName(b,"input")||f.nodeName(b,"button")?b.type:"";(c==="text"||c==="password")&&f(b).closest("form").length&&a.keyCode===13&&J("submit",this,arguments)});else return!1},teardown:function(a){f.event.remove(this,".specialSubmit")}});if(!f.support.changeBubbles){var G,H=function(a){var b=f.nodeName(a,"input")?a.type:"",c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?f.map(a.options,function(a){return a.selected}).join("-"):"":f.nodeName(a,"select")&&(c=a.selectedIndex);return c},I=function(c){var d=c.target,e,g;if(!!x.test(d.nodeName)&&!d.readOnly){e=f._data(d,"_change_data"),g=H(d),(c.type!=="focusout"||d.type!=="radio")&&f._data(d,"_change_data",g);if(e===b||g===e)return;if(e!=null||g)c.type="change",c.liveFired=b,f.event.trigger(c,arguments[1],d)}};f.event.special.change={filters:{focusout:I,beforedeactivate:I,click:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(c==="radio"||c==="checkbox"||f.nodeName(b,"select"))&&I.call(this,a)},keydown:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(a.keyCode===13&&!f.nodeName(b,"textarea")||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&I.call(this,a)},beforeactivate:function(a){var b=a.target;f._data(b,"_change_data",H(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in G)f.event.add(this,c+".specialChange",G[c]);return x.test(this.nodeName)},teardown:function(a){f.event.remove(this,".specialChange");return x.test(this.nodeName)}},G=f.event.special.change.filters,G.focus=G.beforeactivate}f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){function e(a){var c=f.event.fix(a);c.type=b,c.originalEvent={},f.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var d=0;f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.each(["bind","one"],function(a,c){f.fn[c]=function(a,d,e){var g;if(typeof a=="object"){for(var h in a)this[c](h,d,a[h],e);return this}if(arguments.length===2||d===!1)e=d,d=b;c==="one"?(g=function(a){f(this).unbind(a,g);return e.apply(this,arguments)},g.guid=e.guid||f.guid++):g=e;if(a==="unload"&&c!=="one")this.one(a,d,e);else for(var i=0,j=this.length;i<j;i++)f.event.add(this[i],a,g,d);return this}}),f.fn.extend({unbind:function(a,b){if(typeof a=="object"&&!a.preventDefault)for(var c in a)this.unbind(c,a[c]);else for(var d=0,e=this.length;d<e;d++)f.event.remove(this[d],a,b);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f.data(this,"lastToggle"+a.guid)||0)%d;f.data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var K={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};f.each(["live","die"],function(a,c){f.fn[c]=function(a,d,e,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:f(this.context);if(typeof a=="object"&&!a.preventDefault){for(var o in a)n[c](o,d,a[o],m);return this}if(c==="die"&&!a&&g&&g.charAt(0)==="."){n.unbind(g);return this}if(d===!1||f.isFunction(d))e=d||C,d=b;a=(a||"").split(" ");while((h=a[i++])!=null){j=w.exec(h),k="",j&&(k=j[0],h=h.replace(w,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,K[h]?(a.push(K[h]+k),h=h+k):h=(K[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)f.event.add(n[p],"live."+M(h,m),{data:d,selector:m,handler:e,origType:h,origHandler:e,preType:l});else n.unbind("live."+M(h,m),e)}return this}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=0,e=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,f,g){f=f||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return f;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(e.call(n)==="[object Array]")if(!u)f.push.apply(f,n);else if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&f.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&f.push(j[t]);else p(n,f);o&&(k(o,h,f,g),k.uniqueSort(f));return f};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(!f)g=o=!0;else if(f===!0)continue}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("parentNode",b,f,a,e,c)},"~":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("previousSibling",b,f,a,e,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=d++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(e.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var f=a.length;c<f;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){if(a===b){g=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};f.find=k,f.expr=k.selectors,f.expr[":"]=f.expr.filters,f.unique=k.uniqueSort,f.text=k.getText,f.isXMLDoc=k.isXML,f.contains=k.contains}();var N=/Until$/,O=/^(?:parents|prevUntil|prevAll)/,P=/,/,Q=/^.[^:#\[\.,]*$/,R=Array.prototype.slice,S=f.expr.match.POS,T={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(V(this,a,!1),"not",a)},filter:function(a){return this.pushStack(V(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(d=0,e=a.length;d<e;d++)i=a[d],j[i]||(j[i]=S.test(i)?f(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:f(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=S.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(l?l.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(U(c[0])||U(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=R.call(arguments);N.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!T[a]?f.unique(e):e,(this.length>1||P.test(d))&&O.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|object|embed|option|style)/i,bb=/checked\s*(?:[^=]|=\s*.checked.)/i,bc=/\/(java|ecma)script/i,bd=/^\s*<!(?:\[CDATA\[|\-\-)/,be={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};be.optgroup=be.option,be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,f.support.htmlSerialize||(be._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!be[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bb.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bf(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bl)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i;b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof a[0]=="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!ba.test(a[0])&&(f.support.checkClone||!bb.test(a[0]))&&(g=!0,h=f.fragments[a[0]],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean
(a,i,e,d)),g&&(f.fragments[a[0]]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bh(a,d),e=bi(a),g=bi(d);for(h=0;e[h];++h)g[h]&&bh(e[h],g[h])}if(b){bg(a,d);if(c){e=bi(a),g=bi(d);for(h=0;e[h];++h)bg(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!_.test(k))k=b.createTextNode(k);else{k=k.replace(Y,"<$1></$2>");var l=(Z.exec(k)||["",""])[1].toLowerCase(),m=be[l]||be._default,n=m[0],o=b.createElement("div");o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=$.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&X.test(k)&&o.insertBefore(b.createTextNode(X.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bk(k[i]);else bk(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bc.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.expando,g=f.event.special,h=f.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&f.noData[j.nodeName.toLowerCase()])continue;c=j[f.expando];if(c){b=d[c]&&d[c][e];if(b&&b.events){for(var k in b.events)g[k]?f.event.remove(j,k):f.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[f.expando]:j.removeAttribute&&j.removeAttribute(f.expando),delete d[c]}}}});var bm=/alpha\([^)]*\)/i,bn=/opacity=([^)]*)/,bo=/([A-Z]|^ms)/g,bp=/^-?\d+(?:px)?$/i,bq=/^-?\d/,br=/^([\-+])=([\-+.\de]+)/,bs={position:"absolute",visibility:"hidden",display:"block"},bt=["Left","Right"],bu=["Top","Bottom"],bv,bw,bx;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bv(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=br.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bv)return bv(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return by(a,b,d);f.swap(a,bs,function(){e=by(a,b,d)});return e}},set:function(a,b){if(!bp.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bn.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNaN(b)?"":"alpha(opacity="+b*100+")",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bm,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bm.test(g)?g.replace(bm,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bv(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bw=function(a,c){var d,e,g;c=c.replace(bo,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bx=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bp.test(d)&&bq.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bv=bw||bx,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bz=/%20/g,bA=/\[\]$/,bB=/\r?\n/g,bC=/#.*$/,bD=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bE=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bF=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bG=/^(?:GET|HEAD)$/,bH=/^\/\//,bI=/\?/,bJ=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bK=/^(?:select|textarea)/i,bL=/\s+/,bM=/([?&])_=[^&]*/,bN=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bO=f.fn.load,bP={},bQ={},bR,bS,bT=["*/"]+["*"];try{bR=e.href}catch(bU){bR=c.createElement("a"),bR.href="",bR=bR.href}bS=bN.exec(bR.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bO)return bO.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bJ,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bK.test(this.nodeName)||bE.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bB,"\r\n")}}):{name:b.name,value:c.replace(bB,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?bX(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),bX(a,b);return a},ajaxSettings:{url:bR,isLocal:bF.test(bS[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bT},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bV(bP),ajaxTransport:bV(bQ),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?bZ(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=b$(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.resolveWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f._Deferred(),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bD.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.done,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bC,"").replace(bH,bS[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bL),d.crossDomain==null&&(r=bN.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bS[1]&&r[2]==bS[2]&&(r[3]||(r[1]==="http:"?80:443))==(bS[3]||(bS[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bW(bP,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bG.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bI.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bM,"$1_="+x);d.url=y+(y===d.url?(bI.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bT+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bW(bQ,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){s<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)bY(g,a[g],c,e);return d.join("&").replace(bz,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var b_=f.now(),ca=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+b_++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ca.test(b.url)||e&&ca.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ca,l),b.url===j&&(e&&(k=k.replace(ca,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cb=a.ActiveXObject?function(){for(var a in cd)cd[a](0,1)}:!1,cc=0,cd;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ce()||cf()}:ce,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cb&&delete cd[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cc,cb&&(cd||(cd={},f(a).unload(cb)),cd[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cg={},ch,ci,cj=/^(?:toggle|show|hide)$/,ck=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cl,cm=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cn;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cq("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cr(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cq("hide",3),a,b,c);for(var d=0,e=this.length;d<e;d++)if(this[d].style){var g=f.css(this[d],"display");g!=="none"&&!f._data(this[d],"olddisplay")&&f._data(this[d],"olddisplay",g)}for(d=0;d<e;d++)this[d].style&&(this[d].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cq("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return this[e.queue===!1?"each":"queue"](function(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(f.support.inlineBlockNeedsLayout?(j=cr(this.nodeName),j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)):this.style.display="inline-block"))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)k=new f.fx(this,b,i),h=a[i],cj.test(h)?k[h==="toggle"?d?"show":"hide":h]():(l=ck.exec(h),m=k.cur(),l?(n=parseFloat(l[2]),o=l[3]||(f.cssNumber[i]?"":"px"),o!=="px"&&(f.style(this,i,(n||1)+o),m=(n||1)/k.cur()*m,f.style(this,i,m+o)),l[1]&&(n=(l[1]==="-="?-1:1)*n+m),k.custom(m,n,o)):k.custom(m,h,""));return!0})},stop:function(a,b){a&&this.queue([]),this.each(function(){var a=f.timers,c=a.length;b||f._unmark(!0,this);while(c--)a[c].elem===this&&(b&&a[c](!0),a.splice(c,1))}),b||this.dequeue();return this}}),f.each({slideDown:cq("show",1),slideUp:cq("hide",1),slideToggle:cq("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default,d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue!==!1?f.dequeue(this):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function g(a){return d.step(a)}var d=this,e=f.fx;this.startTime=cn||co(),this.start=a,this.end=b,this.unit=c||this.unit||(f.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,g.elem=this.elem,g()&&f.timers.push(g)&&!cl&&(cl=setInterval(e.tick,e.interval))},show:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=cn||co(),c=!0,d=this.elem,e=this.options,g,h;if(a||b>=e.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),e.animatedProperties[this.prop]=!0;for(g in e.animatedProperties)e.animatedProperties[g]!==!0&&(c=!1);if(c){e.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){d.style["overflow"+b]=e.overflow[a]}),e.hide&&f(d).hide();if(e.hide||e.show)for(var i in e.animatedProperties)f.style(d,i,e.orig[i]);e.complete.call(d)}return!1}e.duration==Infinity?this.now=b:(h=b-this.startTime,this.state=h/e.duration,this.pos=f.easing[e.animatedProperties[this.prop]](this.state,h,0,1,e.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){for(var a=f.timers,b=0;b<a.length;++b)a[b]()||a.splice(b--,1);a.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cl),cl=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cs=/^t(?:able|d|h)$/i,ct=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cu(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);f.offset.initialize();var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.offset.doesNotAddBorder&&(!f.offset.doesAddBorderForTableAndCells||!cs.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={initialize:function(){var a=c.body,b=c.createElement("div"),d,e,g,h,i=parseFloat(f.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";f.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),d=b.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,this.doesNotAddBorder=e.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,e.style.position="fixed",e.style.top="20px",this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),f.offset.initialize=f.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.offset.initialize(),f.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=ct.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!ct.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cu(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cu(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a&&a.style?parseFloat(f.css(a,d,"padding")):null},f.fn["outer"+c]=function(a){var b=this[0];return b&&b.style?parseFloat(f.css(b,d,a?"margin":"border")):null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c],h=e.document.body;return e.document.compatMode==="CSS1Compat"&&g||h&&h["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var i=f.css(e,d),j=parseFloat(i);return f.isNaN(j)?i:j}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);
//]]>
</script>
<script id="jqueryArea" type="text/javascript">
//<![CDATA[
/*
jQuery.encoding.digests.sha1.js

SHA-1 digest and associated utility functions

Copyright (c) UnaMesa Association 2009

Dual licensed under the MIT and GPL licenses:
  http://www.opensource.org/licenses/mit-license.php
  http://www.gnu.org/licenses/gpl.html
*/

(function($) {

if(!$.encoding)
	$.encoding = {};
	$.extend($.encoding,{
		strToBe32s: function(str) {
			// Convert a string to an array of big-endian 32-bit words
			var be=[];
			var len=Math.floor(str.length/4);
			var i, j;
			for(i=0, j=0; i<len; i++, j+=4) {
				be[i]=((str.charCodeAt(j)&0xff) << 24)|((str.charCodeAt(j+1)&0xff) << 16)|((str.charCodeAt(j+2)&0xff) << 8)|(str.charCodeAt(j+3)&0xff);
			}
			while(j<str.length) {
				be[j>>2] |= (str.charCodeAt(j)&0xff)<<(24-(j*8)%32);
				j++;
			}
			return be;
		},
		be32sToStr: function(be) {
			// Convert an array of big-endian 32-bit words to a string
			var str='';
			for(var i=0;i<be.length*32;i+=8) {
				str += String.fromCharCode((be[i>>5]>>>(24-i%32)) & 0xff);
			}
			return str;
		},
		be32sToHex: function(be) {
			// Convert an array of big-endian 32-bit words to a hex string
			var hex='0123456789ABCDEF';
			var str='';
			for(var i=0;i<be.length*4;i++) {
				str += hex.charAt((be[i>>2]>>((3-i%4)*8+4))&0xF) + hex.charAt((be[i>>2]>>((3-i%4)*8))&0xF);
			}
			return str;
		}
	});
})(jQuery);


(function($) {

if(!$.encoding.digests)
	$.encoding.digests = {};
	$.extend($.encoding.digests,{
		hexSha1Str: function(str) {
			// Return, in hex, the SHA-1 hash of a string
			return $.encoding.be32sToHex($.encoding.digests.sha1Str(str));
		},
		sha1Str: function(str) {
			// Return the SHA-1 hash of a string
			return sha1($.encoding.strToBe32s(str),str.length);
		},
		sha1: function(x,blen) {
			// Calculate the SHA-1 hash of an array of blen bytes of big-endian 32-bit words
			return sha1($.encoding.strToBe32s(str),str.length);
		}
	});

	// Private functions.
	function sha1(x,blen) {
		// Calculate the SHA-1 hash of an array of blen bytes of big-endian 32-bit words
		function add32(a,b) {
			// Add 32-bit integers, wrapping at 32 bits
			// Uses 16-bit operations internally to work around bugs in some JavaScript interpreters.
			var lsw=(a&0xFFFF)+(b&0xFFFF);
			var msw=(a>>16)+(b>>16)+(lsw>>16);
			return (msw<<16)|(lsw&0xFFFF);
		}
		function AA(a,b,c,d,e) {
			// Cryptographic round helper function. Add five 32-bit integers, wrapping at 32 bits, second parameter is rotated left 5 bits before the addition
			// Uses 16-bit operations internally to work around bugs in some JavaScript interpreters.
			b=(b>>>27)|(b<<5);
			var lsw=(a&0xFFFF)+(b&0xFFFF)+(c&0xFFFF)+(d&0xFFFF)+(e&0xFFFF);
			var msw=(a>>16)+(b>>16)+(c>>16)+(d>>16)+(e>>16)+(lsw>>16);
			return (msw<<16)|(lsw&0xFFFF);
		}
		function RR(w,j) {
			// Cryptographic round helper function.
			var n=w[j-3]^w[j-8]^w[j-14]^w[j-16];
			return (n>>>31)|(n<<1);
		}

		var len=blen*8;
		x[len>>5] |= 0x80 << (24-len%32);
		x[((len+64>>9)<<4)+15]=len;
		var w=new Array(80);

		var k1=0x5A827999;
		var k2=0x6ED9EBA1;
		var k3=0x8F1BBCDC;
		var k4=0xCA62C1D6;

		var h0=0x67452301;
		var h1=0xEFCDAB89;
		var h2=0x98BADCFE;
		var h3=0x10325476;
		var h4=0xC3D2E1F0;

		for(var i=0;i<x.length;i+=16) {
			var j=0;
			var t;
			var a=h0;
			var b=h1;
			var c=h2;
			var d=h3;
			var e=h4;
			while(j<16) {
				w[j]=x[i+j];
				t=AA(e,a,d^(b&(c^d)),w[j],k1);
				e=d; d=c; c=(b>>>2)|(b<<30); b=a; a=t; j++;
			}
			while(j<20) {
				w[j]=RR(w,j);
				t=AA(e,a,d^(b&(c^d)),w[j],k1);
				e=d; d=c; c=(b>>>2)|(b<<30); b=a; a=t; j++;
			}
			while(j<40) {
				w[j]=RR(w,j);
				t=AA(e,a,b^c^d,w[j],k2);
				e=d; d=c; c=(b>>>2)|(b<<30); b=a; a=t; j++;
			}
			while(j<60) {
				w[j]=RR(w,j);
				t=AA(e,a,(b&c)|(d&(b|c)),w[j],k3);
				e=d; d=c; c=(b>>>2)|(b<<30); b=a; a=t; j++;
			}
			while(j<80) {
				w[j]=RR(w,j);
				t=AA(e,a,b^c^d,w[j],k4);
				e=d; d=c; c=(b>>>2)|(b<<30); b=a; a=t; j++;
			}
			h0=add32(h0,a);
			h1=add32(h1,b);
			h2=add32(h2,c);
			h3=add32(h3,d);
			h4=add32(h4,e);
		}
		return [h0,h1,h2,h3,h4];
	}
})(jQuery);
/*
jQuery.twStylesheet.js

jQuery plugin to dynamically insert CSS rules into a document

Usage:
  jQuery.twStylesheet applies style definitions
  jQuery.twStylesheet.remove neutralizes style definitions

Copyright (c) UnaMesa Association 2009

Triple licensed under the BSD, MIT and GPL licenses:
  http://www.opensource.org/licenses/bsd-license.php
  http://www.opensource.org/licenses/mit-license.php
  http://www.gnu.org/licenses/gpl.html
*/

(function($) {

var defaultId = "customStyleSheet"; // XXX: rename to dynamicStyleSheet?

// Add or replace a style sheet
// css argument is a string of CSS rule sets
// options.id is an optional name identifying the style sheet
// options.doc is an optional document reference
// N.B.: Uses DOM methods instead of jQuery to ensure cross-browser comaptibility.
$.twStylesheet = function(css, options) {
	options = options || {};
	var id = options.id || defaultId;
	var doc = options.doc || document;
	var el = doc.getElementById(id);
	if(doc.createStyleSheet) { // IE-specific handling
		if(el) {
			el.parentNode.removeChild(el);
		}
		doc.getElementsByTagName("head")[0].insertAdjacentHTML("beforeEnd",
			'&nbsp;<style id="' + id + '" type="text/css">' + css + '</style>'); // fails without &nbsp;
	} else { // modern browsers
		if(el) {
			el.replaceChild(doc.createTextNode(css), el.firstChild);
		} else {
			el = doc.createElement("style");
			el.type = "text/css";
			el.id = id;
			el.appendChild(doc.createTextNode(css));
			doc.getElementsByTagName("head")[0].appendChild(el);
		}
	}
};

// Remove existing style sheet
// options.id is an optional name identifying the style sheet
// options.doc is an optional document reference
$.twStylesheet.remove = function(options) {
	options = options || {};
	var id = options.id || defaultId;
	var doc = options.doc || document;
	var el = doc.getElementById(id);
	if(el) {
		el.parentNode.removeChild(el);
	}
};

})(jQuery);
//]]>
</script>
<script type="text/javascript">
//<![CDATA[
if(useJavaSaver)
	document.write("<applet style='position:absolute;left:-1px' name='TiddlySaver' code='TiddlySaver.class' archive='TiddlySaver.jar' width='1' height='1'></applet>");
//]]>
</script>
<!--POST-SCRIPT-START-->
<div id="adsense" style="display:none">
<!-- <div id="twitter_div">
<h2 style="display: none;" >Twitter Updates</h2>
<ul id="twitter_update_list"></ul>
<a href="http://twitter.com/tiddlyweb" id="twitter-link" style="display:block;text-align:right;">follow on Twitter</a>
</div>
<script type="text/javascript" src="http://twitter.com/javascripts/blogger.js"></script>
<script type="text/javascript" src="http://twitter.com/statuses/user_timeline/tiddlyweb.json?callback=twitterCallback2&count=1"></script
--!>
</div>

<!--POST-SCRIPT-END-->
</body>
</html>

